(function () {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;
    var desc = Object.getOwnPropertyDescriptor(object, property);

    if (desc === undefined) {
      var parent = Object.getPrototypeOf(object);

      if (parent === null) {
        return undefined;
      } else {
        return get(parent, property, receiver);
      }
    } else if ("value" in desc) {
      return desc.value;
    } else {
      var getter = desc.get;

      if (getter === undefined) {
        return undefined;
      }

      return getter.call(receiver);
    }
  };

  var inherits = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };

  var possibleConstructorReturn = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  };

  var EventTarget = function () {
      function EventTarget() {
          classCallCheck(this, EventTarget);

          this.listeners = {};
      }

      createClass(EventTarget, [{
          key: 'addEventListener',
          value: function addEventListener(type, callback) {
              if (!(type in this.listeners)) {
                  this.listeners[type] = [];
              }
              this.listeners[type].push(callback);
          }
      }, {
          key: 'on',
          value: function on(type, callback) {
              this.addEventListener(type, callback);
              return this;
          }
      }, {
          key: 'removeEventListener',
          value: function removeEventListener(type, callback) {
              if (!(type in this.listeners)) {
                  return;
              }
              var stack = this.listeners[type];
              for (var i = 0, l = stack.length; i < l; i++) {
                  if (stack[i] === callback) {
                      stack.splice(i, 1);
                      return this.removeEventListener(type, callback);
                  }
              }
          }
      }, {
          key: 'off',
          value: function off(type, callback) {
              this.removeEventListener(type, callback);
              return this;
          }
      }, {
          key: 'dispatchEvent',
          value: function dispatchEvent(event) {
              if (!(event.type in this.listeners)) {
                  return;
              }
              var stack = this.listeners[event.type];
              Object.defineProperty(event, 'target', {
                  enumerable: false,
                  configurable: false,
                  writable: false,
                  value: this
              });
              for (var i = 0, l = stack.length; i < l; i++) {
                  stack[i].call(this, event);
              }
          }
      }]);
      return EventTarget;
  }();

  var uniqueGlobalName = function () {
      var freeid = 0;
      return function (thing) {
          var id = "gmx_unique_" + freeid++;
          window[id] = thing;
          return id;
      };
  }();

  /** Посылает кросс-доменный GET запрос к серверу с использованием транспорта JSONP.
   *
   * @memberOf nsGmx.Utils
   * @param {String} url URL сервера.
   * @param {Function} callback Ф-ция, которая будет вызвана при получении от сервера результата.
   * @param {String} [callbackParamName=CallbackName] Имя параметра для задания имени ф-ции ответа.
   * @param {Function} [errorCallback] Ф-ция, которая будет вызвана в случае ошибки запроса к серверу
   */
  function sendCrossDomainJSONRequest(url, callback, callbackParamName, errorCallback) {
      callbackParamName = callbackParamName || 'CallbackName';

      var script = document.createElement("script");
      script.setAttribute("charset", "UTF-8");
      var callbackName = uniqueGlobalName(function (obj) {
          callback && callback(obj);
          window[callbackName] = false;
          document.getElementsByTagName("head").item(0).removeChild(script);
      });

      var sepSym = url.indexOf('?') == -1 ? '?' : '&';

      if (errorCallback) {
          script.onerror = errorCallback;
      }

      script.setAttribute("src", "" + url + sepSym + callbackParamName + "=" + callbackName + "&" + Math.random());
      document.getElementsByTagName("head").item(0).appendChild(script);
  }

  var AuthManager = function (_EventTarget) {
      inherits(AuthManager, _EventTarget);

      function AuthManager(_ref) {
          var authorizationEndpoint = _ref.authorizationEndpoint,
              userInfoEndpoint = _ref.userInfoEndpoint,
              redirectEndpointHtml = _ref.redirectEndpointHtml,
              redirectEndpointAshx = _ref.redirectEndpointAshx,
              credentialLoginEndpoint = _ref.credentialLoginEndpoint,
              _ref$clientId = _ref.clientId,
              clientId = _ref$clientId === undefined ? 1 : _ref$clientId;
          classCallCheck(this, AuthManager);

          // поддерживаем как минимум два события для
          // серверов ресурсов: login и logout
          var _this = possibleConstructorReturn(this, (AuthManager.__proto__ || Object.getPrototypeOf(AuthManager)).call(this));

          _this._authorizationEndpoint = authorizationEndpoint;
          _this._userInfoEndpoint = userInfoEndpoint;
          _this._redirectEndpointHtml = redirectEndpointHtml;
          _this._redirectEndpointAshx = redirectEndpointAshx;
          _this._redirectEndpointAshx2 = redirectEndpointAshx + '/?return_url=' + location.href;
          _this._credentialLoginEndpoint = credentialLoginEndpoint;
          _this._resourceServers = [];
          _this._clientId = clientId;
          return _this;
      }

      createClass(AuthManager, [{
          key: '$getAntiCsrfToken',
          value: function $getAntiCsrfToken() {
              var cookieName = "sync";
              var re = new RegExp('.*' + cookieName + '=([^;]+).*', 'i');
              return document.cookie.replace(re, '$1');
          }
          /** Добавляет сервер ресурсов
           * Должна вызываться только из класса ResourceServer.
           * @param {ResourceServer} resourceServer
           */

      }, {
          key: '$addResourceServer',
          value: function $addResourceServer(resourceServer) {
              this._resourceServers.push(resourceServer);
          }
      }, {
          key: '_chain',
          value: function _chain(tasks, state) {
              return tasks.reduce(function (prev, next) {
                  return prev.then(next);
              }, new Promise(function (resolve, reject) {
                  return resolve(state);
              }));
          }
      }, {
          key: '_authorizeResourceServers',
          value: function _authorizeResourceServers() {
              var tasks = this._resourceServers.map(function (rs) {
                  return function (state) {
                      return new Promise(function (resolve) {
                          rs.sendGetRequest('oAuth2/LoginDialog.ashx').then(function (response) {
                              state = state.concat(response);
                              resolve(state);
                          }).catch(function (e) {
                              return state.push(e);
                          });
                      });
                  };
              });
              return this._chain(tasks, []);
          }
      }, {
          key: '_processAuthorization',
          value: function _processAuthorization(search) {
              var _this2 = this,
                  _arguments = arguments;

              function parseQueryString(search) {
                  var a = search.slice(1).split('&');
                  var o = {};
                  for (var i = 0; i < a.length; i++) {
                      var s = a[i].split('=');
                      o[s[0]] = s[1];
                  }
                  return o;
              }
              return new Promise(function (resolve, reject) {
                  // превращаем строку с параметрами в хеш
                  var params = parseQueryString(search);

                  if (params.error) {
                      reject({
                          Status: 'auth',
                          Result: null,
                          Error: {
                              message: params.error
                          }
                      });
                  } else {
                      sendCrossDomainJSONRequest('' + _this2._redirectEndpointAshx + search, function (resp) {
                          if (resp.Status === 'ok') {
                              resolve({
                                  Status: 'ok',
                                  Result: resp.Result
                              });
                          } else {
                              reject({
                                  Status: resp.Status,
                                  Result: null
                              });
                          }
                      }, 'CallbackName', function () {
                          reject({
                              Status: 'network',
                              Result: null,
                              Error: {
                                  message: _arguments[2]
                              }
                          });
                      });
                  }
              });
          }
          /** Получение информации о пользователе от AuthServer
           * @return {Function} promise(userInfo)
           */

      }, {
          key: 'getUserInfo',
          value: function getUserInfo() {
              var _this3 = this;

              if (this._getUserInfoDeferred) {
                  return this._getUserInfoDeferred;
              }
              return this._getUserInfoDeferred = new Promise(function (resolve, reject) {

                  function authorizationGrant(search) {
                      // удаляем айфрейм и глобальную переменную
                      setTimeout(function () {
                          delete window.authorizationGrant;
                          document.body.removeChild(document.body.querySelector('.authorizationIframe'));
                      }, 0);

                      this._processAuthorization(search).then(function (resp) {
                          return resolve(resp);
                      }, function (err) {
                          return reject(err);
                      });
                  }

                  // посылаем запросы на все сервера ресурсов
                  // когда они все ответят ..
                  _this3._authorizeResourceServers().then(function (servers) {
                      // .. формируем параметры state и scope
                      var scope = '';
                      var state = '';
                      for (var i = 0; i < servers.length; i++) {
                          var response = servers[i];
                          scope += response.Service.ServerId + ',';
                          state += response.Result.State + ',';
                      }
                      scope = scope.slice(0, -1);
                      state = state.slice(0, -1);

                      // .. и посылаем запрос на сервер авторизации
                      window.authorizationGrant = authorizationGrant.bind(_this3);
                      document.body.insertAdjacentHTML('afterbegin', '<iframe\n                    class="authorizationIframe"\n                    style="display: block !important; position: absolute; left: -99999px;"\n                    src="' + _this3._userInfoEndpoint + '/?client_id=1&redirect_uri=' + _this3._redirectEndpointHtml + '&scope=' + scope + '&state=' + state + '">\n                </iframe>');
                  }).catch(function () {
                      reject({
                          Status: 'error'
                      });
                  });
              });
          }
          /** Принудительное перелогинивание пользователя.
           * Пользователь должен увидеть поля для ввода
           * логина/пароля (возможно, на сервере авторизации).
           * При успешной авторизации библиотека должна
           * произвести авторизацию пользователя на всех
           * подключенных серверах ресурсов
           * и только после этого resolve promise
           * @return {Function} promise(userInfo)
           */

      }, {
          key: 'login',
          value: function login(arg) {
              var _this4 = this;

              var foreignServer = void 0;
              var iframeContainer = void 0;
              if (typeof arg === 'string') {
                  // обратная совместимость
                  foreignServer = arg;
              } else if ((typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object') {
                  foreignServer = arg.foreignServer;
                  iframeContainer = arg.iframeContainer;
              }

              this._authorizeResourceServers().then(function (servers) {
                  // .. формируем параметры state и scope
                  var scope = '';
                  var state = '';
                  for (var i = 0; i < servers.length; i++) {
                      var response = servers[i];
                      scope += response.Service.ServerId + ',';
                      state += response.Result.State + ',';
                  }
                  scope = scope.slice(0, -1);
                  state = state.slice(0, -1);

                  var authUrl = _this4._authorizationEndpoint + '/?client_id=1&redirect_uri=' + _this4._redirectEndpointAshx2 + '&scope=' + scope + '&state=' + state;

                  if (foreignServer) {
                      authUrl += '&authserver=' + foreignServer;
                  }

                  if (!iframeContainer) {
                      window.open(authUrl, '_self');
                  } else {
                      var authorizationGrant = function authorizationGrant() {
                          window.location.reload();
                          var event = document.createEvent('Event');
                          event.initEvent('login', false, false);
                          this.dispatchEvent(event);
                      };

                      window.authorizationGrant = authorizationGrant;
                      document.body.removeChild(document.body.querySelector('.authorizationIframe'));
                      document.body.insertAdjacentHTML('afterbegin', '<iframe\n                    class="authorizationIframe"\n                    src="' + self._authorizationEndpoint + '/?client_id=1\n                        &redirect_uri=' + self._redirectEndpointHtml + '\n                        &redirect_uri_alt=' + self._redirectEndpointAshx2 + '\n                        &scope=' + scope + '\n                        &state=' + state + '">\n                </iframe>');
                  }
              });
          }
          /** Залогиниться, используя логин и пароль
           * @param  {String} login
           * @param  {String} password
           * @return {Promise}
           */

      }, {
          key: 'loginWithCredentials',
          value: function loginWithCredentials(login, password) {
              var _this5 = this,
                  _arguments2 = arguments;

              // отправляем ajax-запрос на Handler/Login с логином и паролем
              // После этого пользователь считается залогиненным на my.
              // Затем вызываем getUserInfo()

              return new Promise(function (resolve, reject) {
                  sendCrossDomainJSONRequest(_this5._credentialLoginEndpoint + '?login=' + encodeURIComponent(login) + '&password=' + encodeURIComponent(password), function (response) {
                      if (response.Status.toLowerCase() === 'ok') {
                          _this5.getUserInfo().then(function () {
                              resolve({
                                  Status: 'ok',
                                  Result: _arguments2[0].Result
                              });
                          }).catch(function () {
                              reject({
                                  Status: 'error',
                                  Result: {
                                      Message: 'authorization error'
                                  }
                              });
                          });
                      } else if (response.Status.toLowerCase() === 'auth') {
                          reject({
                              Status: 'auth',
                              Result: {
                                  Message: response.Result.Message
                              }
                          });
                      } else {
                          reject({
                              Status: 'error',
                              Result: {
                                  Message: 'unknown error'
                              }
                          });
                      }
                  }, 'CallbackName', function () {
                      reject({
                          Status: 'network',
                          Result: {
                              Message: 'network error'
                          }
                      });
                  });
              });
          }
          /** Принудительное разлогинивание пользователя.
           * В том числе и на серверах ресурсов
           * @return {Function} promise(status)
           */

      }, {
          key: 'logout',
          value: function logout() {
              var _this6 = this;

              return new Promise(function (resolve, reject) {
                  var promises = [];
                  for (var i = 0; i < _this6._resourceServers.length; i++) {
                      var resourceServer = _this6._resourceServers[i];
                      var promise = resourceServer.sendGetRequest('oAuth2/Logout.ashx');
                      promises.push(promise);
                  }
                  _this6._chain(promises, {}).then(function () {
                      if (_this6._clientId === 1) {
                          sendCrossDomainJSONRequest('//my.kosmosnimki.ru/Handler/Logout', function (response) {
                              return resolve({ Status: 'ok' });
                          }, '', function () {
                              return reject({ Status: 'network' });
                          });
                      } else {
                          resolve({
                              Status: 'ok'
                          });
                          var event = document.createEvent('Event');
                          event.initEvent('logout', false, false);
                          _this6.dispatchEvent(event);
                      }
                  }).catch(function () {
                      reject({
                          Status: 'error'
                      });
                  });
              });
          }
      }]);
      return AuthManager;
  }(EventTarget);

  var copy = function copy(source) {
      switch (typeof source === 'undefined' ? 'undefined' : _typeof(source)) {
          case 'number':
          case 'string':
          case 'function':
          default:
              return source;
          case 'object':
              if (source === null) {
                  return null;
              } else if (Array.isArray(source)) {
                  return source.map(function (item) {
                      return copy(item);
                  });
              } else if (source instanceof Date) {
                  return source;
              } else {
                  return Object.keys(source).reduce(function (a, k) {
                      a[k] = copy(source[k]);
                      return a;
                  }, {});
              }
      }
  };

  var extend = function extend(target, source) {
      if (target === source) {
          return target;
      } else {
          return Object.keys(source).reduce(function (a, k) {
              var value = source[k];
              if (_typeof(a[k]) === 'object' && k in a) {
                  a[k] = extend(a[k], value);
              } else {
                  a[k] = copy(value);
              }
              return a;
          }, copy(target));
      }
  };

  // <String>options.title
  // <String>options.className
  // <String>options.trigger (hover|click|manual)
  // <String>options.direction (down|up)
  // <Boolean>options.adjustWidth
  // <Boolean>options.showTopItem

  var DropdownWidget = function (_EventTarget) {
      inherits(DropdownWidget, _EventTarget);

      function DropdownWidget(options) {
          classCallCheck(this, DropdownWidget);

          var _this = possibleConstructorReturn(this, (DropdownWidget.__proto__ || Object.getPrototypeOf(DropdownWidget)).call(this));

          _this.options = extend({
              title: '',
              trigger: 'hover',
              direction: 'down',
              adjustWidth: true,
              showTopItem: true,
              titleClassName: ''
          }, options);

          _this.$el = _this.options.el;
          _this.$el.classList.add('dropdownWidget');
          _this.$el.classList.add('dropdownWidget-item');

          _this.$titleContainer = document.createElement('div');
          _this.$titleContainer.classList.add('dropdownWidget-dropdownTitle');
          if (_this.options.titleClassName) {
              _this.$titleContainer.classList.add(_this.options.titleClassName);
          }
          _this.$titleContainer.innerHTML = _this.options.title;
          _this.$el.appendChild(_this.$titleContainer);

          _this.$dropdownContainer = document.createElement('div');
          _this.$dropdownContainer.classList.add('dropdownWidget-dropdown');
          _this.$dropdownContainer.style.display = 'none';
          _this.$el.appendChild(_this.$dropdownContainer);

          _this.$dropdownTitle = document.createElement('div');
          _this.$dropdownTitle.classList.add('dropdownWidget-item');
          _this.$dropdownTitle.classList.add('dropdownWidget-dropdownTitle');
          if (options.titleClassName) {
              _this.$dropdownTitle.classList.add(options.titleClassName);
          }
          _this.$dropdownTitle.innerHTML = _this.options.title;
          _this.$dropdownContainer.appendChild(_this.$dropdownTitle);

          if (!_this.options.showTopItem) {
              _this.$dropdownTitle.style.display = 'none';
          }

          if (_this.options.trigger === 'hover') {
              _this.$dropdownTitle.classList.add('ui-state-disabled');
              _this.$titleContainer.addEventListener('mouseover', function () {
                  return _this.expand();
              });
              _this.$dropdownContainer.addEventListener('mouseleave', function () {
                  return _this.collapse();
              });
          } else if (_this.options.trigger === 'click') {
              _this.$titleContainer.addEventListener('click', function () {
                  return _this.expand();
              });
              _this.$dropdownTitle.addEventListener('click', function () {
                  return _this.collapse();
              });
          }

          if (_this.options.direction === 'up') {
              _this.$el.classList.add('dropdownWidget_direction-up');
          } else {
              _this.$el.classList.add('dropdownWidget_direction-down');
          }

          _this._items = {};
          return _this;
      }

      createClass(DropdownWidget, [{
          key: 'addItem',
          value: function addItem(id, inst, position) {
              var _this2 = this;

              this._items[id] = inst;

              var $container = document.createElement('div');

              $container.classList.add('dropdownWidget-item');
              $container.classList.add('dropdownWidget-dropdownItem');
              $container.setAttribute('data-id', id);
              $container.setAttribute('data-position', position);
              $container.addEventListener('click', function (je) {
                  var event = document.createEvent('Event');
                  event.initEvent('item:click', false, false);
                  event.detail = { dataId: je.currentTarget.getAttribute('data-id') };
                  _this2.dispatchEvent(event);

                  if (_this2.options.trigger === 'click') {
                      _this2.collapse();
                  }
              });
              $container.appendChild(inst.el);
              this.$dropdownContainer.appendChild($container);
              this._sortItems();
          }
      }, {
          key: 'setTitle',
          value: function setTitle(title) {
              this.$titleContainer.innerHTML = title;
              this.$dropdownTitle.innerHTML = title;
          }
      }, {
          key: 'toggle',
          value: function toggle() {
              this._expanded ? this.collapse() : this.expand();
              this._expanded = !this._expanded;
          }
      }, {
          key: 'expand',
          value: function expand() {
              var r = this.$el.getBoundingClientRect();
              this.$dropdownContainer.style.minWidth = r.width + 'px';
              this.$dropdownContainer.style.display = 'block';
              var event = document.createEvent('Event');
              event.initEvent('expand', false, false);
              event.detail = {};
              this.dispatchEvent(event);
          }
      }, {
          key: 'collapse',
          value: function collapse() {
              this.$dropdownContainer.style.display = 'none';
              var event = document.createEvent('Event');
              event.initEvent('collapse', false, false);
              event.detail = {};
              this.dispatchEvent(event);
          }
      }, {
          key: 'reset',
          value: function reset() {
              this.collapse();
          }
      }, {
          key: '_sortItems',
          value: function _sortItems() {
              var containerEl = this.$dropdownContainer[0];
              var items = Array.prototype.slice.call(containerEl.children);

              var titleEl = items.splice(items.indexOf(containerEl.querySelector('.dropdownWidget-dropdownTitle')), 1);

              while (items.length) {
                  var positions = items.map(function (el) {
                      return parseInt(el.getAttribute('data-position'), 10);
                  });
                  var maxPositionIndex = positions.indexOf(Math.max.apply(null, positions));
                  containerEl.insertBefore(items.splice(maxPositionIndex, 1)[0], containerEl.children[0]);
              }

              if (this.options.direction === 'up') {
                  containerEl.appendChild(titleEl);
              } else {
                  containerEl.insertBefore(titleEl, containerEl.children[0]);
              }
          }
      }]);
      return DropdownWidget;
  }(EventTarget);

  var DropdownMenuWidget = function () {
      function DropdownMenuWidget(options) {
          classCallCheck(this, DropdownMenuWidget);


          this._view = document.createElement('div');
          this._view.classList.add('dropdownMenuWidget');
          this._view.innerHTML = options.items.map(this._renderItem.bind(this)).join('');
          var dropDown = this._view.querySelector('.dropdownMenuWidget-itemDropdown');
          if (dropDown) {
              dropDown.style.display = 'none';
          }
          var mouseTimeout = options.mouseTimeout || 100;
          var items = this._view.querySelectorAll('.dropdownMenuWidget-item');

          var _loop = function _loop(i) {
              var mouseIsOver = false;
              items[i].addEventListener('mouseenter', function (je) {
                  mouseIsOver = true;
                  setTimeout(function () {
                      if (mouseIsOver) {
                          var dd = je.target.querySelector('.dropdownMenuWidget-itemDropdown');
                          if (dd) {
                              dd.style.display = 'block';
                          }
                      }
                  }, 100);
              });
              items[i].addEventListener('mouseleave', function (je) {
                  mouseIsOver = false;
                  var dd = je.target.querySelector('.dropdownMenuWidget-itemDropdown');
                  if (dd) {
                      dd.style.display = 'none';
                  }
              });
          };

          for (var i = 0; i < items.length; ++i) {
              _loop(i);
          }
      }

      createClass(DropdownMenuWidget, [{
          key: '_renderDropdown',
          value: function _renderDropdown(_ref) {
              var className = _ref.className,
                  id = _ref.id,
                  link = _ref.link,
                  newWindow = _ref.newWindow,
                  icon = _ref.icon,
                  title = _ref.title;

              return '<li class="dropdownMenuWidget-dropdownMenuItem' + (className ? ' ' + className : '') + '">\n            ' + (newWindow ? '<div class="ui-icon ui-icon-newwin dropdownMenuWidget-dropdownMenuIcon"></div>' : '') + '\n            <a\n                ' + (id ? 'id="' + id + '"' : '') + '\n                ' + (link ? 'href="' + link + '"' : 'href="javascript:void(0)"') + '\n                ' + (newWindow && link ? 'target="_blank"' : '') + '\n                class="dropdownMenuWidget-dropdownItemAnchor' + (newWindow ? ' dropdownMenuWidget-dropdownItemAnchor_newWindow' : '') + '"\n            >\n                ' + (icon ? '<img src="' + icon + '"/>' : '') + '\n                ' + (title ? '<span>' + title + '</span>' : '') + '\n            </a>\n        </li>';
          }
      }, {
          key: '_renderItem',
          value: function _renderItem(_ref2) {
              var className = _ref2.className,
                  id = _ref2.id,
                  link = _ref2.link,
                  newWindow = _ref2.newWindow,
                  icon = _ref2.icon,
                  fonticon = _ref2.fonticon,
                  title = _ref2.title,
                  dropdown = _ref2.dropdown;

              return '<div class="dropdownMenuWidget-item' + (className ? ' ' + className : '') + '">\n        <a\n            ' + (id ? 'id="' + id + '"' : '') + '\n            ' + (link ? 'href="' + link + '"' : 'href="javascript:void(0)"') + '\n            ' + (newWindow && link ? 'target="_blank"' : '') + '\n            class="dropdownMenuWidget-itemAnchor' + (newWindow ? ' dropdownMenuWidget-itemAnchor_newWindow' : '') + '"\n        >\n            ' + (icon ? '<img src="' + icon + '" />' : '') + '\n            ' + (fonticon ? '<i class="' + fonticon + '"></i>' : '') + '\n            ' + (title ? '<span>' + title + '</span>' + (dropdown ? '<i class="icon-angle-down"></i>' : '') : '') + '\n        </a>\n        ' + (dropdown ? '<div class="dropdownMenuWidget-itemDropdown">\
                <ul class="dropdownMenuWidget-dropdownMenu">' + dropdown.map(this._renderDropdown.bind(this)).join('') + '</ul>\
            </div>' : '') + '\n        </div>';
          }
      }, {
          key: 'appendTo',
          value: function appendTo(placeholder) {
              placeholder.appendChild(this._view);
          }
      }]);
      return DropdownMenuWidget;
  }();

  var DEFAULT_LANGUAGE = 'rus';

  var Translations = function () {
      function Translations() {
          classCallCheck(this, Translations);

          this._hash = {};
      }

      createClass(Translations, [{
          key: 'setLanguage',
          value: function setLanguage(lang) {
              this._language = lang;
          }
      }, {
          key: 'getLanguage',
          value: function getLanguage() {
              return window.language || this._language || DEFAULT_LANGUAGE;
          }
      }, {
          key: 'addText',
          value: function addText(lang, tran) {
              this._hash[lang] = extend(this._hash[lang] || {}, tran);
              return this;
          }
      }, {
          key: 'getText',
          value: function getText(key) {
              if (key && typeof key === 'string') {
                  var locale = this._hash[this.getLanguage()];
                  if (locale) {
                      return key.split('.').reduce(function (a, k) {
                          return a[k];
                      }, locale);
                  }
              }
              return null;
          }
      }]);
      return Translations;
  }();

  window.Scanex = window.Scanex || {};
  window.Scanex.Translations = window.Scanex.Translations || {};
  window.Scanex.translations = window.Scanex.translations || new Translations();

  var Translations$1 = window.Scanex.translations;

  var T = Translations$1;

  T.addText('rus', {
      auth: {
          'login': 'Войти',
          'logout': 'Выйти',
          'myAccount': 'Личный кабинет',
          'myMap': 'Личная карта',
          'closeDialog': 'Закрыть'
      }
  });

  T.addText('eng', {
      auth: {
          'login': 'Login',
          'logout': 'Logout',
          'myAccount': 'My account',
          'myMap': 'My map',
          'closeDialog': 'Close'
      }
  });

  var AuthWidget = function (_EventTarget) {
      inherits(AuthWidget, _EventTarget);

      function AuthWidget(options) {
          classCallCheck(this, AuthWidget);

          var _this = possibleConstructorReturn(this, (AuthWidget.__proto__ || Object.getPrototypeOf(AuthWidget)).call(this));

          _this._view = document.createElement('div');
          _this._view.classList.add('authWidget');

          _this._authManager = options.authManager;
          _this._userInfo = null;

          _this._options = options;
          _this._options.showAccountLink = true;
          _this._options.accountLink = '//my.kosmosnimki.ru/Home/Settings/';
          _this._options.showMapLink = true;

          _this._authManager.getUserInfo().then(function (response) {
              _this._render({
                  login: response.Result && response.Result.Login,
                  userName: response.Result && (response.Result.FullName || response.Result.Nickname || response.Result.Login),
                  nickName: response.Result.Nickname
              });
              _this._userInfo = response.Result;
              var event = document.createEvent('Event');
              event.initEvent('ready', false, false);
              _this.dispatchEvent(event);
          }).catch(function (response) {
              _this._render(response);
          });
          _this._authManager.addEventListener('login', function () {
              var event = document.createEvent('Event');
              event.initEvent('login', false, false);
              _this.dispatchEvent(event);
          });
          return _this;
      }

      createClass(AuthWidget, [{
          key: '_render',
          value: function _render(vm) {
              var _this2 = this;

              this._view.innerHTML = vm.nickName ? '<div class="authWidget_authorized">\n                <div class="authWidget-userPanel">\n                    <div class="authWidget-userPanel-iconCell">\n                        <div class="authWidget-userPanel-userIcon account account-user-logout"></div>\n                    </div>\n                    <div class="authWidget-userPanel-userMenuCell"></div>\n                </div>\n            </div>' : '<div class="authWidget_unauthorized">\n                <!-- div class="authWidget-loginButton">' + T.getText('auth.login') + '</div -->\n                <div class="authWidget-loginButton account account-user-login"></div>\n            </div>';

              if (vm.nickName) {
                  var dropdownItems = [];

                  if (this._options.showAccountLink) {
                      dropdownItems.push({
                          title: T.getText('auth.myAccount'),
                          link: this._options.accountLink,
                          id: 'AuthWidgetAccountLink',
                          newWindow: true,
                          iconClass: 'account account-personal-area'
                      });
                  }

                  if (this._options.showMapLink) {
                      var defaultMapLink = '//maps.kosmosnimki.ru/api/index.html?' + encodeURIComponent('@' + vm.login);
                      dropdownItems.push({
                          title: T.getText('auth.myMap'),
                          link: this._options.mapLink || defaultMapLink,
                          id: 'AuthWidgetMapLink',
                          newWindow: true,
                          iconClass: 'account account-personal-map'
                      });
                  }

                  dropdownItems.push({
                      title: T.getText('auth.logout'),
                      className: 'authWidget-logoutButton',
                      iconClass: 'account account-exit'
                  });

                  var dropdownMenuWidget = new DropdownMenuWidget({
                      items: [{
                          title: vm.nickName,
                          dropdown: dropdownItems
                      }]
                  });

                  dropdownMenuWidget.appendTo(this._view.querySelector('.authWidget-userPanel-userMenuCell'));
              }

              var loginBtn = this._view.querySelector('.authWidget-loginButton');
              if (loginBtn) {
                  loginBtn.addEventListener('click', function (e) {
                      var $iframeContainer;
                      // if (this._options.loginDialog) {

                      //     $iframeContainer = document.createElement('div');
                      //     $iframeContainer.classList.add('authWidget-iframeContainer');
                      //     var dialog = $iframeContainer.dialog({
                      //         width: 500,
                      //         height: 450,
                      //         closeText: T.getText('auth.closeDialog'),
                      //         close: (je, ui) => {
                      //             $(this).dialog('destroy');
                      //         }
                      //     });
                      //     // HACK:
                      //     let btn = $iframeContainer.querySelector('button.ui-button');
                      //     if (btn) {
                      //         btn.classList.add('ui-icon');
                      //         btn.style.outline = 'none';
                      //     }                                
                      // }

                      _this2._authManager.login({
                          iframeContainer: $iframeContainer && $iframeContainer[0]
                      });
                  });
              }

              var logoutBtn = this._view.querySelector('.authWidget-logoutButton');
              if (logoutBtn) {
                  logoutBtn.addEventListener('click', function (e) {
                      _this2._authManager.logout().then(function (response) {
                          _this2._render(response);
                          _this2._userInfo = response.Result;
                          var event = document.createEvent('Event');
                          event.initEvent('logout', false, false);
                          _this2.dispatchEvent(event);
                      });
                  });
              }
          }

          /** Получить информацию о пользователе, которую вернул AuthManager
           * @return {Object}
           */

      }, {
          key: 'getUserInfo',
          value: function getUserInfo() {
              return this._userInfo;
          }
      }, {
          key: 'appendTo',
          value: function appendTo(placeholder) {
              placeholder.appendChild(this._view);
          }
      }]);
      return AuthWidget;
  }(EventTarget);

  //TODO: использовать ли библиотеку?
  function parseUri(str) {
      var parser = /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*):?([^:@]*))?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,
          key = ["source", "protocol", "authority", "userInfo", "user", "password", "host", "port", "relative", "path", "directory", "file", "query", "anchor"],
          m = parser.exec(str),
          uri = {},
          i = 14;

      while (i--) {
          uri[key[i]] = m[i] || "";
      } // HACK
      uri.hostOnly = uri.host;
      uri.host = uri.authority;

      return uri;
  }

  var requests = {};
  var lastRequestId = 0;
  var uniquePrefix = "id" + Math.random();

  function processMessage(e) {
      if (e.origin in requests) {
          var dataStr = decodeURIComponent(e.data.replace(/\n/g, '\n\\'));
          try {
              var dataObj = JSON.parse(dataStr);
              var request = requests[e.origin][dataObj.CallbackName];
              if (request) {
                  delete requests[e.origin][dataObj.CallbackName];
                  request.iframe.parentNode.removeChild(request.iframe);
                  request.callback && request.callback(dataObj);
              }
          } catch (e) {}
      }
  }

  //совместимость с IE8
  if (window.addEventListener) {
      window.addEventListener('message', processMessage);
  } else {
      window.attachEvent('onmessage', processMessage);
  }

  function addQueryVariables(url, variables) {
      var oldQueryString = url.split('?')[1];
      var newQueryString = '';
      for (var variable in variables) {
          if (variables.hasOwnProperty(variable)) {
              newQueryString += '&' + variable + '=' + encodeURIComponent(variables[variable]);
          }
      }
      if (oldQueryString) {
          return url + newQueryString;
      } else {
          return url + '?' + newQueryString.slice(1);
      }
  }

  function createPostIframe(id) {
      var iframe = document.createElement("iframe");
      iframe.style.display = 'none';
      iframe.setAttribute('id', id);
      iframe.setAttribute('name', id);
      iframe.src = 'javascript:true';

      return iframe;
  }

  var Server = function () {
      function Server(_ref) {
          var root = _ref.root;
          classCallCheck(this, Server);

          this._root = root;
      }

      /** Послать GET запрос к серверу ресурсов.
       * @param  {String} url
       * @param  {Object} params
       * @return {Function} promise(data)
       */


      createClass(Server, [{
          key: "sendGetRequest",
          value: function sendGetRequest(url, params) {
              var _this = this;

              return new Promise(function (resolve, reject) {
                  var requestUrl = _this._root + "/" + url;
                  requestUrl = addQueryVariables(requestUrl, params);
                  sendCrossDomainJSONRequest(requestUrl, function (data) {
                      return resolve(data);
                  }, 'CallbackName', function (errors) {
                      return reject({ Status: 'error' });
                  });
              });
          }

          /** Послать к серверу ресурсов запрос за картинкой.
           * @param  {String} url
           * @param  {Object} params
           * @return {Function} promise(image)
           */

      }, {
          key: "sendImageRequest",
          value: function sendImageRequest(url, params) {
              var requestUrl = this._root + "/" + url;
              requestUrl = addQueryVariables(requestUrl, params);

              var img = new Image();

              img.onload = function () {
                  return resolve({ Status: 'ok', Result: img });
              };
              img.onerror = function (errors) {
                  return reject(errors);
              };
              img.src = requestUrl;
          }

          /** Послать POST запрос к серверу ресурсов.
           * @param  {String} url
           * @param  {Object} params
           * @param  {HTMLFormElement} baseForm HTML Form, которая может быть использована как основа для посылки запроса (например, если нужно загрузить файл)
           * @return {Function} promise(data)
           */

      }, {
          key: "sendPostRequest",
          value: function sendPostRequest(url, params, baseForm) {
              var requestURL = this._root + "/" + url;
              return new Promise(function (resolve, reject) {
                  var processResponse = function processResponse(response) {
                      if (response.Status !== 'ok') {
                          reject(response);
                      } else {
                          resolve(response);
                      }
                  };

                  try {

                      var id = "" + uniquePrefix + lastRequestId++;
                      var iframe = createPostIframe(id);
                      var parsedURL = parseUri(requestURL);
                      var origin = (parsedURL.protocol ? parsedURL.protocol + ":" : window.location.protocol) + ("//" + (parsedURL.host || window.location.host));
                      var originalFormAction = void 0;
                      var form = void 0;

                      requests[origin] = requests[origin] || {};
                      requests[origin][id] = { callback: processResponse, iframe: iframe };

                      if (baseForm) {
                          form = baseForm;
                          originalFormAction = form.getAttribute('action');
                          form.setAttribute('action', requestURL);
                          form.target = id;
                      } else {
                          form = document.createElement('form');
                          form.style.display = 'none';
                          form.setAttribute('enctype', 'multipart/form-data');
                          form.target = id;
                          form.setAttribute('method', 'POST');
                          form.setAttribute('action', requestURL);
                          form.id = id;
                      }

                      var hiddenParamsDiv = document.createElement("div");
                      hiddenParamsDiv.style.display = 'none';

                      var appendFormParam = function appendFormParam(paramName, paramValue) {
                          var input = document.createElement("input");
                          paramValue = typeof paramValue !== 'undefined' ? paramValue : '';

                          input.setAttribute('type', 'hidden');
                          input.setAttribute('name', paramName);
                          input.setAttribute('value', paramValue);

                          hiddenParamsDiv.appendChild(input);
                      };

                      for (var paramName in params) {
                          appendFormParam(paramName, params[paramName]);
                      }

                      appendFormParam('WrapStyle', 'message');
                      appendFormParam('CallbackName', id);

                      form.appendChild(hiddenParamsDiv);

                      if (!baseForm) document.body.appendChild(form);

                      document.body.appendChild(iframe);

                      form.submit();

                      if (baseForm) {
                          form.removeChild(hiddenParamsDiv);
                          if (originalFormAction !== null) form.setAttribute('action', originalFormAction);else form.removeAttribute('action');
                      } else {
                          form.parentNode.removeChild(form);
                      }
                  } catch (e) {
                      reject(e);
                  }
              });
          }
      }]);
      return Server;
  }();

  var ResourceServer = function (_Server) {
      inherits(ResourceServer, _Server);

      function ResourceServer(authManager, _ref) {
          var id = _ref.id,
              root = _ref.root;
          classCallCheck(this, ResourceServer);

          var _this = possibleConstructorReturn(this, (ResourceServer.__proto__ || Object.getPrototypeOf(ResourceServer)).call(this, { root: root }));

          _this._id = id;
          _this._authManager = authManager;
          _this._authManager.$addResourceServer(_this);
          return _this;
      }

      createClass(ResourceServer, [{
          key: 'sendGetRequest',
          value: function sendGetRequest(url, params, baseForm) {
              var _this2 = this;

              params = params || {};
              params.sync = this._authManager.$getAntiCsrfToken();
              return new Promise(function (resolve, reject) {
                  get(ResourceServer.prototype.__proto__ || Object.getPrototypeOf(ResourceServer.prototype), 'sendGetRequest', _this2).call(_this2, url, params, baseForm).then(function (data) {
                      data.Service = { ServerId: _this2._id };
                      if (data.Status === 'ok') {
                          resolve(data);
                      } else {
                          reject(data);
                      }
                  }).catch(function (errors) {
                      return reject({ Status: 'error', ErrorInfo: errors.ErrorInfo });
                  });
              });
          }
      }, {
          key: 'sendImageRequest',
          value: function sendImageRequest(url, params, baseForm) {
              var _this3 = this;

              params = params || {};
              params.sync = this._authManager.$getAntiCsrfToken();
              return new Promise(function (resolve, reject) {
                  get(ResourceServer.prototype.__proto__ || Object.getPrototypeOf(ResourceServer.prototype), 'sendImageRequest', _this3).call(_this3, url, params, baseForm).then(function (data) {
                      data.Service = { ServerId: _this3._id };
                      if (data.Status === 'ok') {
                          resolve(data);
                      } else {
                          reject(data);
                      }
                  }).catch(function (errors) {
                      return reject({ Status: 'error', ErrorInfo: errors.ErrorInfo });
                  });
              });
          }
      }, {
          key: 'sendPostRequest',
          value: function sendPostRequest(url, params, baseForm) {
              var _this4 = this;

              params = params || {};
              params.sync = this._authManager.$getAntiCsrfToken();
              return new Promise(function (resolve, reject) {
                  get(ResourceServer.prototype.__proto__ || Object.getPrototypeOf(ResourceServer.prototype), 'sendPostRequest', _this4).call(_this4, url, params, baseForm).then(function (data) {
                      data.Service = { ServerId: _this4._id };
                      if (data.Status === 'ok') {
                          resolve(data);
                      } else {
                          reject(data);
                      }
                  }).catch(function (errors) {
                      return reject({ Status: 'error', ErrorInfo: errors.ErrorInfo });
                  });
              });
          }
      }]);
      return ResourceServer;
  }(Server);

  var resourceServersInstances = {};
  var resourceServersConstructors = {};
  var authManager = void 0;

  // зашиваем известные и часто-используемые ресурсы
  resourceServersConstructors['subscriptions'] = function () {
      return new ResourceServer(authManager, {
          id: 'subscriptions',
          root: '//fires.kosmosnimki.ru/SAPIv2'
      });
  };

  resourceServersConstructors['geomixer2'] = function () {
      return new ResourceServer(authManager, {
          id: 'geomixer2',
          root: '//maps2.kosmosnimki.ru'
      });
  };

  resourceServersConstructors['geomixer'] = function () {
      return new ResourceServer(authManager, {
          id: 'geomixer',
          root: '//maps.kosmosnimki.ru'
      });
  };

  resourceServersConstructors['geocode'] = function () {
      return new ResourceServer(authManager, {
          id: 'geocode',
          root: '//geocode.kosmosnimki.ru'
      });
  };

  function getResourceServer(id) {
      if (!authManager) {
          authManager = getAuthManager();
      }
      // используем lazy instantiation для отложенного создания
      // необходимых нам компонентов
      if (!resourceServersInstances[id]) {
          resourceServersInstances[id] = resourceServersConstructors[id]();
      }
      return resourceServersInstances[id];
  }

  function getAuthManager() {
      // то же и с authManager
      if (!authManager) {
          authManager = new AuthManager({
              authorizationEndpoint: '//my.kosmosnimki.ru/Test/LoginDialog',
              userInfoEndpoint: '//my.kosmosnimki.ru/oAuth/LoginDialog',
              redirectEndpointHtml: location.href.replace(/[^\/]+$/, '') + 'oAuth2/oAuthCallback.htm',
              redirectEndpointAshx: location.href.replace(/[^\/]+$/, '') + 'oAuth2/oAuthCallback.ashx',
              credentialLoginEndpoint: '//my.kosmosnimki.ru/Handler/Login'
          });
      }
      return authManager;
  }

  var chain = function chain(tasks, state) {
      return tasks.reduce(function (prev, next) {
          return prev.then(next);
      }, new Promise(function (resolve, reject) {
          return resolve(state);
      }));
  };

  function hex(number) {
      var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;

      var h = number.toString(16);
      while (h.length < width) {
          h = '0' + h;
      }
      return h.toUpperCase();
  }

  function from_gmx(_ref) {
      var fields = _ref.fields,
          values = _ref.values,
          types = _ref.types;
      var convertMercator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      return values.map(function (x) {
          var item = fields.reduce(function (a, k, i) {
              switch (types[i]) {
                  default:
                      a[k] = x[i];
                      break;
                  case 'date':
                      switch (_typeof(x[i])) {
                          case 'string':
                              a[k] = new Date(x[i]);
                              break;
                          case 'number':
                              a[k] = new Date(x[i] * 1000);
                              break;
                          default:
                              break;
                      }
                      break;
                  case 'time':
                      break;
                  case 'geometry':
                      a[k] = L.gmxUtil.geometryToGeoJSON(x[i], convertMercator);
                      break;
              }
              switch (k) {
                  case 'stereo':
                      var s = x[i];
                      a.stereo = typeof s === 'string' && s !== 'NONE';
                      break;
                  default:
                      break;
              }
              return a;
          }, {});
          if (item.geomixergeojson) {
              item.geoJSON = item.geomixergeojson;
              delete item.geomixergeojson;
          }
          item.url = '//search.kosmosnimki.ru/QuickLookImage.ashx?id=' + item.sceneid;
          return item;
      });
  }

  var EAST_HEMISPHERE = L.bounds(L.point(0, -90), L.point(180, 90));

  var WEST_HEMISPHERE = L.bounds(L.point(180, -90), L.point(360, 90));

  var WEST_HEMISPHERE2 = L.bounds(L.point(-180, -90), L.point(0, 90));

  window.LAYER_ID = '9B4733A8CBE942CE9F5E70DCAA6C1FBE'; // 'AFB4D363768E4C5FAC71C9B0C6F7B2F4'

  var ss = ['WV03', 'WV02', 'GE01', 'PHR', 'QB02', 'KOMPSAT3A', 'KOMPSAT3', 'IK', 'GF2', 'KOMPSAT2', 'SP6_7', 'BKA', 'GF1_2m', 'ZY3', 'RE', 'LANDSAT_8', 'GF1_16m', 'WV01', 'EROSB', 'EROSA', 'GE01_L', 'IK_L', 'QB02_L', 'WV01_L', 'WV02_L', 'SP5_2MS', 'SP5_5MS', 'SP5_10MS', 'SP5_2PC', 'SP5_5PC'];

  var gmxResourceServer = getResourceServer('geomixer');

  function read_permalink$1(state) {
      return new Promise(function (resolve, reject) {
          gmxResourceServer.sendGetRequest('TinyReference/Get.ashx', { id: state.id }).then(function (response) {
              if (response.Status == 'ok') {
                  try {
                      resolve(JSON.parse(response.Result));
                  } catch (e) {
                      reject(e);
                  }
              } else {
                  reject(response.Result);
              }
          }).catch(function (e) {
              return reject(e);
          });
      });
  }

  function get_query(ids) {
      return ids.map(function (id) {
          return '(sceneid = \'' + id + '\')';
      }).join(' OR ');
  }

  function search(ids) {
      return new Promise(function (resolve, reject) {
          if (ids.length > 0) {
              gmxResourceServer.sendPostRequest('VectorLayer/Search.ashx', {
                  layer: LAYER_ID,
                  geometry: true,
                  pagesize: 0,
                  query: get_query(ids),
                  WrapStyle: 'message'
              }).then(function (response) {
                  if (response.Status == 'ok') {
                      try {
                          resolve(from_gmx(response.Result));
                      } catch (e) {
                          reject(e);
                      }
                  } else {
                      reject(response.Result);
                  }
              }).catch(function (e) {
                  return reject(e);
              });
          } else {
              resolve([]);
          }
      });
  }

  function get_items(state) {
      return new Promise(function (resolve) {
          search(state.selected.concat(state.quicklook)).then(function (items) {
              state.items = items;
              state.items.forEach(function (item) {
                  item.quicklook = false;
                  if (Array.isArray(state.quicklook)) {
                      for (var i = 0; i < state.quicklook.length; ++i) {
                          if (state.visible[i] === item.sceneid) {
                              item.quicklook = true;
                              break;
                          }
                      }
                  }

                  item.checked = false;
                  if (Array.isArray(state.cart)) {
                      for (var _i = 0; _i < state.cart.length; ++_i) {
                          if (state.cart[_i] === item.sceneid) {
                              item.checked = true;
                              break;
                          }
                      }
                  }
              });
              resolve(state);
          }).catch(function (e) {
              console.log(e);
              resolve(state);
          });
      });
  }

  function get_cart(state) {
      return new Promise(function (resolve) {
          search(state.cart).then(function (items) {
              state.cart = items;
              resolve(state);
          }).catch(function (e) {
              console.log(e);
              resolve(state);
          });
      });
  }

  var matches = /\?([^&]+)/g.exec(window.location.search);
  if (matches.length > 1) {
      var id = matches[1];
      chain([read_permalink$1, get_items, get_cart], { id: id }).then(function (state) {
          var lang = state.lang,
              position = state.position,
              bounds = state.bounds,
              cadastre = state.cadastre,
              activeLayer = state.activeLayer,
              drawingObjects = state.drawingObjects,
              _state$searchCriteria = state.searchCriteria,
              dateStart = _state$searchCriteria.dateStart,
              dateEnd = _state$searchCriteria.dateEnd,
              isYearly = _state$searchCriteria.isYearly,
              minCloudCover = _state$searchCriteria.minCloudCover,
              maxCloudCover = _state$searchCriteria.maxCloudCover,
              minAngle = _state$searchCriteria.minAngle,
              maxAngle = _state$searchCriteria.maxAngle,
              archive = _state$searchCriteria.archive,
              stereo = _state$searchCriteria.stereo,
              satellites = _state$searchCriteria.satellites,
              cart = state.cart,
              items = state.items;

          var rxDate = new RegExp('(\\d{2})\\.(\\d{2})\\.(\\d{4})');
          var d1 = rxDate.exec(dateStart);
          var d2 = rxDate.exec(dateEnd);
          var date = [d1[3] + '-' + d1[2] + '-' + d1[1], d2[3] + '-' + d2[2] + '-' + d2[1]];
          var st = satellites.reduce(function (a, i) {
              var s = ss[i];
              var k = s.lastIndexOf('_L');
              if (k > -1) {
                  var x = s.substr(0, k);
                  if (x === 'WV01') {
                      a.pc.push(x);
                  } else {
                      a.ms.push(x);
                  }
              } else if (s in ['WV01', 'EROSA', 'EROSB']) {
                  a.pc.push(s);
              } else {
                  a.ms.push(s);
              }
              return a;
          }, { ms: [], pc: [] });
          var objects = drawingObjects.map(function (item) {
              var _item$properties = item.properties,
                  name = _item$properties.name,
                  color = _item$properties.color,
                  checked = _item$properties.checked;

              return {
                  name: name,
                  geoJSON: item,
                  color: typeof color === 'string' && color !== '' ? '#' + hex(color, 6) : '#0033FF',
                  visible: checked
              };
          });
          var viewState = {
              lang: lang,
              activeLayer: activeLayer,
              drawingObjects: objects,
              position: position,
              bounds: bounds,
              searchCriteria: {
                  date: date,
                  annually: isYearly,
                  angle: [minAngle, maxAngle],
                  clouds: [minCloudCover, maxCloudCover],
                  stereo: stereo,
                  archive: archive,
                  satellites: st
              },
              items: items,
              cart: cart,
              cadastre: cadastre
          };
          localStorage.setItem('view_state', JSON.stringify(viewState));
          window.location = '' + window.location.origin + window.location.pathname.substr(0, window.location.pathname.lastIndexOf('/'));
      });
  }

}());

//# sourceMappingURL=permalink.df5da0997769d769d1cedd053e4ceabe32f4ac7f.min.js.map