(function (moment$1,leaflet) {
    'use strict';

    moment$1 = moment$1 && moment$1.hasOwnProperty('default') ? moment$1['default'] : moment$1;
    leaflet = leaflet && leaflet.hasOwnProperty('default') ? leaflet['default'] : leaflet;

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };

    var classCallCheck = function (instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    };

    var createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    var get = function get(object, property, receiver) {
      if (object === null) object = Function.prototype;
      var desc = Object.getOwnPropertyDescriptor(object, property);

      if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);

        if (parent === null) {
          return undefined;
        } else {
          return get(parent, property, receiver);
        }
      } else if ("value" in desc) {
        return desc.value;
      } else {
        var getter = desc.get;

        if (getter === undefined) {
          return undefined;
        }

        return getter.call(receiver);
      }
    };

    var inherits = function (subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    };

    var possibleConstructorReturn = function (self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    };

    var set = function set(object, property, value, receiver) {
      var desc = Object.getOwnPropertyDescriptor(object, property);

      if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);

        if (parent !== null) {
          set(parent, property, value, receiver);
        }
      } else if ("value" in desc && desc.writable) {
        desc.value = value;
      } else {
        var setter = desc.set;

        if (setter !== undefined) {
          setter.call(receiver, value);
        }
      }

      return value;
    };

    var slicedToArray = function () {
      function sliceIterator(arr, i) {
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;

        try {
          for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);

            if (i && _arr.length === i) break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"]) _i["return"]();
          } finally {
            if (_d) throw _e;
          }
        }

        return _arr;
      }

      return function (arr, i) {
        if (Array.isArray(arr)) {
          return arr;
        } else if (Symbol.iterator in Object(arr)) {
          return sliceIterator(arr, i);
        } else {
          throw new TypeError("Invalid attempt to destructure non-iterable instance");
        }
      };
    }();

    var copy = function copy(source) {
        switch (typeof source === 'undefined' ? 'undefined' : _typeof(source)) {
            case 'number':
            case 'string':
            case 'function':
            default:
                return source;
            case 'object':
                if (source === null) {
                    return null;
                } else if (Array.isArray(source)) {
                    return source.map(function (item) {
                        return copy(item);
                    });
                } else if (source instanceof Date) {
                    return source;
                } else {
                    return Object.keys(source).reduce(function (a, k) {
                        a[k] = copy(source[k]);
                        return a;
                    }, {});
                }
        }
    };

    var extend = function extend(target, source) {
        if (target === source) {
            return target;
        } else {
            return Object.keys(source).reduce(function (a, k) {
                var value = source[k];
                if (_typeof(a[k]) === 'object' && k in a) {
                    a[k] = extend(a[k], value);
                } else {
                    a[k] = copy(value);
                }
                return a;
            }, copy(target));
        }
    };

    var DEFAULT_LANGUAGE = 'rus';

    var Translations = function () {
        function Translations() {
            classCallCheck(this, Translations);

            this._hash = {};
        }

        createClass(Translations, [{
            key: 'setLanguage',
            value: function setLanguage(lang) {
                this._language = lang;
            }
        }, {
            key: 'getLanguage',
            value: function getLanguage() {
                return window.language || this._language || DEFAULT_LANGUAGE;
            }
        }, {
            key: 'addText',
            value: function addText(lang, tran) {
                this._hash[lang] = extend(this._hash[lang] || {}, tran);
                return this;
            }
        }, {
            key: 'getText',
            value: function getText(key) {
                if (key && typeof key === 'string') {
                    var locale = this._hash[this.getLanguage()];
                    if (locale) {
                        return key.split('.').reduce(function (a, k) {
                            return a[k];
                        }, locale);
                    }
                }
                return null;
            }
        }]);
        return Translations;
    }();

    window.Scanex = window.Scanex || {};
    window.Scanex.Translations = window.Scanex.Translations || {};
    window.Scanex.translations = window.Scanex.translations || new Translations();

    var Translations$1 = window.Scanex.translations;

    var EventTarget = function () {
        function EventTarget() {
            classCallCheck(this, EventTarget);

            this.listeners = {};
        }

        createClass(EventTarget, [{
            key: 'addEventListener',
            value: function addEventListener(type, callback) {
                if (!(type in this.listeners)) {
                    this.listeners[type] = [];
                }
                this.listeners[type].push(callback);
            }
        }, {
            key: 'on',
            value: function on(type, callback) {
                this.addEventListener(type, callback);
                return this;
            }
        }, {
            key: 'removeEventListener',
            value: function removeEventListener(type, callback) {
                if (!(type in this.listeners)) {
                    return;
                }
                var stack = this.listeners[type];
                for (var i = 0, l = stack.length; i < l; i++) {
                    if (stack[i] === callback) {
                        stack.splice(i, 1);
                        return this.removeEventListener(type, callback);
                    }
                }
            }
        }, {
            key: 'off',
            value: function off(type, callback) {
                this.removeEventListener(type, callback);
                return this;
            }
        }, {
            key: 'dispatchEvent',
            value: function dispatchEvent(event) {
                if (!(event.type in this.listeners)) {
                    return;
                }
                var stack = this.listeners[event.type];
                Object.defineProperty(event, 'target', {
                    enumerable: false,
                    configurable: false,
                    writable: false,
                    value: this
                });
                for (var i = 0, l = stack.length; i < l; i++) {
                    stack[i].call(this, event);
                }
            }
        }]);
        return EventTarget;
    }();

    var SliderWidget = function (_EventTarget) {
        inherits(SliderWidget, _EventTarget);

        function SliderWidget(container) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { min: 0, max: 100 };
            classCallCheck(this, SliderWidget);

            var _this = possibleConstructorReturn(this, (SliderWidget.__proto__ || Object.getPrototypeOf(SliderWidget)).call(this));

            _this._container = container;
            _this._current = null;
            _this.options = options;
            _this.stopPropagation = _this.stopPropagation.bind(_this);
            _this.preventDefault = _this.preventDefault.bind(_this);
            _this._slide = _this._slide.bind(_this);
            _this._stop = _this._stop.bind(_this);
            if (!_this._container.classList.contains('slider-widget')) {
                _this._container.classList.add('slider-widget');
                _this._container.classList.add('no-select');
                _this._container.innerHTML = '<div class="slider-widget-bar">\n                    <div class="slider-widget-range">\n                        <i class="slider-widget-tick-left"></i>\n                        <i class="slider-widget-tick-right"></i>\n                    </div>\n                </div>';
                _this._bar = _this._container.querySelector('.slider-widget-bar');
                _this._leftTick = _this._container.querySelector('.slider-widget-tick-left');
                _this._rightTick = _this._container.querySelector('.slider-widget-tick-right');
                _this._range = _this._container.querySelector('.slider-widget-range');
                _this._attachEvents();
            }
            return _this;
        }

        createClass(SliderWidget, [{
            key: '_reset',
            value: function _reset() {
                // const {width, height} = this._leftTick.getBoundingClientRect();
                // this._leftTick.style.left = `-${width}px`;
                // this._rightTick.style.left = `${width}px`;
            }
        }, {
            key: 'stopPropagation',
            value: function stopPropagation(e) {
                e.stopPropagation();
            }
        }, {
            key: 'preventDefault',
            value: function preventDefault(e) {
                e.preventDefault();
            }
        }, {
            key: '_attachEvents',
            value: function _attachEvents() {
                // this._container.addEventListener('dragstart', this.preventDefault);
                this._leftTick.addEventListener('mousedown', this.stopPropagation);
                this._leftTick.addEventListener('mousedown', this.preventDefault);
                this._leftTick.addEventListener('mousedown', this._start.bind(this, 'left'));
                this._rightTick.addEventListener('mousedown', this.stopPropagation);
                this._rightTick.addEventListener('mousedown', this.preventDefault);
                this._rightTick.addEventListener('mousedown', this._start.bind(this, 'right'));
                // document.body.addEventListener('mouseup', this.stopPropagation);
                // document.body.addEventListener('mouseup', this.preventDefault);
                document.body.addEventListener('mouseup', this._stop);
                document.body.addEventListener('mousemove', this._slide);
                this._handleBarClick = this._handleBarClick.bind(this);
                this._bar.addEventListener('click', this.stopPropagation);
                this._bar.addEventListener('click', this.preventDefault);
                this._bar.addEventListener('click', this._handleBarClick);
            }
        }, {
            key: '_handleBarClick',
            value: function _handleBarClick(e) {
                var x = e.clientX;
                var leftRect = this._leftTick.getBoundingClientRect();
                var rightRect = this._rightTick.getBoundingClientRect();
                if (x < leftRect.left || leftRect.right < x && x < rightRect.left || rightRect.right < x) {
                    var _bar$getBoundingClien = this._bar.getBoundingClientRect(),
                        left = _bar$getBoundingClien.left,
                        right = _bar$getBoundingClien.right;

                    var rangeRect = this._range.getBoundingClientRect();
                    var min = rangeRect.left + leftRect.width;
                    var max = rangeRect.right - rightRect.width;
                    if (Math.abs(x - min) < Math.abs(max - x)) {
                        // left tick
                        if (x > left + leftRect.width) {
                            this._range.style.left = x - left - leftRect.width + 'px';
                            this._range.style.width = rangeRect.right - x + leftRect.width + 'px';
                        } else {
                            // leftmost
                            this._range.style.left = 0 + 'px';
                            this._range.style.width = rangeRect.right - left + 'px';
                        }
                    } else {
                        // right tick
                        if (x < right - rightRect.width) {
                            this._range.style.width = x - rangeRect.left + rightRect.width + 'px';
                        } else {
                            // rightmost
                            this._range.style.width = right - rangeRect.left + 'px';
                        }
                    }
                    this._updateBounds();

                    // this.dispatchEvent(new CustomEvent('change', { detail: [this._lo, this._hi]}));

                    var event = document.createEvent('Event');
                    event.initEvent('change', false, false);
                    event.detail = [this._lo, this._hi];
                    this.dispatchEvent(event);
                }
            }
        }, {
            key: '_start',
            value: function _start(tick, e) {
                if (this._current === null) {
                    this._current = tick;
                    switch (this._current) {
                        case 'left':
                            var leftRect = this._leftTick.getBoundingClientRect();
                            this._offset = e.clientX - leftRect.left;
                            break;
                        case 'right':
                            var rightRect = this._rightTick.getBoundingClientRect();
                            this._offset = rightRect.right - e.clientX;
                            break;
                    }
                    var event = document.createEvent('Event');
                    event.initEvent('start', false, false);
                    event.detail = [this._lo, this._hi];
                    this.dispatchEvent(event);
                }
            }
        }, {
            key: '_stop',
            value: function _stop(e) {
                if (this._current !== null) {
                    this._current = null;
                    this._offset = 0;

                    var event = document.createEvent('Event');
                    event.initEvent('stop', false, false);
                    event.detail = [this._lo, this._hi];
                    this.dispatchEvent(event);
                }
            }
        }, {
            key: '_slide',
            value: function _slide(e) {
                if (this._current) {
                    switch (this._current) {
                        case 'left':
                            this._handleLeftSlide(e.clientX - this._offset);
                            break;
                        case 'right':
                            this._handleRightSlide(e.clientX + this._offset);
                            break;
                        default:
                            break;
                    }
                }
            }
        }, {
            key: '_handleLeftSlide',
            value: function _handleLeftSlide(x) {
                var leftRect = this._leftTick.getBoundingClientRect();
                var rightRect = this._rightTick.getBoundingClientRect();
                var max = this._range.getBoundingClientRect().right;

                var _bar$getBoundingClien2 = this._bar.getBoundingClientRect(),
                    left = _bar$getBoundingClien2.left;

                var totalWidth = leftRect.width + rightRect.width;
                if (x < max - totalWidth) {
                    if (x < left) {
                        // min
                        this._range.style.left = 0 + 'px';
                        this._range.style.width = max - left + 'px';
                    } else {
                        this._range.style.left = x - left + 'px';
                        this._range.style.width = max - x + 'px';
                    }
                } else {
                    // rightmost
                    this._range.style.left = max - totalWidth - left + 'px';
                    this._range.style.width = totalWidth + 'px';
                }
                this._updateBounds();

                // this.dispatchEvent(new CustomEvent('change', { detail: [this._lo, this._hi]}));

                var event = document.createEvent('Event');
                event.initEvent('change', false, false);
                event.detail = [this._lo, this._hi];
                this.dispatchEvent(event);
            }
        }, {
            key: '_handleRightSlide',
            value: function _handleRightSlide(x) {
                var leftRect = this._leftTick.getBoundingClientRect();
                var rightRect = this._rightTick.getBoundingClientRect();
                var min = this._range.getBoundingClientRect().left;

                var _bar$getBoundingClien3 = this._bar.getBoundingClientRect(),
                    left = _bar$getBoundingClien3.left,
                    right = _bar$getBoundingClien3.right;

                var totalWidth = leftRect.width + rightRect.width;
                if (x > min + totalWidth) {
                    if (x > right) {
                        // max
                        this._range.style.width = right - min + 'px';
                    } else {
                        this._range.style.width = x - min + 'px';
                    }
                } else {
                    // leftmost            
                    this._range.style.width = totalWidth + 'px';
                }
                this._updateBounds();

                // this.dispatchEvent(new CustomEvent('change', { detail: [this._lo, this._hi]}));

                var event = document.createEvent('Event');
                event.initEvent('change', false, false);
                event.detail = [this._lo, this._hi];
                this.dispatchEvent(event);
            }
        }, {
            key: '_updateBounds',
            value: function _updateBounds() {
                var _bar$getBoundingClien4 = this._bar.getBoundingClientRect(),
                    width = _bar$getBoundingClien4.width,
                    left = _bar$getBoundingClien4.left;

                var leftRect = this._leftTick.getBoundingClientRect();
                var rightRect = this._rightTick.getBoundingClientRect();

                var k = (this.options.max - this.options.min) / (width - leftRect.width - rightRect.width);
                var lo = leftRect.left - left;
                this._lo = this.options.min + (this.options.mode === 'float' ? lo * k : Math.round(lo * k));
                var hi = rightRect.left - rightRect.width - left;
                this._hi = this.options.min + (this.options.mode === 'float' ? hi * k : Math.round(hi * k));
            }
        }, {
            key: 'values',
            set: function set$$1(_ref) {
                var _ref2 = slicedToArray(_ref, 2),
                    lo = _ref2[0],
                    hi = _ref2[1];

                if (this.options.min <= lo && lo <= hi && hi <= this.options.max) {
                    var _bar$getBoundingClien5 = this._bar.getBoundingClientRect(),
                        width = _bar$getBoundingClien5.width,
                        left = _bar$getBoundingClien5.left;

                    var leftRect = this._leftTick.getBoundingClientRect();
                    var rightRect = this._rightTick.getBoundingClientRect();

                    this._lo = lo;
                    this._hi = hi;

                    var k = (width - leftRect.width - rightRect.width) / (this.options.max - this.options.min);
                    this._range.style.left = Math.round((this._lo - this.options.min) * k) + 'px';
                    this._range.style.width = Math.round((this._hi - this._lo) * k) + leftRect.width + rightRect.width + 'px';
                }
                // this.dispatchEvent(new CustomEvent('change', { detail: [lo, hi]}));
            },
            get: function get$$1() {
                // let validate = (x,y) => this.options.min <= x && y <= this.options.max ? [x,y] : [this.options.min, this.options.max];
                // return validate(this._lo,this._hi);
                return [this._lo, this._hi];
            }
        }]);
        return SliderWidget;
    }(EventTarget);

    var RangeWidget = function (_SliderWidget) {
        inherits(RangeWidget, _SliderWidget);

        function RangeWidget(container) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { mode: 'integer' };
            classCallCheck(this, RangeWidget);

            var _this = possibleConstructorReturn(this, (RangeWidget.__proto__ || Object.getPrototypeOf(RangeWidget)).call(this, container, options));

            _this.options.mode = _this.options.mode || 'integer';
            if (!_this._container.classList.contains('range-widget')) {
                _this._container.classList.add('range-widget');
                var html = '<div class="range-widget-content">\n                <input type="text" value="" />\n                <i>-</i>\n                <input type="text" value="" />\n            </div>';
                _this._bar.insertAdjacentHTML('beforebegin', html);
                _this._leftInput = _this._container.querySelector('.range-widget-content input:first-child');
                _this._rightInput = _this._container.querySelector('.range-widget-content input:last-child');
                _this._handleLeftInput = _this._handleLeftInput.bind(_this);
                _this._handleRightInput = _this._handleRightInput.bind(_this);
                _this._handleRange = _this._handleRange.bind(_this);
                _this._leftInput.addEventListener('change', _this._handleLeftInput);
                _this._leftInput.addEventListener('focus', function (e) {
                    return _this._leftInput.select();
                });
                _this._rightInput.addEventListener('change', _this._handleRightInput);
                _this._rightInput.addEventListener('focus', function (e) {
                    return _this._rightInput.select();
                });
                _this.addEventListener('change', _this._handleRange);
                _this.values = [_this.options.min, _this.options.max];
            }
            return _this;
        }

        createClass(RangeWidget, [{
            key: '_handleLeftInput',
            value: function _handleLeftInput(e) {
                var lo = this.options.mode === 'integer' ? parseInt(this._leftInput.value, 10) : parseFloat(this._leftInput.value);
                var hi = this.options.mode === 'integer' ? parseInt(this._rightInput.value, 10) : parseFloat(this._rightInput.value);
                if (!isNaN(lo) && this.options.min <= lo && lo <= this.options.max) {
                    this.values = [lo, hi];
                } else {
                    this._leftInput.value = this.options.mode === 'integer' ? Math.round(this._lo) : this._lo.toFixed(1);
                }

                // this.dispatchEvent(new CustomEvent('change', { detail: [this._lo, this._hi]}));

                var event = document.createEvent('Event');
                event.initEvent('change', false, false);
                event.detail = [this._lo, this._hi];
                this.dispatchEvent(event);

                event.initEvent('stop', false, false);
                event.detail = [this._lo, this._hi];
                this.dispatchEvent(event);
            }
        }, {
            key: '_handleRightInput',
            value: function _handleRightInput(e) {
                var lo = this.options.mode === 'integer' ? parseInt(this._leftInput.value, 10) : parseFloat(this._leftInput.value);
                var hi = this.options.mode === 'integer' ? parseInt(this._rightInput.value, 10) : parseFloat(this._rightInput.value);
                if (!isNaN(hi) && this.options.min <= hi && hi <= this.options.max) {
                    this.values = [lo, hi];
                } else {
                    this._rightInput.value = this.options.mode === 'integer' ? Math.round(this._hi) : this._hi.toFixed(1);
                }

                // this.dispatchEvent(new CustomEvent('change', { detail: [this._lo, this._hi]}));

                var event = document.createEvent('Event');
                event.initEvent('change', false, false);
                event.detail = [this._lo, this._hi];
                this.dispatchEvent(event);

                event.initEvent('stop', false, false);
                event.detail = [this._lo, this._hi];
                this.dispatchEvent(event);
            }
        }, {
            key: '_handleRange',
            value: function _handleRange(e) {
                var _e$detail = slicedToArray(e.detail, 2),
                    lo = _e$detail[0],
                    hi = _e$detail[1];

                this._leftInput.value = this.options.mode === 'integer' ? Math.round(lo) : lo.toFixed(1);
                this._rightInput.value = this.options.mode === 'integer' ? Math.round(hi) : hi.toFixed(1);
            }
        }, {
            key: 'values',
            set: function set$$1(_ref) {
                var _ref2 = slicedToArray(_ref, 2),
                    lo = _ref2[0],
                    hi = _ref2[1];

                if (!isNaN(lo) && this.options.min <= lo && lo <= this.options.max && !isNaN(hi) && this.options.min <= hi && hi <= this.options.max) {
                    set(RangeWidget.prototype.__proto__ || Object.getPrototypeOf(RangeWidget.prototype), 'values', [lo, hi], this);
                }
                this._leftInput.value = this.options.mode === 'integer' ? Math.round(this._lo) : this._lo.toFixed(1);
                this._rightInput.value = this.options.mode === 'integer' ? Math.round(this._hi) : this._hi.toFixed(1);

                // this.dispatchEvent(new CustomEvent('change', { detail: [lo, hi]}));
            },
            get: function get$$1() {
                return get(RangeWidget.prototype.__proto__ || Object.getPrototypeOf(RangeWidget.prototype), 'values', this);
            }
        }]);
        return RangeWidget;
    }(SliderWidget);

    var Tristate = function () {
    	function Tristate(target, items) {
    		classCallCheck(this, Tristate);

    		this._target = target;
    		this._items = items;
    		this._handleClick = this._handleClick.bind(this);
    		this.update = this.update.bind(this);
    		this._target.addEventListener('click', this._handleClick);
    		this._attachEvents(this._items);
    		this.state = this._items;
    	}

    	createClass(Tristate, [{
    		key: '_handleClick',
    		value: function _handleClick() {
    			var state = this._target.checked;
    			for (var i = 0; i < this._items.length; ++i) {
    				var checked = this._items[i].checked;
    				if (checked != state) {
    					this._items[i].click();
    				}
    			}
    		}
    	}, {
    		key: '_attachEvents',
    		value: function _attachEvents(items) {
    			for (var i = 0; i < items.length; ++i) {
    				items[i].addEventListener('click', this.update);
    			}
    		}
    	}, {
    		key: 'update',
    		value: function update() {
    			if (this._items.length > 1) {
    				var _state = this.state,
    				    indeterminate = _state.indeterminate,
    				    checked = _state.checked;

    				this._target.indeterminate = indeterminate;
    				if (!indeterminate) {
    					this._target.checked = checked;
    				}
    			}
    		}
    	}, {
    		key: 'state',
    		set: function set$$1(items) {
    			this._items = items;
    			this._attachEvents(this._items);
    			this.update();
    		},
    		get: function get$$1() {
    			var checked = this._items[0].checked;
    			for (var i = 1; i < this._items.length; i++) {
    				if (this._items[i].checked != checked) {
    					return { indeterminate: true };
    				}
    			}
    			return { indeterminate: false, checked: checked };
    		}
    	}]);
    	return Tristate;
    }();

    var T = Translations$1;

    var Info = function () {
        function Info(container) {
            classCallCheck(this, Info);

            this._container = container;
            this._container.classList.add('satellite-info');
            this._delay = 600;
            this._allowShow = false;
        }

        createClass(Info, [{
            key: 'show',
            value: function show(left, top) {
                var _this = this;

                this.render();
                this._container.style.left = left + 'px';
                this._container.style.top = top + 'px';
                this._allowShow = true;
                window.setTimeout(function () {
                    if (_this._allowShow) {
                        _this._container.style.display = 'block';
                        _this._allowShow = false;
                    }
                }, this._delay);
            }
        }, {
            key: 'hide',
            value: function hide() {
                this._allowShow = false;
                this._container.style.display = 'none';
            }
        }, {
            key: 'render',
            value: function render() {
                this._container.innerHTML = '<table cellspacing="0" cellpadding="0">\n            <tbody>\n                <tr>\n                    <td>' + T.getText('satellite.resolution') + ':</td><td>' + this._resolution + '</td><td>' + T.getText('resolution.unit') + '</td>\n                </tr>\n                <tr>\n                    <td>' + T.getText('satellite.swath') + ':</td><td>' + this._swath + '</td><td>' + T.getText('units.km') + '</td>\n                </tr>                \n            </tbody>\n        </table>\n        <div>' + this._operator + '</div>\n        <div>' + T.getText('satellite.since') + ' ' + this._since + '</div>';
            }
        }, {
            key: 'resolution',
            set: function set$$1(value) {
                this._resolution = value;
            }
        }, {
            key: 'swath',
            set: function set$$1(value) {
                this._swath = value;
            }
        }, {
            key: 'operator',
            set: function set$$1(value) {
                this._operator = value;
            }
        }, {
            key: 'since',
            set: function set$$1(value) {
                this._since = value;
            }
        }]);
        return Info;
    }();

    var isNumber = function isNumber(n) {
        return !isNaN(new Number(n));
    };

    function create_container() {
        var container = document.createElement('div');
        document.body.appendChild(container);
        return container;
    }

    function _f(arr, acc, swap) {
        if (arr.length) {
            var r = [];
            for (var i = 0, len = arr.length; i < len; i++) {
                var a = arr[i];
                if (_f(a, acc, swap)) {
                    if (swap) {
                        r.unshift(a);
                    } else {
                        r.push(a);
                    }
                }
            }
            if (r.length) {
                acc.push(r);
            }
            return false;
        } else {
            return true;
        }
    }

    function flatten(arr, swap) {
        var acc = [];
        _f(arr, acc, swap);
        return acc;
    }

    function split_complex_id(complexId) {
        var separatorIndex = complexId.lastIndexOf('!');
        return separatorIndex > 0 ? { id: complexId.substring(0, separatorIndex),
            productId: complexId.substring(separatorIndex + 1, complexId.length)
        } : { id: complexId };
    }

    function hex(number) {
        var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;

        var h = number.toString(16);
        while (h.length < width) {
            h = '0' + h;
        }
        return h.toUpperCase();
    }

    function is_geometry(obj) {
        var type = obj.type;

        switch (type) {
            case 'Point':
            case 'MultiPoint':
            case 'LineString':
            case 'MultiLineString':
            case 'Polygon':
            case 'MultiPolygon':
            case 'GeometryCollection':
                return true;
            default:
                return false;
        }
    }

    function normalize_geometry_type(geometry) {
        var type = geometry.type;

        switch (type.toUpperCase()) {
            case 'POINT':
                geometry.type = 'Point';
                break;
            case 'MULTIPOINT':
                geometry.type = 'MultiPoint';
                break;
            case 'LINESTRING':
                geometry.type = 'LineString';
                break;
            case 'MULTILINESTRING':
                geometry.type = 'MultiLineString';
                break;
            case 'POLYGON':
                geometry.type = 'Polygon';
                break;
            case 'MULTIPOLYGON':
                geometry.type = 'MultiPolygon';
                break;
            case 'GEOMETRYCOLLECTION':
                geometry.type = 'GeometryCollection';
                break;
            default:
                break;
        }
        return geometry;
    }

    function is_geojson_feature(obj) {
        var type = obj.type,
            geometry = obj.geometry,
            properties = obj.properties;

        if (type !== 'Feature') {
            console.log('geojson feature test failed: provided type is not a "Feature" object', obj);
            return false;
        }
        if (!is_geometry(geometry)) {
            console.log('geojson feature test failed: geometry is of wrong type', geometry);
            return false;
        }
        return true;
    }

    function from_gmx(_ref) {
        var fields = _ref.fields,
            values = _ref.values,
            types = _ref.types;
        var convertMercator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        return values.map(function (x) {
            var item = fields.reduce(function (a, k, i) {
                switch (types[i]) {
                    default:
                        a[k] = x[i];
                        break;
                    case 'date':
                        switch (_typeof(x[i])) {
                            case 'string':
                                a[k] = new Date(x[i]);
                                break;
                            case 'number':
                                a[k] = new Date(x[i] * 1000);
                                break;
                            default:
                                break;
                        }
                        break;
                    case 'time':
                        break;
                    case 'geometry':
                        a[k] = L.gmxUtil.geometryToGeoJSON(x[i], convertMercator);
                        break;
                }
                switch (k) {
                    case 'stereo':
                        var s = x[i];
                        a.stereo = typeof s === 'string' && s !== 'NONE';
                        break;
                    default:
                        break;
                }
                return a;
            }, {});
            if (item.geomixergeojson) {
                item.geoJSON = item.geomixergeojson;
                delete item.geomixergeojson;
            }
            item.url = '//search.kosmosnimki.ru/QuickLookImage.ashx?id=' + item.sceneid;
            return item;
        });
    }

    function normalize_point(lng, _ref2) {
        var _ref3 = slicedToArray(_ref2, 2),
            x = _ref3[0],
            y = _ref3[1];

        return [make_close_to(lng, x), y];
    }

    function normalize_ring(lng, coordinates) {
        return coordinates.map(normalize_point.bind(null, lng));
    }

    function normalize_polygon(lng, coordinates) {
        if (isNumber(lng)) {
            return coordinates.map(normalize_ring.bind(null, lng));
        } else {
            return coordinates.map(normalize_ring.bind(null, get_ref_lon(coordinates)));
        }
    }

    function get_ref_lon(coordinates) {
        var f = flatten(coordinates);
        var pos = f.filter(function (_ref4) {
            var _ref5 = slicedToArray(_ref4, 2),
                x = _ref5[0],
                y = _ref5[1];

            return x >= 0;
        });

        var _ref6 = pos.length > 0 ? pos[0] : f[0],
            _ref7 = slicedToArray(_ref6, 2),
            x = _ref7[0],
            y = _ref7[1];

        return x;
    }

    function normalize_geometry(geometry, lng) {
        var type = geometry.type,
            coordinates = geometry.coordinates;

        var x = isNumber(lng) ? lng : get_ref_lon(coordinates);
        switch (type.toUpperCase()) {
            case 'POLYGON':
                return { type: type, coordinates: normalize_polygon(x, coordinates) };
            case 'MULTIPOLYGON':
                return { type: type, coordinates: coordinates.map(normalize_polygon.bind(null, x)) };
            default:
                return geometry;
        }
    }

    function get_bbox(geometry) {
        var type = geometry.type,
            coordinates = geometry.coordinates;

        var lon = 0,
            lat = 0;
        var sorter = function sorter(a, b) {
            if (a > b) {
                return 1;
            }
            if (a < b) {
                return -1;
            }
            return 0;
        };
        var rings = function rings(coords) {
            var _coords$reduce = coords.reduce(function (a, _ref10) {
                var _ref11 = slicedToArray(_ref10, 2),
                    x = _ref11[0],
                    y = _ref11[1];

                a.xs.push(x);
                a.ys.push(y);
                return a;
            }, { xs: [], ys: [] }),
                xs = _coords$reduce.xs,
                ys = _coords$reduce.ys;

            xs = xs.sort(sorter);
            ys = ys.sort(sorter);
            var xmin = xs[0];
            var xmax = xs[xs.length - 1];
            var ymin = ys[0];
            var ymax = ys[ys.length - 1];
            return [[xmin, ymax], [xmax, ymax], [xmax, ymin], [xmin, ymin]];
        };
        switch (type.toUpperCase()) {
            case 'POINT':
                var _coordinates = slicedToArray(coordinates, 2);

                lon = _coordinates[0];
                lat = _coordinates[1];

                return [[lon, lat], [lon, lat], [lon, lat], [lon, lat]];
            case 'MULTIPOINT':
            case 'LINESTRING':
                return rings(coordinates);
            case 'POLYGON':
            case 'MULTILINESTRING':
                return rings(coordinates[0]);
            case 'MULTIPOLYGON':
                var _coordinates$reduce = coordinates.reduce(function (a, coords) {
                    var _rings = rings(coords[0]),
                        _rings2 = slicedToArray(_rings, 4),
                        _rings2$ = slicedToArray(_rings2[0], 2),
                        x1 = _rings2$[0],
                        y1 = _rings2$[1],
                        _rings2$2 = slicedToArray(_rings2[1], 2),
                        x2 = _rings2$2[0],
                        y2 = _rings2$2[1],
                        _rings2$3 = slicedToArray(_rings2[2], 2),
                        x3 = _rings2$3[0],
                        y3 = _rings2$3[1],
                        _rings2$4 = slicedToArray(_rings2[3], 2),
                        x4 = _rings2$4[0],
                        y4 = _rings2$4[1];

                    a.xs.push(x1);
                    a.xs.push(x2);
                    a.xs.push(x3);
                    a.xs.push(x4);
                    a.ys.push(y1);
                    a.ys.push(y2);
                    a.ys.push(y3);
                    a.ys.push(y4);
                    return a;
                }, { xs: [], ys: [] }),
                    xs = _coordinates$reduce.xs,
                    ys = _coordinates$reduce.ys;

                xs = xs.sort(sorter);
                ys = ys.sort(sorter);
                var xmin = xs[0];
                var xmax = xs[xs.length - 1];
                var ymin = ys[0];
                var ymax = ys[ys.length - 1];
                return [[xmin, ymax], [xmax, ymax], [xmax, ymin], [xmin, ymin]];
            default:
                return null;
        }
    }

    var EAST_HEMISPHERE = L.bounds(L.point(0, -90), L.point(180, 90));

    var WEST_HEMISPHERE = L.bounds(L.point(180, -90), L.point(360, 90));

    var WEST_HEMISPHERE2 = L.bounds(L.point(-180, -90), L.point(0, 90));

    function split180(geometry) {
        var type = geometry.type,
            coordinates = geometry.coordinates;

        var split_coords = function split_coords(points, hemisphere) {
            var coords = L.PolyUtil.clipPolygon(points, hemisphere).map(function (_ref12) {
                var x = _ref12.x,
                    y = _ref12.y;
                return [x, y];
            });
            if (coords.length > 0) {
                var start_point = coords[0];
                var end_point = coords[coords.length - 1];
                if (start_point[0] != end_point[0] || start_point[1] != end_point[1]) {
                    coords.push(start_point);
                }
            }
            return coords;
        };
        var geometries = [];
        switch (type.toUpperCase()) {
            case 'POLYGON':
                var points = coordinates[0].map(function (_ref13) {
                    var _ref14 = slicedToArray(_ref13, 2),
                        x = _ref14[0],
                        y = _ref14[1];

                    return L.point(x, y);
                });
                var c1 = split_coords(points, EAST_HEMISPHERE);
                if (c1.length > 0) {
                    geometries.push(normalize_geometry({ type: type, coordinates: [c1] }, 179));
                }
                var c2 = split_coords(points, WEST_HEMISPHERE);
                if (c2.length > 0) {
                    geometries.push(normalize_geometry({ type: type, coordinates: [c2] }, -179));
                } else {
                    c2 = split_coords(points, WEST_HEMISPHERE2);
                    if (c2.length > 0) {
                        geometries.push(normalize_geometry({ type: type, coordinates: [c2] }, -179));
                    }
                }
                break;
            case 'LINESTRING':
            default:
                geometries.push(geometry);
                break;
        }
        return geometries;
    }

    function make_close_to(lng, x) {
        var dist = function dist(a, b) {
            return Math.abs(a - b);
        };

        var _map$reduce = [x - 360, x, x + 360].map(function (p) {
            return { p: p, d: dist(lng, p) };
        }).reduce(function (a, _ref15) {
            var p = _ref15.p,
                d = _ref15.d;

            if (a === null || d < a.d) {
                a = { d: d, p: p };
            }
            return a;
        }, null),
            p = _map$reduce.p;

        return p;
    }

    function get_window_center() {
        var _document$body$getBou = document.body.getBoundingClientRect(),
            left = _document$body$getBou.left,
            top = _document$body$getBou.top,
            width = _document$body$getBou.width,
            height = _document$body$getBou.height;

        return { left: left + Math.round(width / 2), top: top + Math.round(height / 2) };
    }

    function read_permalink(id) {
        return new Promise(function (resolve, reject) {
            if (window.Catalog.gmxResourceServer) {

                window.Catalog.gmxResourceServer.sendGetRequest('TinyReference/Get.ashx', { id: id }).then(function (response) {
                    if (response.Status == 'ok') {
                        try {
                            resolve(JSON.parse(response.Result));
                        } catch (e) {
                            reject(e);
                        }
                    } else {
                        reject(response.Result);
                    }
                }).catch(function (e) {
                    return reject(e);
                });
            } else {
                reject("Geomixer resource server not defined.");
            }
        });
    }

    function is_mobile() {
        var check = false;
        (function (a) {
            if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true;
        })(navigator.userAgent || navigator.vendor || window.opera);
        return check;
    }

    var T$1 = Translations$1;

    T$1.addText('rus', {
        satellite: {
            global: 'Внешние',
            local: 'Внутренние',
            ms: 'Мультиспектр',
            pc: 'Панхром',
            resolution: 'Разрешение',
            swath: 'Ширина полосы съемки',
            since: 'На орбите:'
        }
    });

    T$1.addText('eng', {
        satellite: {
            global: 'Global',
            local: 'Local',
            ms: 'Multispectrum',
            pc: 'Panchrome',
            resolution: 'Resolution',
            swath: 'Swath',
            since: 'In orbit since'
        }
    });

    var SATELLITE_COLS = 2;

    var Satellites = function (_EventTarget) {
        inherits(Satellites, _EventTarget);

        function Satellites(container, _ref) {
            var _ref$restricted = _ref.restricted,
                restricted = _ref$restricted === undefined ? false : _ref$restricted;
            classCallCheck(this, Satellites);

            var _this = possibleConstructorReturn(this, (Satellites.__proto__ || Object.getPrototypeOf(Satellites)).call(this));

            _this._container = container;
            _this._restricted = restricted;
            _this._info = new Info(create_container());
            return _this;
        }

        createClass(Satellites, [{
            key: '_updateChecked',
            value: function _updateChecked(nodes, cache) {
                for (var i = 0; i < nodes.length; ++i) {
                    var node = nodes[i];
                    node.checked = cache[i].checked;
                }
            }
        }, {
            key: '_attachEvents',
            value: function _attachEvents(nodes, cache) {
                var _this2 = this;

                var _loop = function _loop(i) {
                    var node = nodes[i];
                    node.addEventListener('click', function (e) {
                        cache[i].checked = e.target.checked;
                        _this2._handleChange();
                    });
                    var p = node.parentNode.querySelector('label');
                    p.addEventListener('mouseover', function (e) {
                        var _cache$i = cache[i],
                            resolution = _cache$i.resolution,
                            swath = _cache$i.swath,
                            operator = _cache$i.operator,
                            since = _cache$i.since;

                        _this2._info.resolution = resolution;
                        _this2._info.swath = swath;
                        _this2._info.operator = operator;
                        _this2._info.since = since;

                        var _p$getBoundingClientR = p.getBoundingClientRect(),
                            left = _p$getBoundingClientR.left,
                            top = _p$getBoundingClientR.top,
                            width = _p$getBoundingClientR.width;

                        _this2._info.show(left + width, top - 10);
                    });
                    p.addEventListener('mouseout', function (e) {
                        _this2._info.hide();
                    });
                };

                for (var i = 0; i < nodes.length; ++i) {
                    _loop(i);
                }
            }
        }, {
            key: '_handleChange',
            value: function _handleChange() {
                var event = document.createEvent('Event');
                event.initEvent('change', false, false);
                this.dispatchEvent(event);
            }
        }, {
            key: '_getSatelliteClass',
            value: function _getSatelliteClass(i) {
                return i > 0 && i % SATELLITE_COLS === 0 ? 'satellite-col-break' : 'satellite-col';
            }
        }, {
            key: '_getSatelliteList',
            value: function _getSatelliteList(cache) {
                return cache.map(function (x, i) {
                    return '<div class="satellite-col"><input type="checkbox" id="sat_' + x.id + '" value="' + x.id + '" /><label for="sat_' + x.id + '">' + x.name + '</label></div>';
                }).join('');
            }
        }, {
            key: '_getTooltip',
            value: function _getTooltip(obj) {
                return T$1.getText('satellite.resolution') + ' ' + obj.resolution + ' ' + T$1.getText('satellite.swath') + ' ' + obj.swath + ' ' + obj.operator + ' ' + T$1.getText('satellite.since') + ' ' + obj.since;
            }
        }, {
            key: '_render',
            value: function _render() {

                this._container.innerHTML = '<fieldset class="search-options-satellites-ms">\n            <legend>\n                <input id="search-options-satellites-ms-select" type="checkbox" class="search-options-satellites-ms-select" />\n                <label for="search-options-satellites-ms-select">' + T$1.getText('satellite.ms') + '</label>\n            </legend>            \n            <div>' + this._getSatelliteList(this._ms) + '</div>\n        </fieldset>\n        <fieldset class="search-options-satellites-pc">            \n            <legend>\n                <input id="search-options-satellites-pc-select" type="checkbox" class="search-options-satellites-pc-select" />\n                <label for="search-options-satellites-pc-select">' + T$1.getText('satellite.pc') + '</label>\n            </legend>            \n            <div>' + this._getSatelliteList(this._pc) + '</div>\n        </fieldset>';
                var ms = this._container.querySelectorAll('.search-options-satellites-ms div input[type="checkbox"]');
                this._attachEvents(ms, this._ms);
                this._msTristate = new Tristate(this._container.querySelector('.search-options-satellites-ms legend input[type="checkbox"]'), ms);
                this._updateChecked(ms, this._ms);
                this._msTristate.update();

                var pc = this._container.querySelectorAll('.search-options-satellites-pc div input[type="checkbox"]');
                this._attachEvents(pc, this._pc);
                this._pcTristate = new Tristate(this._container.querySelector('.search-options-satellites-pc legend input[type="checkbox"]'), pc);
                this._updateChecked(pc, this._pc);
                this._pcTristate.update();
            }

            // redraw () {
            //     this._render();
            //     this._handleChange();
            // }

        }, {
            key: 'data',
            set: function set$$1(_ref2) {
                var ms = _ref2.ms,
                    pc = _ref2.pc;

                this._ms = this._restricted ? ms : ms.filter(function (x) {
                    return !x.restricted;
                });
                this._pc = this._restricted ? pc : pc.filter(function (x) {
                    return !x.restricted;
                });
                this._render();
                this._handleChange();
            },
            get: function get$$1() {
                return { ms: this._ms, pc: this._pc };
            }
        }, {
            key: 'count',
            get: function get$$1() {
                var ss = this.items.filter(function (x) {
                    return x.checked;
                }).reduce(function (a, x) {
                    switch (x.id) {
                        case 'SP5_10MS':
                        case 'SP5_5MS':
                        case 'SP5_5PC':
                        case 'SP5_2MS':
                        case 'SP5_2PC':
                            a.SP5 = 1;
                            break;
                        case 'SP6_7':
                            a.SP6_7 = 2;
                            break;
                        case 'PHR':
                            a.PHR = 2;
                            break;
                        case 'RP_PC':
                        case 'RP_MS':
                            a.RP = 3;
                            break;
                        case 'SV1':
                            a.SV1 = 4;
                            break;
                        default:
                            a[x.id] = 1;
                            break;
                    }
                    return a;
                }, {});
                return Object.keys(ss).reduce(function (a, k) {
                    return a + ss[k];
                }, 0);
            }
        }, {
            key: 'items',
            get: function get$$1() {
                return this._ms.concat(this._pc);
            }
        }, {
            key: 'range',
            get: function get$$1() {
                var range = this.items.filter(function (x) {
                    return x.checked;
                }).map(function (x) {
                    return x.resolution;
                }).sort(function (a, b) {
                    if (a < b) return -1;
                    if (a > b) return 1;
                    if (a == b) return 0;
                });
                if (range.length > 0) {
                    return [range[0], range[range.length - 1]];
                } else {
                    return [];
                }
            },
            set: function set$$1(_ref3) {
                var _ref4 = slicedToArray(_ref3, 2),
                    min = _ref4[0],
                    max = _ref4[1];

                this._ms.forEach(function (x) {
                    x.checked = min <= x.resolution && x.resolution <= max;
                });
                var ms = this._container.querySelectorAll('.search-options-satellites-ms div input[type="checkbox"]');
                this._updateChecked(ms, this._ms);
                this._msTristate.update();

                this._pc.forEach(function (x) {
                    x.checked = min <= x.resolution && x.resolution <= max;
                });
                var pc = this._container.querySelectorAll('.search-options-satellites-pc div input[type="checkbox"]');
                this._updateChecked(pc, this._pc);
                this._pcTristate.update();

                // this._handleChange();
            }
        }]);
        return Satellites;
    }(EventTarget);

    var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var pikaday = createCommonjsModule(function (module, exports) {
        /*!
         * Pikaday
         *
         * Copyright © 2014 David Bushell | BSD & MIT license | https://github.com/dbushell/Pikaday
         */

        (function (root, factory) {

            var moment;
            {
                // CommonJS module
                // Load moment.js as an optional dependency
                try {
                    moment = moment$1;
                } catch (e) {}
                module.exports = factory(moment);
            }
        })(commonjsGlobal, function (moment) {

            /**
             * feature detection and helper functions
             */

            var hasMoment = typeof moment === 'function',
                hasEventListeners = !!window.addEventListener,
                document = window.document,
                sto = window.setTimeout,
                addEvent = function addEvent(el, e, callback, capture) {
                if (hasEventListeners) {
                    el.addEventListener(e, callback, !!capture);
                } else {
                    el.attachEvent('on' + e, callback);
                }
            },
                removeEvent = function removeEvent(el, e, callback, capture) {
                if (hasEventListeners) {
                    el.removeEventListener(e, callback, !!capture);
                } else {
                    el.detachEvent('on' + e, callback);
                }
            },
                trim = function trim(str) {
                return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
            },
                hasClass = function hasClass(el, cn) {
                return (' ' + el.className + ' ').indexOf(' ' + cn + ' ') !== -1;
            },
                addClass = function addClass(el, cn) {
                if (!hasClass(el, cn)) {
                    el.className = el.className === '' ? cn : el.className + ' ' + cn;
                }
            },
                removeClass = function removeClass(el, cn) {
                el.className = trim((' ' + el.className + ' ').replace(' ' + cn + ' ', ' '));
            },
                isArray = function isArray(obj) {
                return (/Array/.test(Object.prototype.toString.call(obj))
                );
            },
                isDate = function isDate(obj) {
                return (/Date/.test(Object.prototype.toString.call(obj)) && !isNaN(obj.getTime())
                );
            },
                isWeekend = function isWeekend(date) {
                var day = date.getDay();
                return day === 0 || day === 6;
            },
                isLeapYear = function isLeapYear(year) {
                // solution by Matti Virkkunen: http://stackoverflow.com/a/4881951
                return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
            },
                getDaysInMonth = function getDaysInMonth(year, month) {
                return [31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
            },
                setToStartOfDay = function setToStartOfDay(date) {
                if (isDate(date)) date.setHours(0, 0, 0, 0);
            },
                compareDates = function compareDates(a, b) {
                // weak date comparison (use setToStartOfDay(date) to ensure correct result)
                return a.getTime() === b.getTime();
            },
                extend = function extend(to, from, overwrite) {
                var prop, hasProp;
                for (prop in from) {
                    hasProp = to[prop] !== undefined;
                    if (hasProp && _typeof(from[prop]) === 'object' && from[prop] !== null && from[prop].nodeName === undefined) {
                        if (isDate(from[prop])) {
                            if (overwrite) {
                                to[prop] = new Date(from[prop].getTime());
                            }
                        } else if (isArray(from[prop])) {
                            if (overwrite) {
                                to[prop] = from[prop].slice(0);
                            }
                        } else {
                            to[prop] = extend({}, from[prop], overwrite);
                        }
                    } else if (overwrite || !hasProp) {
                        to[prop] = from[prop];
                    }
                }
                return to;
            },
                fireEvent = function fireEvent(el, eventName, data) {
                var ev;

                if (document.createEvent) {
                    ev = document.createEvent('HTMLEvents');
                    ev.initEvent(eventName, true, false);
                    ev = extend(ev, data);
                    el.dispatchEvent(ev);
                } else if (document.createEventObject) {
                    ev = document.createEventObject();
                    ev = extend(ev, data);
                    el.fireEvent('on' + eventName, ev);
                }
            },
                adjustCalendar = function adjustCalendar(calendar) {
                if (calendar.month < 0) {
                    calendar.year -= Math.ceil(Math.abs(calendar.month) / 12);
                    calendar.month += 12;
                }
                if (calendar.month > 11) {
                    calendar.year += Math.floor(Math.abs(calendar.month) / 12);
                    calendar.month -= 12;
                }
                return calendar;
            },


            /**
             * defaults and localisation
             */
            defaults$$1 = {

                // bind the picker to a form field
                field: null,

                // automatically show/hide the picker on `field` focus (default `true` if `field` is set)
                bound: undefined,

                // position of the datepicker, relative to the field (default to bottom & left)
                // ('bottom' & 'left' keywords are not used, 'top' & 'right' are modifier on the bottom/left position)
                position: 'bottom left',

                // automatically fit in the viewport even if it means repositioning from the position option
                reposition: true,

                // the default output format for `.toString()` and `field` value
                format: 'YYYY-MM-DD',

                // the toString function which gets passed a current date object and format
                // and returns a string
                toString: null,

                // used to create date object from current input string
                parse: null,

                // the initial date to view when first opened
                defaultDate: null,

                // make the `defaultDate` the initial selected value
                setDefaultDate: false,

                // first day of week (0: Sunday, 1: Monday etc)
                firstDay: 0,

                // the default flag for moment's strict date parsing
                formatStrict: false,

                // the minimum/earliest date that can be selected
                minDate: null,
                // the maximum/latest date that can be selected
                maxDate: null,

                // number of years either side, or array of upper/lower range
                yearRange: 10,

                // show week numbers at head of row
                showWeekNumber: false,

                // Week picker mode
                pickWholeWeek: false,

                // used internally (don't config outside)
                minYear: 0,
                maxYear: 9999,
                minMonth: undefined,
                maxMonth: undefined,

                startRange: null,
                endRange: null,

                isRTL: false,

                // Additional text to append to the year in the calendar title
                yearSuffix: '',

                // Render the month after year in the calendar title
                showMonthAfterYear: false,

                // Render days of the calendar grid that fall in the next or previous month
                showDaysInNextAndPreviousMonths: false,

                // Allows user to select days that fall in the next or previous month
                enableSelectionDaysInNextAndPreviousMonths: false,

                // how many months are visible
                numberOfMonths: 1,

                // when numberOfMonths is used, this will help you to choose where the main calendar will be (default `left`, can be set to `right`)
                // only used for the first display or when a selected date is not visible
                mainCalendar: 'left',

                // Specify a DOM element to render the calendar in
                container: undefined,

                // Blur field when date is selected
                blurFieldOnSelect: true,

                // internationalization
                i18n: {
                    previousMonth: 'Previous Month',
                    nextMonth: 'Next Month',
                    months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                    weekdays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
                    weekdaysShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
                },

                // Theme Classname
                theme: null,

                // events array
                events: [],

                // callback function
                onSelect: null,
                onOpen: null,
                onClose: null,
                onDraw: null,

                // Enable keyboard input
                keyboardInput: true
            },


            /**
             * templating functions to abstract HTML rendering
             */
            renderDayName = function renderDayName(opts, day, abbr) {
                day += opts.firstDay;
                while (day >= 7) {
                    day -= 7;
                }
                return abbr ? opts.i18n.weekdaysShort[day] : opts.i18n.weekdays[day];
            },
                renderDay = function renderDay(opts) {
                var arr = [];
                var ariaSelected = 'false';
                if (opts.isEmpty) {
                    if (opts.showDaysInNextAndPreviousMonths) {
                        arr.push('is-outside-current-month');

                        if (!opts.enableSelectionDaysInNextAndPreviousMonths) {
                            arr.push('is-selection-disabled');
                        }
                    } else {
                        return '<td class="is-empty"></td>';
                    }
                }
                if (opts.isDisabled) {
                    arr.push('is-disabled');
                }
                if (opts.isToday) {
                    arr.push('is-today');
                }
                if (opts.isSelected) {
                    arr.push('is-selected');
                    ariaSelected = 'true';
                }
                if (opts.hasEvent) {
                    arr.push('has-event');
                }
                if (opts.isInRange) {
                    arr.push('is-inrange');
                }
                if (opts.isStartRange) {
                    arr.push('is-startrange');
                }
                if (opts.isEndRange) {
                    arr.push('is-endrange');
                }
                return '<td data-day="' + opts.day + '" class="' + arr.join(' ') + '" aria-selected="' + ariaSelected + '">' + '<button class="pika-button pika-day" type="button" ' + 'data-pika-year="' + opts.year + '" data-pika-month="' + opts.month + '" data-pika-day="' + opts.day + '">' + opts.day + '</button>' + '</td>';
            },
                renderWeek = function renderWeek(d, m, y) {
                // Lifted from http://javascript.about.com/library/blweekyear.htm, lightly modified.
                var onejan = new Date(y, 0, 1),
                    weekNum = Math.ceil(((new Date(y, m, d) - onejan) / 86400000 + onejan.getDay() + 1) / 7);
                return '<td class="pika-week">' + weekNum + '</td>';
            },
                renderRow = function renderRow(days, isRTL, pickWholeWeek, isRowSelected) {
                return '<tr class="pika-row' + (pickWholeWeek ? ' pick-whole-week' : '') + (isRowSelected ? ' is-selected' : '') + '">' + (isRTL ? days.reverse() : days).join('') + '</tr>';
            },
                renderBody = function renderBody(rows) {
                return '<tbody>' + rows.join('') + '</tbody>';
            },
                renderHead = function renderHead(opts) {
                var i,
                    arr = [];
                if (opts.showWeekNumber) {
                    arr.push('<th></th>');
                }
                for (i = 0; i < 7; i++) {
                    arr.push('<th scope="col"><abbr title="' + renderDayName(opts, i) + '">' + renderDayName(opts, i, true) + '</abbr></th>');
                }
                return '<thead><tr>' + (opts.isRTL ? arr.reverse() : arr).join('') + '</tr></thead>';
            },
                renderTitle = function renderTitle(instance, c, year, month, refYear, randId) {
                var i,
                    j,
                    arr,
                    opts = instance._o,
                    isMinYear = year === opts.minYear,
                    isMaxYear = year === opts.maxYear,
                    html = '<div id="' + randId + '" class="pika-title" role="heading" aria-live="assertive">',
                    monthHtml,
                    yearHtml,
                    prev = true,
                    next = true;

                for (arr = [], i = 0; i < 12; i++) {
                    arr.push('<option value="' + (year === refYear ? i - c : 12 + i - c) + '"' + (i === month ? ' selected="selected"' : '') + (isMinYear && i < opts.minMonth || isMaxYear && i > opts.maxMonth ? 'disabled="disabled"' : '') + '>' + opts.i18n.months[i] + '</option>');
                }

                monthHtml = '<div class="pika-label">' + opts.i18n.months[month] + '<select class="pika-select pika-select-month" tabindex="-1">' + arr.join('') + '</select></div>';

                if (isArray(opts.yearRange)) {
                    i = opts.yearRange[0];
                    j = opts.yearRange[1] + 1;
                } else {
                    i = year - opts.yearRange;
                    j = 1 + year + opts.yearRange;
                }

                for (arr = []; i < j && i <= opts.maxYear; i++) {
                    if (i >= opts.minYear) {
                        arr.push('<option value="' + i + '"' + (i === year ? ' selected="selected"' : '') + '>' + i + '</option>');
                    }
                }
                yearHtml = '<div class="pika-label">' + year + opts.yearSuffix + '<select class="pika-select pika-select-year" tabindex="-1">' + arr.join('') + '</select></div>';

                if (opts.showMonthAfterYear) {
                    html += yearHtml + monthHtml;
                } else {
                    html += monthHtml + yearHtml;
                }

                if (isMinYear && (month === 0 || opts.minMonth >= month)) {
                    prev = false;
                }

                if (isMaxYear && (month === 11 || opts.maxMonth <= month)) {
                    next = false;
                }

                if (c === 0) {
                    html += '<button class="pika-prev' + (prev ? '' : ' is-disabled') + '" type="button">' + opts.i18n.previousMonth + '</button>';
                }
                if (c === instance._o.numberOfMonths - 1) {
                    html += '<button class="pika-next' + (next ? '' : ' is-disabled') + '" type="button">' + opts.i18n.nextMonth + '</button>';
                }

                return html += '</div>';
            },
                renderTable = function renderTable(opts, data, randId) {
                return '<table cellpadding="0" cellspacing="0" class="pika-table" role="grid" aria-labelledby="' + randId + '">' + renderHead(opts) + renderBody(data) + '</table>';
            },


            /**
             * Pikaday constructor
             */
            Pikaday = function Pikaday(options) {
                var self = this,
                    opts = self.config(options);

                self._onMouseDown = function (e) {
                    if (!self._v) {
                        return;
                    }
                    e = e || window.event;
                    var target = e.target || e.srcElement;
                    if (!target) {
                        return;
                    }

                    if (!hasClass(target, 'is-disabled')) {
                        if (hasClass(target, 'pika-button') && !hasClass(target, 'is-empty') && !hasClass(target.parentNode, 'is-disabled')) {
                            self.setDate(new Date(target.getAttribute('data-pika-year'), target.getAttribute('data-pika-month'), target.getAttribute('data-pika-day')));
                            if (opts.bound) {
                                sto(function () {
                                    self.hide();
                                    if (opts.blurFieldOnSelect && opts.field) {
                                        opts.field.blur();
                                    }
                                }, 100);
                            }
                        } else if (hasClass(target, 'pika-prev')) {
                            self.prevMonth();
                        } else if (hasClass(target, 'pika-next')) {
                            self.nextMonth();
                        }
                    }
                    if (!hasClass(target, 'pika-select')) {
                        // if this is touch event prevent mouse events emulation
                        if (e.preventDefault) {
                            e.preventDefault();
                        } else {
                            e.returnValue = false;
                            return false;
                        }
                    } else {
                        self._c = true;
                    }
                };

                self._onChange = function (e) {
                    e = e || window.event;
                    var target = e.target || e.srcElement;
                    if (!target) {
                        return;
                    }
                    if (hasClass(target, 'pika-select-month')) {
                        self.gotoMonth(target.value);
                    } else if (hasClass(target, 'pika-select-year')) {
                        self.gotoYear(target.value);
                    }
                };

                self._onKeyChange = function (e) {
                    e = e || window.event;

                    if (self.isVisible()) {

                        switch (e.keyCode) {
                            case 13:
                            case 27:
                                if (opts.field) {
                                    opts.field.blur();
                                }
                                break;
                            case 37:
                                e.preventDefault();
                                self.adjustDate('subtract', 1);
                                break;
                            case 38:
                                self.adjustDate('subtract', 7);
                                break;
                            case 39:
                                self.adjustDate('add', 1);
                                break;
                            case 40:
                                self.adjustDate('add', 7);
                                break;
                        }
                    }
                };

                self._onInputChange = function (e) {
                    var date;

                    if (e.firedBy === self) {
                        return;
                    }
                    if (opts.parse) {
                        date = opts.parse(opts.field.value, opts.format);
                    } else if (hasMoment) {
                        date = moment(opts.field.value, opts.format, opts.formatStrict);
                        date = date && date.isValid() ? date.toDate() : null;
                    } else {
                        date = new Date(Date.parse(opts.field.value));
                    }
                    if (isDate(date)) {
                        self.setDate(date);
                    }
                    if (!self._v) {
                        self.show();
                    }
                };

                self._onInputFocus = function () {
                    self.show();
                };

                self._onInputClick = function () {
                    self.show();
                };

                self._onInputBlur = function () {
                    // IE allows pika div to gain focus; catch blur the input field
                    var pEl = document.activeElement;
                    do {
                        if (hasClass(pEl, 'pika-single')) {
                            return;
                        }
                    } while (pEl = pEl.parentNode);

                    if (!self._c) {
                        self._b = sto(function () {
                            self.hide();
                        }, 50);
                    }
                    self._c = false;
                };

                self._onClick = function (e) {
                    e = e || window.event;
                    var target = e.target || e.srcElement,
                        pEl = target;
                    if (!target) {
                        return;
                    }
                    if (!hasEventListeners && hasClass(target, 'pika-select')) {
                        if (!target.onchange) {
                            target.setAttribute('onchange', 'return;');
                            addEvent(target, 'change', self._onChange);
                        }
                    }
                    do {
                        if (hasClass(pEl, 'pika-single') || pEl === opts.trigger) {
                            return;
                        }
                    } while (pEl = pEl.parentNode);
                    if (self._v && target !== opts.trigger && pEl !== opts.trigger) {
                        self.hide();
                    }
                };

                self.el = document.createElement('div');
                self.el.className = 'pika-single' + (opts.isRTL ? ' is-rtl' : '') + (opts.theme ? ' ' + opts.theme : '');

                addEvent(self.el, 'mousedown', self._onMouseDown, true);
                addEvent(self.el, 'touchend', self._onMouseDown, true);
                addEvent(self.el, 'change', self._onChange);

                if (opts.keyboardInput) {
                    addEvent(document, 'keydown', self._onKeyChange);
                }

                if (opts.field) {
                    if (opts.container) {
                        opts.container.appendChild(self.el);
                    } else if (opts.bound) {
                        document.body.appendChild(self.el);
                    } else {
                        opts.field.parentNode.insertBefore(self.el, opts.field.nextSibling);
                    }
                    addEvent(opts.field, 'change', self._onInputChange);

                    if (!opts.defaultDate) {
                        if (hasMoment && opts.field.value) {
                            opts.defaultDate = moment(opts.field.value, opts.format).toDate();
                        } else {
                            opts.defaultDate = new Date(Date.parse(opts.field.value));
                        }
                        opts.setDefaultDate = true;
                    }
                }

                var defDate = opts.defaultDate;

                if (isDate(defDate)) {
                    if (opts.setDefaultDate) {
                        self.setDate(defDate, true);
                    } else {
                        self.gotoDate(defDate);
                    }
                } else {
                    self.gotoDate(new Date());
                }

                if (opts.bound) {
                    this.hide();
                    self.el.className += ' is-bound';
                    addEvent(opts.trigger, 'click', self._onInputClick);
                    addEvent(opts.trigger, 'focus', self._onInputFocus);
                    addEvent(opts.trigger, 'blur', self._onInputBlur);
                } else {
                    this.show();
                }
            };

            /**
             * public Pikaday API
             */
            Pikaday.prototype = {

                /**
                 * configure functionality
                 */
                config: function config(options) {
                    if (!this._o) {
                        this._o = extend({}, defaults$$1, true);
                    }

                    var opts = extend(this._o, options, true);

                    opts.isRTL = !!opts.isRTL;

                    opts.field = opts.field && opts.field.nodeName ? opts.field : null;

                    opts.theme = typeof opts.theme === 'string' && opts.theme ? opts.theme : null;

                    opts.bound = !!(opts.bound !== undefined ? opts.field && opts.bound : opts.field);

                    opts.trigger = opts.trigger && opts.trigger.nodeName ? opts.trigger : opts.field;

                    opts.disableWeekends = !!opts.disableWeekends;

                    opts.disableDayFn = typeof opts.disableDayFn === 'function' ? opts.disableDayFn : null;

                    var nom = parseInt(opts.numberOfMonths, 10) || 1;
                    opts.numberOfMonths = nom > 4 ? 4 : nom;

                    if (!isDate(opts.minDate)) {
                        opts.minDate = false;
                    }
                    if (!isDate(opts.maxDate)) {
                        opts.maxDate = false;
                    }
                    if (opts.minDate && opts.maxDate && opts.maxDate < opts.minDate) {
                        opts.maxDate = opts.minDate = false;
                    }
                    if (opts.minDate) {
                        this.setMinDate(opts.minDate);
                    }
                    if (opts.maxDate) {
                        this.setMaxDate(opts.maxDate);
                    }

                    if (isArray(opts.yearRange)) {
                        var fallback = new Date().getFullYear() - 10;
                        opts.yearRange[0] = parseInt(opts.yearRange[0], 10) || fallback;
                        opts.yearRange[1] = parseInt(opts.yearRange[1], 10) || fallback;
                    } else {
                        opts.yearRange = Math.abs(parseInt(opts.yearRange, 10)) || defaults$$1.yearRange;
                        if (opts.yearRange > 100) {
                            opts.yearRange = 100;
                        }
                    }

                    return opts;
                },

                /**
                 * return a formatted string of the current selection (using Moment.js if available)
                 */
                toString: function toString(format) {
                    format = format || this._o.format;
                    if (!isDate(this._d)) {
                        return '';
                    }
                    if (this._o.toString) {
                        return this._o.toString(this._d, format);
                    }
                    if (hasMoment) {
                        return moment(this._d).format(format);
                    }
                    return this._d.toDateString();
                },

                /**
                 * return a Moment.js object of the current selection (if available)
                 */
                getMoment: function getMoment() {
                    return hasMoment ? moment(this._d) : null;
                },

                /**
                 * set the current selection from a Moment.js object (if available)
                 */
                setMoment: function setMoment(date, preventOnSelect) {
                    if (hasMoment && moment.isMoment(date)) {
                        this.setDate(date.toDate(), preventOnSelect);
                    }
                },

                /**
                 * return a Date object of the current selection
                 */
                getDate: function getDate() {
                    return isDate(this._d) ? new Date(this._d.getTime()) : null;
                },

                /**
                 * set the current selection
                 */
                setDate: function setDate(date, preventOnSelect) {
                    if (!date) {
                        this._d = null;

                        if (this._o.field) {
                            this._o.field.value = '';
                            fireEvent(this._o.field, 'change', { firedBy: this });
                        }

                        return this.draw();
                    }
                    if (typeof date === 'string') {
                        date = new Date(Date.parse(date));
                    }
                    if (!isDate(date)) {
                        return;
                    }

                    var min = this._o.minDate,
                        max = this._o.maxDate;

                    if (isDate(min) && date < min) {
                        date = min;
                    } else if (isDate(max) && date > max) {
                        date = max;
                    }

                    this._d = new Date(date.getTime());
                    setToStartOfDay(this._d);
                    this.gotoDate(this._d);

                    if (this._o.field) {
                        this._o.field.value = this.toString();
                        fireEvent(this._o.field, 'change', { firedBy: this });
                    }
                    if (!preventOnSelect && typeof this._o.onSelect === 'function') {
                        this._o.onSelect.call(this, this.getDate());
                    }
                },

                /**
                 * change view to a specific date
                 */
                gotoDate: function gotoDate(date) {
                    var newCalendar = true;

                    if (!isDate(date)) {
                        return;
                    }

                    if (this.calendars) {
                        var firstVisibleDate = new Date(this.calendars[0].year, this.calendars[0].month, 1),
                            lastVisibleDate = new Date(this.calendars[this.calendars.length - 1].year, this.calendars[this.calendars.length - 1].month, 1),
                            visibleDate = date.getTime();
                        // get the end of the month
                        lastVisibleDate.setMonth(lastVisibleDate.getMonth() + 1);
                        lastVisibleDate.setDate(lastVisibleDate.getDate() - 1);
                        newCalendar = visibleDate < firstVisibleDate.getTime() || lastVisibleDate.getTime() < visibleDate;
                    }

                    if (newCalendar) {
                        this.calendars = [{
                            month: date.getMonth(),
                            year: date.getFullYear()
                        }];
                        if (this._o.mainCalendar === 'right') {
                            this.calendars[0].month += 1 - this._o.numberOfMonths;
                        }
                    }

                    this.adjustCalendars();
                },

                adjustDate: function adjustDate(sign, days) {

                    var day = this.getDate() || new Date();
                    var difference = parseInt(days) * 24 * 60 * 60 * 1000;

                    var newDay;

                    if (sign === 'add') {
                        newDay = new Date(day.valueOf() + difference);
                    } else if (sign === 'subtract') {
                        newDay = new Date(day.valueOf() - difference);
                    }

                    this.setDate(newDay);
                },

                adjustCalendars: function adjustCalendars() {
                    this.calendars[0] = adjustCalendar(this.calendars[0]);
                    for (var c = 1; c < this._o.numberOfMonths; c++) {
                        this.calendars[c] = adjustCalendar({
                            month: this.calendars[0].month + c,
                            year: this.calendars[0].year
                        });
                    }
                    this.draw();
                },

                gotoToday: function gotoToday() {
                    this.gotoDate(new Date());
                },

                /**
                 * change view to a specific month (zero-index, e.g. 0: January)
                 */
                gotoMonth: function gotoMonth(month) {
                    if (!isNaN(month)) {
                        this.calendars[0].month = parseInt(month, 10);
                        this.adjustCalendars();
                    }
                },

                nextMonth: function nextMonth() {
                    this.calendars[0].month++;
                    this.adjustCalendars();
                },

                prevMonth: function prevMonth() {
                    this.calendars[0].month--;
                    this.adjustCalendars();
                },

                /**
                 * change view to a specific full year (e.g. "2012")
                 */
                gotoYear: function gotoYear(year) {
                    if (!isNaN(year)) {
                        this.calendars[0].year = parseInt(year, 10);
                        this.adjustCalendars();
                    }
                },

                /**
                 * change the minDate
                 */
                setMinDate: function setMinDate(value) {
                    if (value instanceof Date) {
                        setToStartOfDay(value);
                        this._o.minDate = value;
                        this._o.minYear = value.getFullYear();
                        this._o.minMonth = value.getMonth();
                    } else {
                        this._o.minDate = defaults$$1.minDate;
                        this._o.minYear = defaults$$1.minYear;
                        this._o.minMonth = defaults$$1.minMonth;
                        this._o.startRange = defaults$$1.startRange;
                    }

                    this.draw();
                },

                /**
                 * change the maxDate
                 */
                setMaxDate: function setMaxDate(value) {
                    if (value instanceof Date) {
                        setToStartOfDay(value);
                        this._o.maxDate = value;
                        this._o.maxYear = value.getFullYear();
                        this._o.maxMonth = value.getMonth();
                    } else {
                        this._o.maxDate = defaults$$1.maxDate;
                        this._o.maxYear = defaults$$1.maxYear;
                        this._o.maxMonth = defaults$$1.maxMonth;
                        this._o.endRange = defaults$$1.endRange;
                    }

                    this.draw();
                },

                setStartRange: function setStartRange(value) {
                    this._o.startRange = value;
                },

                setEndRange: function setEndRange(value) {
                    this._o.endRange = value;
                },

                /**
                 * refresh the HTML
                 */
                draw: function draw(force) {
                    if (!this._v && !force) {
                        return;
                    }
                    var opts = this._o,
                        minYear = opts.minYear,
                        maxYear = opts.maxYear,
                        minMonth = opts.minMonth,
                        maxMonth = opts.maxMonth,
                        html = '',
                        randId;

                    if (this._y <= minYear) {
                        this._y = minYear;
                        if (!isNaN(minMonth) && this._m < minMonth) {
                            this._m = minMonth;
                        }
                    }
                    if (this._y >= maxYear) {
                        this._y = maxYear;
                        if (!isNaN(maxMonth) && this._m > maxMonth) {
                            this._m = maxMonth;
                        }
                    }

                    randId = 'pika-title-' + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 2);

                    for (var c = 0; c < opts.numberOfMonths; c++) {
                        html += '<div class="pika-lendar">' + renderTitle(this, c, this.calendars[c].year, this.calendars[c].month, this.calendars[0].year, randId) + this.render(this.calendars[c].year, this.calendars[c].month, randId) + '</div>';
                    }

                    this.el.innerHTML = html;

                    if (opts.bound) {
                        if (opts.field.type !== 'hidden') {
                            sto(function () {
                                opts.trigger.focus();
                            }, 1);
                        }
                    }

                    if (typeof this._o.onDraw === 'function') {
                        this._o.onDraw(this);
                    }

                    if (opts.bound) {
                        // let the screen reader user know to use arrow keys
                        opts.field.setAttribute('aria-label', 'Use the arrow keys to pick a date');
                    }
                },

                adjustPosition: function adjustPosition() {
                    var field, pEl, width, height, viewportWidth, viewportHeight, scrollTop, left, top, clientRect;

                    if (this._o.container) return;

                    this.el.style.position = 'absolute';

                    field = this._o.trigger;
                    pEl = field;
                    width = this.el.offsetWidth;
                    height = this.el.offsetHeight;
                    viewportWidth = window.innerWidth || document.documentElement.clientWidth;
                    viewportHeight = window.innerHeight || document.documentElement.clientHeight;
                    scrollTop = window.pageYOffset || document.body.scrollTop || document.documentElement.scrollTop;

                    if (typeof field.getBoundingClientRect === 'function') {
                        clientRect = field.getBoundingClientRect();
                        left = clientRect.left + window.pageXOffset;
                        top = clientRect.bottom + window.pageYOffset;
                    } else {
                        left = pEl.offsetLeft;
                        top = pEl.offsetTop + pEl.offsetHeight;
                        while (pEl = pEl.offsetParent) {
                            left += pEl.offsetLeft;
                            top += pEl.offsetTop;
                        }
                    }

                    // default position is bottom & left
                    if (this._o.reposition && left + width > viewportWidth || this._o.position.indexOf('right') > -1 && left - width + field.offsetWidth > 0) {
                        left = left - width + field.offsetWidth;
                    }
                    if (this._o.reposition && top + height > viewportHeight + scrollTop || this._o.position.indexOf('top') > -1 && top - height - field.offsetHeight > 0) {
                        top = top - height - field.offsetHeight;
                    }

                    this.el.style.left = left + 'px';
                    this.el.style.top = top + 'px';
                },

                /**
                 * render HTML for a particular month
                 */
                render: function render(year, month, randId) {
                    var opts = this._o,
                        now = new Date(),
                        days = getDaysInMonth(year, month),
                        before = new Date(year, month, 1).getDay(),
                        data = [],
                        row = [];
                    setToStartOfDay(now);
                    if (opts.firstDay > 0) {
                        before -= opts.firstDay;
                        if (before < 0) {
                            before += 7;
                        }
                    }
                    var previousMonth = month === 0 ? 11 : month - 1,
                        nextMonth = month === 11 ? 0 : month + 1,
                        yearOfPreviousMonth = month === 0 ? year - 1 : year,
                        yearOfNextMonth = month === 11 ? year + 1 : year,
                        daysInPreviousMonth = getDaysInMonth(yearOfPreviousMonth, previousMonth);
                    var cells = days + before,
                        after = cells;
                    while (after > 7) {
                        after -= 7;
                    }
                    cells += 7 - after;
                    var isWeekSelected = false;
                    for (var i = 0, r = 0; i < cells; i++) {
                        var day = new Date(year, month, 1 + (i - before)),
                            isSelected = isDate(this._d) ? compareDates(day, this._d) : false,
                            isToday = compareDates(day, now),
                            hasEvent = opts.events.indexOf(day.toDateString()) !== -1 ? true : false,
                            isEmpty = i < before || i >= days + before,
                            dayNumber = 1 + (i - before),
                            monthNumber = month,
                            yearNumber = year,
                            isStartRange = opts.startRange && compareDates(opts.startRange, day),
                            isEndRange = opts.endRange && compareDates(opts.endRange, day),
                            isInRange = opts.startRange && opts.endRange && opts.startRange < day && day < opts.endRange,
                            isDisabled = opts.minDate && day < opts.minDate || opts.maxDate && day > opts.maxDate || opts.disableWeekends && isWeekend(day) || opts.disableDayFn && opts.disableDayFn(day);

                        if (isEmpty) {
                            if (i < before) {
                                dayNumber = daysInPreviousMonth + dayNumber;
                                monthNumber = previousMonth;
                                yearNumber = yearOfPreviousMonth;
                            } else {
                                dayNumber = dayNumber - days;
                                monthNumber = nextMonth;
                                yearNumber = yearOfNextMonth;
                            }
                        }

                        var dayConfig = {
                            day: dayNumber,
                            month: monthNumber,
                            year: yearNumber,
                            hasEvent: hasEvent,
                            isSelected: isSelected,
                            isToday: isToday,
                            isDisabled: isDisabled,
                            isEmpty: isEmpty,
                            isStartRange: isStartRange,
                            isEndRange: isEndRange,
                            isInRange: isInRange,
                            showDaysInNextAndPreviousMonths: opts.showDaysInNextAndPreviousMonths,
                            enableSelectionDaysInNextAndPreviousMonths: opts.enableSelectionDaysInNextAndPreviousMonths
                        };

                        if (opts.pickWholeWeek && isSelected) {
                            isWeekSelected = true;
                        }

                        row.push(renderDay(dayConfig));

                        if (++r === 7) {
                            if (opts.showWeekNumber) {
                                row.unshift(renderWeek(i - before, month, year));
                            }
                            data.push(renderRow(row, opts.isRTL, opts.pickWholeWeek, isWeekSelected));
                            row = [];
                            r = 0;
                            isWeekSelected = false;
                        }
                    }
                    return renderTable(opts, data, randId);
                },

                isVisible: function isVisible() {
                    return this._v;
                },

                show: function show() {
                    if (!this.isVisible()) {
                        this._v = true;
                        this.draw();
                        removeClass(this.el, 'is-hidden');
                        if (this._o.bound) {
                            addEvent(document, 'click', this._onClick);
                            this.adjustPosition();
                        }
                        if (typeof this._o.onOpen === 'function') {
                            this._o.onOpen.call(this);
                        }
                    }
                },

                hide: function hide() {
                    var v = this._v;
                    if (v !== false) {
                        if (this._o.bound) {
                            removeEvent(document, 'click', this._onClick);
                        }
                        this.el.style.position = 'static'; // reset
                        this.el.style.left = 'auto';
                        this.el.style.top = 'auto';
                        addClass(this.el, 'is-hidden');
                        this._v = false;
                        if (v !== undefined && typeof this._o.onClose === 'function') {
                            this._o.onClose.call(this);
                        }
                    }
                },

                /**
                 * GAME OVER
                 */
                destroy: function destroy() {
                    var opts = this._o;

                    this.hide();
                    removeEvent(this.el, 'mousedown', this._onMouseDown, true);
                    removeEvent(this.el, 'touchend', this._onMouseDown, true);
                    removeEvent(this.el, 'change', this._onChange);
                    if (opts.keyboardInput) {
                        removeEvent(document, 'keydown', this._onKeyChange);
                    }
                    if (opts.field) {
                        removeEvent(opts.field, 'change', this._onInputChange);
                        if (opts.bound) {
                            removeEvent(opts.trigger, 'click', this._onInputClick);
                            removeEvent(opts.trigger, 'focus', this._onInputFocus);
                            removeEvent(opts.trigger, 'blur', this._onInputBlur);
                        }
                    }
                    if (this.el.parentNode) {
                        this.el.parentNode.removeChild(this.el);
                    }
                }

            };

            return Pikaday;
        });
    });

    var T$2 = Translations$1;

    T$2.addText('rus', {
      period: {
        title: 'Период',
        from: 'с',
        to: 'по',
        annually: 'Данные за каждый год'
      },
      clouds: 'Облачность, %',
      angle: 'Угол съемки, °',
      resolution: {
        title: 'Детальность, м/пкс',
        unit: 'м/пкс'
      },
      satellites: 'Спутники',
      archive: {
        title: 'Архив',
        local: 'внутренний',
        global: 'глобальный',
        all: 'весь'
      },
      stereo: 'только стерео',
      maximize: 'Показать',
      minimize: 'Свернуть'
    });

    T$2.addText('eng', {
      period: {
        title: 'Period',
        from: 'from',
        to: 'to',
        annually: 'annually'
      },
      clouds: 'Cloudiness, %',
      angle: 'View angle, °',
      resolution: {
        title: 'Resolution, m/px',
        unit: 'm/px'
      },
      satellites: 'Satellites',
      archive: {
        title: 'Archive',
        local: 'local',
        global: 'global',
        all: 'all'
      },
      stereo: 'stereo only',
      maximize: 'Maximize',
      minimize: 'Minimize'
    });

    var SearchOptions = function (_EventTarget) {
      inherits(SearchOptions, _EventTarget);

      function SearchOptions(container, _ref) {
        var restricted = _ref.restricted;
        classCallCheck(this, SearchOptions);

        var _this = possibleConstructorReturn(this, (SearchOptions.__proto__ || Object.getPrototypeOf(SearchOptions)).call(this));

        _this._container = container;
        _this._container.classList.add('search-options');
        _this._content = _this._container;
        _this._content.innerHTML = '<div class="no-select search-options-fixed-section">\n      <div class="search-options-period-title">' + T$2.getText('period.title') + '</div>\n      <div class="search-options-period-section">\n        <div class="search-options-period">\n          <div class="search-options-period-from">' + T$2.getText('period.from') + '</div>\n          <input class="search-options-period-from-value" type="text"/>      \n          <div class="search-options-period-to">' + T$2.getText('period.to') + '</div>\n          <input class="search-options-period-to-value" type="text" />\n        </div>\n        <div class="search-options-period-annually">\n          <input id="period_annually" class="search-options-period-annually-value" type="checkbox" />\n          <label for="period_annually" class="search-options-period-annually-title">' + T$2.getText('period.annually') + '</label>\n        </div>    \n      </div>\n      <div class="search-options-clouds">      \n        <div class="search-options-clouds-title">' + T$2.getText('clouds') + '</div>\n        <div class="search-options-clouds-value"></div>      \n      </div>    \n      <div class="search-options-angle">      \n        <div class="search-options-angle-title">' + T$2.getText('angle') + '</div>\n        <div class="search-options-angle-value"></div>      \n      </div>\n      <div class="search-options-resolution">      \n        <div class="search-options-resolution-title">' + T$2.getText('resolution.title') + '</div>\n        <div class="search-options-resolution-value"></div>      \n      </div>    \n      <div class="search-options-satellites-number-section">\n        <div class="search-options-satellites-title">' + T$2.getText('satellites') + '</div>\n        <div class="search-options-satellites-number"></div>\n        <div class="search-options-satellites-archive">\n            <!-- label class="search-options-satellites-archive-title">' + T$2.getText('archive.title') + '</label -->\n            <select>\n                <option value="global">' + T$2.getText('archive.global') + '</option>\n                <option value="local">' + T$2.getText('archive.local') + '</option>\n                <option value="all">' + T$2.getText('archive.all') + '</option>\n            </select>\n            <!-- input id="satellite_stereo" type="checkbox" value="stereo" / -->\n            <!-- label for="satellite_stereo">' + T$2.getText('stereo') + '</label -->\n        </div>\n      </div>\n    </div>\n    <div class="no-select search-options-satellites"></div>';

        _this._content.classList.add('search-options-content');
        _this._satellitesContainer = _this._container.querySelector('.search-options-satellites');
        _this._initDatePickers();
        _this._initAnnually();
        _this._initSliders();
        _this._initSatellites(restricted);
        _this._initArchive(restricted);
        _this._stopPropagation = _this._stopPropagation.bind(_this);
        _this._container.addEventListener('click', _this._stopPropagation);
        // this._container.addEventListener('mousemove', this._stopPropagation);
        return _this;
      }

      createClass(SearchOptions, [{
        key: '_stopPropagation',
        value: function _stopPropagation(e) {
          e.stopPropagation();
        }
      }, {
        key: '_initAnnually',
        value: function _initAnnually() {
          this._annually = this._container.querySelector('.search-options-period-annually-value');
        }
      }, {
        key: '_initDatePickers',
        value: function _initDatePickers() {
          this._dateFormat = 'dd.mm.yy';
          var i18n = {
            previousMonth: 'Предыдущий месяц',
            nextMonth: 'Следующий месяц',
            months: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],
            weekdays: ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'],
            weekdaysShort: ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб']
          };
          switch (T$2.getLanguage()) {
            default:
            case 'rus':
              moment.locale('ru');
              break;
            case 'eng':
              moment.locale('en');
              i18n = {
                previousMonth: 'Previous Month',
                nextMonth: 'Next Month',
                months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                weekdays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
                weekdaysShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
              };
              break;
          }

          var endDate = new Date();
          var startDate = new Date(endDate.getFullYear(), 0, 1);

          this._startDate = new pikaday({
            field: this._container.querySelector('.search-options-period-from-value'),
            // format: 'L', 
            format: 'DD.MM.YYYY',
            yearRange: 20,
            i18n: i18n,
            keyboardInput: false,
            blurFieldOnSelect: false
          });

          this._endDate = new pikaday({
            field: this._container.querySelector('.search-options-period-to-value'),
            // format: 'L', 
            format: 'DD.MM.YYYY',
            yearRange: 20,
            i18n: i18n,
            keyboardInput: false,
            blurFieldOnSelect: false
          });
        }
      }, {
        key: '_initArchive',
        value: function _initArchive(restricted) {
          this._archive = this._container.querySelector('.search-options-satellites-archive select');
          this._archive.style.display = restricted ? 'block' : 'none';
          if (!restricted) {
            this._archive.value = 'global';
          }
        }
      }, {
        key: '_initSliders',
        value: function _initSliders() {
          var _this2 = this;

          this._cloudSlider = new RangeWidget(this._container.querySelector('.search-options-clouds-value'), { min: 0, max: 100 });
          this._cloudSlider.values = [0, 100];

          this._angleSlider = new RangeWidget(this._container.querySelector('.search-options-angle-value'), { min: 0, max: 60 });
          this._angleSlider.values = [0, 60];

          this._resolutionSlider = new RangeWidget(this._container.querySelector('.search-options-resolution-value'), { min: 0.3, max: 20, mode: 'float' });
          this._resolutionSlider.values = [0.3, 20];
          this._resolutionSlider.addEventListener('change', function (e) {
            _this2._satellites.range = e.detail;
          });
        }
      }, {
        key: '_initSatellites',
        value: function _initSatellites(restricted) {
          var _this3 = this;

          this._satelliteNumber = this._container.querySelector('.search-options-satellites-number');
          this._satellites = new Satellites(this._satellitesContainer, { restricted: restricted });
          this._satellites.addEventListener('change', function (e) {
            _this3._updateResolution();
            _this3._updateSatelliteNumber();

            var event = document.createEvent('Event');
            event.initEvent('change', false, false);
            _this3.dispatchEvent(event);
          });
        }
      }, {
        key: '_updateResolution',
        value: function _updateResolution() {
          var range = this._satellites.range;
          var values = this._resolutionSlider.values;
          if (range.length === 2) {
            var _range = slicedToArray(range, 2),
                lo = _range[0],
                hi = _range[1];

            var _values = slicedToArray(values, 2),
                min = _values[0],
                max = _values[1];

            this._resolutionSlider.values = [min > lo ? lo : min, max < hi ? hi : max];
          } else {
            this._resolutionSlider.values = values;
          }
        }
      }, {
        key: '_satellitesVisible',
        value: function _satellitesVisible() {
          return this._satellitesContainer.style.display == 'block';
        }
      }, {
        key: 'showSatellites',
        value: function showSatellites() {
          this._satellitesContainer.style.display = 'block';
        }
      }, {
        key: 'hideSatellites',
        value: function hideSatellites() {
          this._satellitesContainer.style.display = 'none';
        }
      }, {
        key: '_setSliderValues',
        value: function _setSliderValues(values, updateSatellitesSelection) {
          this._resolutionSlider.values = values;
          this._handleResolutionsSliderMove(values, updateSatellitesSelection);
        }
      }, {
        key: '_updateSatelliteNumber',
        value: function _updateSatelliteNumber() {
          this._satelliteNumber.innerText = this._satellites.count;
        }
      }, {
        key: '_handleSearch',
        value: function _handleSearch() {

          var event = document.createEvent('Event');
          event.initEvent('search', false, false);
          event.detail = {
            date: [this._startDate.getDate(), this._endDate.getDate()],
            annually: this._annually.checked,
            clouds: this._cloudSlider.values,
            angle: this._angleSlider.values,
            satellites: this._satellites.items
          };
          this.dispatchEvent(event);
        }
      }, {
        key: 'resize',
        value: function resize(total) {
          var height = this._container.querySelector('.search-options-fixed-section').getBoundingClientRect().height;
          this._container.querySelector('.search-options-satellites').style.maxHeight = total - height - 33 + 'px';
        }
      }, {
        key: 'refresh',
        value: function refresh() {
          this.criteria = this.criteria;
        }
      }, {
        key: 'criteria',
        set: function set$$1(_ref2) {
          var _ref2$date = slicedToArray(_ref2.date, 2),
              _ref2$date$ = _ref2$date[0],
              startDate = _ref2$date$ === undefined ? new Date() : _ref2$date$,
              _ref2$date$2 = _ref2$date[1],
              endDate = _ref2$date$2 === undefined ? new Date() : _ref2$date$2,
              _ref2$annually = _ref2.annually,
              annually = _ref2$annually === undefined ? false : _ref2$annually,
              _ref2$clouds = slicedToArray(_ref2.clouds, 2),
              _ref2$clouds$ = _ref2$clouds[0],
              minClouds = _ref2$clouds$ === undefined ? 0 : _ref2$clouds$,
              _ref2$clouds$2 = _ref2$clouds[1],
              maxClouds = _ref2$clouds$2 === undefined ? 100 : _ref2$clouds$2,
              _ref2$angle = slicedToArray(_ref2.angle, 2),
              _ref2$angle$ = _ref2$angle[0],
              minAngle = _ref2$angle$ === undefined ? 0 : _ref2$angle$,
              _ref2$angle$2 = _ref2$angle[1],
              maxAngle = _ref2$angle$2 === undefined ? 60 : _ref2$angle$2,
              _ref2$satellites = _ref2.satellites,
              satellites = _ref2$satellites === undefined ? {} : _ref2$satellites,
              _ref2$stereo = _ref2.stereo;

          this._startDate.setDate(startDate);
          this._endDate.setDate(endDate);
          this._annually.checked = annually;
          // this._stereo.checked = stereo;

          this._cloudSlider.values = [minClouds, maxClouds];
          this._angleSlider.values = [minAngle, maxAngle];

          this._satellites.data = satellites;
          this._updateResolution();
          this._updateSatelliteNumber();
        },
        get: function get$$1() {
          return {
            date: [this._startDate.getDate(), this._endDate.getDate()],
            annually: this._annually.checked,
            clouds: this._cloudSlider.values,
            angle: this._angleSlider.values,
            satellites: this._satellites.data,
            stereo: false,
            archive: this._archive.value
          };
        }
      }, {
        key: 'selected',
        get: function get$$1() {
          return this._satellites._ms.some(function (x) {
            return x.checked;
          }) || this._satellites._pc.some(function (x) {
            return x.checked;
          });
        }
      }]);
      return SearchOptions;
    }(EventTarget);

    var T$3 = Translations$1;

    T$3.addText('rus', {
        quicklook: 'Открыть квиклук'
    });
    T$3.addText('eng', {
        quicklook: 'Open quicklook'
    });

    var ImageDetails = function (_EventTarget) {
        inherits(ImageDetails, _EventTarget);

        function ImageDetails(container, _ref) {
            var left = _ref.left,
                top = _ref.top;
            classCallCheck(this, ImageDetails);

            var _this = possibleConstructorReturn(this, (ImageDetails.__proto__ || Object.getPrototypeOf(ImageDetails)).call(this));

            _this._container = container;
            _this._container.classList.add('image-info');
            _this.stopPropagation = _this.stopPropagation.bind(_this);
            _this._container.addEventListener('click', _this.stopPropagation);
            _this._left = left;
            _this._top = top;
            _this.hide();
            return _this;
        }

        createClass(ImageDetails, [{
            key: 'stopPropagation',
            value: function stopPropagation(e) {
                e.stopPropagation();
            }
        }, {
            key: 'show',
            value: function show() {
                var _this2 = this;

                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { left: this._left, top: this._top };
                var left = options.left,
                    top = options.top;

                var header = document.body.querySelector('#header').getBoundingClientRect();
                var body = document.body.getBoundingClientRect();
                var above_top = function above_top(value) {
                    return top < header.top + header.height;
                };
                var below_bottom = function below_bottom(value) {
                    return top + _this2._height > body.height - header.height;
                };
                this._container.style.left = left + 'px';
                if (above_top(top)) {
                    this._container.style.top = top + this._height + 'px';
                } else {
                    this._container.style.top = top + 'px';
                }

                if (below_bottom(top)) {
                    this._container.style.top = top - this._height + 'px';
                } else {
                    this._container.style.top = top + 'px';
                }
                this._container.style.visibility = 'visible';
                if (this.button) {
                    this.button.classList.add('search-info-off');
                    this.button.classList.remove('search-info-on');
                }

                // this.dispatchEvent(new CustomEvent('show', {
                //     detail: {item: this._item, button: this.button},
                // }));

                var event = document.createEvent('Event');
                event.initEvent('show', false, false);
                event.detail = { item: this._item, button: this.button };
                this.dispatchEvent(event);
            }
        }, {
            key: 'hide',
            value: function hide() {
                this._container.style.visibility = 'hidden';
                if (this.button) {
                    this.button.classList.remove('search-info-off');
                    this.button.classList.add('search-info-on');
                }

                // this.dispatchEvent(new CustomEvent('hide', {
                //     detail: {item: this._item, button: this.button},
                // }));

                var event = document.createEvent('Event');
                event.initEvent('hide', false, false);
                event.detail = { item: this._item, button: this.button };
                this.dispatchEvent(event);
            }
        }, {
            key: 'item',
            set: function set$$1(value) {
                this._item = value;
                this._container.innerHTML = '<table>\n            <tbody>\n                <tr>\n                    <td class="image-info-id-label">ID:</td>\n                    <td class="image-info-id-value">' + this._item.sceneid + '</td>\n                </tr>\n                <tr>                    \n                    <td class="image-info-id-label" colspan="2">\n                        <a href="' + this._item.url + '" target="_blank">' + T$3.getText('quicklook') + '</a>\n                    </td>\n                </tr>\n            </tbody>\n        </table>';
            },
            get: function get$$1() {
                return this._item;
            }
        }, {
            key: 'visible',
            get: function get$$1() {
                return this._container.style.visibility === 'visible';
            }
        }]);
        return ImageDetails;
    }(EventTarget);

    var ENUM_ID = typeof Symbol === 'function' ? Symbol('enumeration id') : 1e+6;

    var create_index = function create_index(items, indexBy) {
        return items.reduce(function (a, item) {
            if (indexBy) {
                if (Array.isArray(indexBy) && indexBy.length > 0 && indexBy.every(function (k) {
                    return item.hasOwnProperty(k);
                })) {
                    var values = indexBy.map(function (k) {
                        return item[k];
                    });
                    var idx = get_hash(values);
                    if (idx) {
                        a[idx] = item;
                    }
                } else if (typeof indexBy === 'string' && item.hasOwnProperty(indexBy)) {
                    var _idx = item[indexBy];
                    if (_idx) {
                        a[_idx] = item;
                    }
                }
            } else {
                item[ENUM_ID] = (0 | Math.random() * 9e+6).toString(36);
                a[ENUM_ID] = item;
            }
            return a;
        }, {});
    };

    var get_hash = function get_hash(values) {
        if (Array.isArray(values) && values.length > 0) {
            return btoa(values.join(''));
        } else if (typeof values === 'string') {
            return btoa(values);
        } else {
            return null;
        }
    };

    var serialize = function serialize(obj) {
        return Object.keys(obj).map(function (k) {
            return obj[k];
        });
    };

    var sort = function sort(items, field, asc) {
        if (field) {
            return items.map(function (e, i) {
                return { i: i, v: e };
            }).sort(function (a, b) {
                var left = a.v[field],
                    right = b.v[field];

                if (left == null && right != null) {
                    return asc ? -1 : 1;
                }

                if (left != null && right == null) {
                    return asc ? 1 : -1;
                }

                if (typeof left == 'string') {
                    left = left.toLowerCase();
                }

                if (typeof right == 'string') {
                    right = right.toLowerCase();
                }

                if (left < right) {
                    return asc ? -1 : 1;
                } else if (left > right) {
                    return asc ? 1 : -1;
                } else if (left == right) {
                    var i = a.index,
                        k = b.index;
                    if (i < k) {
                        return asc ? -1 : 1;
                    } else if (i > k) {
                        return asc ? 1 : -1;
                    } else {
                        return 0;
                    }
                }
            }).map(function (e) {
                return e.v;
            });
        } else {
            return items;
        }
    };

    var DataGrid = function (_EventTarget) {
        inherits(DataGrid, _EventTarget);

        function DataGrid(container, _ref) {
            var _ref$hasHeader = _ref.hasHeader,
                _ref$align = _ref.align,
                align = _ref$align === undefined ? true : _ref$align,
                _ref$fields = _ref.fields,
                fields = _ref$fields === undefined ? {} : _ref$fields,
                _ref$sortBy = _ref.sortBy,
                sortBy = _ref$sortBy === undefined ? {} : _ref$sortBy,
                _ref$filter = _ref.filter,
                filter = _ref$filter === undefined ? null : _ref$filter,
                _ref$adjustMode = _ref.adjustMode,
                adjustMode = _ref$adjustMode === undefined ? 'auto' : _ref$adjustMode,
                indexBy = _ref.indexBy;
            classCallCheck(this, DataGrid);

            var _this = possibleConstructorReturn(this, (DataGrid.__proto__ || Object.getPrototypeOf(DataGrid)).call(this));

            _this._container = container;
            _this._container.classList.add('table-list');
            _this._fields = fields;
            _this._stats = {};
            _this._align = align;
            _this._sortBy = sortBy;
            _this._filter = filter;
            _this._filtered = false;
            _this._adjustMode = adjustMode;
            _this._indexBy = indexBy;
            _this._index = {};

            _this._header = document.createElement('div');
            _this._header.className = 'table-list-header';
            _this._container.appendChild(_this._header);

            _this._body = document.createElement('div');
            _this._body.className = 'table-list-body';
            _this._container.appendChild(_this._body);
            _this._stopPropagation = _this._stopPropagation.bind(_this);
            return _this;
        }

        createClass(DataGrid, [{
            key: '_stopPropagation',
            value: function _stopPropagation(e) {
                e.stopPropagation();
            }
        }, {
            key: 'getItemByIndex',
            value: function getItemByIndex(id) {
                return this._index[id];
            }
        }, {
            key: 'refresh',
            value: function refresh() {
                var _this2 = this;

                if (this._sortBy.hasOwnProperty('field') && this._sortBy.hasOwnProperty('asc')) {
                    var i = -1;
                    var keys = Object.keys(this._fields);
                    for (var k = 0; k < keys.length; ++k) {
                        if (this._sortBy.field === keys[k]) {
                            i = k;
                            break;
                        }
                    }
                    if (i >= 0) {
                        this._renderHeader();
                        this._reorder(i, this._sortBy.field, this._sortBy.asc);
                        this._attachColumnsEvents();
                    }
                } else {
                    this._render(this.items);
                }
                Object.keys(this._fields).filter(function (k) {
                    return _typeof(_this2._fields[k].tristate) === 'object';
                }).map(function (k) {
                    return _this2._fields[k].tristate;
                }).forEach(function (t) {
                    return t.update();
                });
            }
        }, {
            key: '_getCellAlign',
            value: function _getCellAlign(type) {
                switch (type) {
                    case 'integer':
                    case 'float':
                        return 'right';
                    case 'selector':
                    case 'button':
                    case 'boolean':
                    case 'color':
                        return 'center';
                    default:
                        return 'left';
                }
            }
        }, {
            key: '_renderCell',
            value: function _renderCell(item, col) {
                var field = this._fields[col];
                var width = field.width;
                var align = this._align ? ' style="text-align: ' + (field.align || this._getCellAlign(field.type)) + '"' : '';
                switch (field.type) {
                    case 'selector':
                        return Boolean(item[col]) ? '<td' + align + '><input type="checkbox" checked value="' + col + '" /></td>' : '<td' + align + '><input type="checkbox" value="' + col + '" /></td>';
                    case 'button':
                        return '<td' + align + '><i class="table-list-button ' + field.button + '" /></td>';
                    case 'boolean':
                        var val = typeof field.formatter === 'function' ? field.formatter(item) : item[col];
                        var cell = field.yes || field.no ? '<i class="table-list-button ' + field.icon + ' ' + (val ? field.yes || '' : field.no || '') + '"></i>' : '' + (val ? '+' : '');
                        return '<td' + align + '>' + cell + '</td>';
                    case 'color':
                        return '<td' + align + '>\n                        <div class="table-list-color" style="' + (typeof item[col] !== 'undefined' ? 'border-color: ' + item[col] : 'border: none') + ' ">&nbsp;</div>\n                    </td>';
                    default:
                        if (typeof field.styler === 'function') {
                            return '<td' + align + '><i class="' + field.styler(item) + '"></i></td>';
                        } else {
                            var _val = typeof field.formatter === 'function' ? field.formatter(item) : item[col];
                            return '<td' + align + '><span>' + _val + '</span>' + (field.edit ? '<i class="cell-edit"></i>' : '') + '</td>';
                        }

                }
            }
        }, {
            key: '_attachEvents',
            value: function _attachEvents() {
                var rows = this._body.querySelectorAll('tr');
                for (var i = 0; i < rows.length; ++i) {
                    var row = rows[i];
                    var item = this._index[row.getAttribute('data-item-id')];
                    this._attachRowEvents(row, item);
                }
            }
        }, {
            key: '_attachRowEvents',
            value: function _attachRowEvents(row, item) {
                row.addEventListener('mouseover', this._handleRowMouseOver.bind(this, row, item));
                row.addEventListener('mouseout', this._handleRowMouseOut.bind(this, row, item));
                var cells = row.querySelectorAll('td');
                var fields = Object.keys(this._fields);
                for (var j = 0; j < cells.length; ++j) {
                    var name = fields[j];
                    var field = this._fields[name];
                    var cell = cells[j];
                    if (typeof field.edit === 'string') {
                        var val = cell.querySelector('span');
                        val.addEventListener('click', this._handleCellClick.bind(this, row, val, name, field, item));
                        var btn = cell.querySelector('i');
                        btn.addEventListener('click', this._handleCellEdit.bind(this, row, cell, val, btn, name, field, item));
                    } else {
                        cell.addEventListener('click', this._handleCellClick.bind(this, row, cell, name, field, item));
                    }
                }
            }
        }, {
            key: '_renderRow',
            value: function _renderRow(item) {
                if (typeof this._filter !== 'function' || !this._filtered || this._filter(item)) {
                    var idx = null;
                    if (Array.isArray(this._indexBy) && this._indexBy.length > 0 && this._indexBy.every(function (k) {
                        return item.hasOwnProperty(k);
                    })) {
                        var values = this._indexBy.map(function (k) {
                            return item[k];
                        });
                        idx = get_hash(values);
                    } else if (typeof this._indexBy === 'string' && item.hasOwnProperty(this._indexBy)) {
                        idx = item[this._indexBy];
                    } else {
                        idx = item[ENUM_ID];
                    }
                    return '<tr data-item-id="' + idx + '">' + Object.keys(this._fields).map(this._renderCell.bind(this, item)).join('') + '</tr>';
                }
            }
        }, {
            key: '_render',
            value: function _render(items) {
                this._renderHeader();
                this._renderBody(items);
                this.adjustHeader();
                this._updateSelector();
                this._attachColumnsEvents();
            }
        }, {
            key: '_renderBody',
            value: function _renderBody(items) {
                this._clearEvents();
                if (items.length > 0) {
                    this._body.innerHTML = '<table>\n                    <colgroup>' + Object.keys(this._fields).map(function (x) {
                        return '<col />';
                    }).join('') + '</colgroup>\n                    ' + items.map(this._renderRow.bind(this)).join('') + '\n                </table>';
                    this._attachEvents();
                } else {
                    this._body.innerHTML = '';
                }
            }
        }, {
            key: '_renderHeaderColumn',
            value: function _renderHeaderColumn(col) {
                var field = this._fields[col];
                var el = '';
                switch (field.type) {
                    case 'selector':
                        el = '<input class="table-list-tristate" type="checkbox" />';
                        break;
                    case 'boolean':
                    case 'string':
                        if (typeof field.name === 'string') {
                            el = '<span>' + field.name + '</span>';
                        } else if (typeof field.columnIcon === 'string') {
                            el = '<i class="' + field.columnIcon + '"></i>';
                        }
                        break;
                    case 'button':
                        if (typeof field.columnIcon === 'string') {
                            el = '<i class="' + field.columnIcon + '"></i>';
                        } else if (typeof field.name === 'string') {
                            el = '<span>' + field.name + '</span>';
                        }
                        break;
                    default:
                        if (typeof field.name === 'string') {
                            el = '<span>' + field.name + '</span>';
                        }
                        break;
                }
                return '<td' + (field.tooltip ? ' title="' + field.tooltip + '"' : '') + ' class="table-list-col" data-field="' + col + '">\n            ' + el + '\n            <i class="table-list-sort"' + (field.sortable ? '' : ' style="display: none"') + '></i>\n        </td>';
            }
        }, {
            key: '_attachColumnsEvents',
            value: function _attachColumnsEvents() {
                var _this3 = this;

                if (this.hasItems) {
                    var cols = this._header.querySelectorAll('td');
                    var names = Object.keys(this._fields);

                    var _loop = function _loop(i) {
                        var name = names[i];
                        var field = _this3._fields[name];
                        var col = cols[i];
                        if (field.sortable) {
                            col.addEventListener('click', _this3._handleSort.bind(_this3, i));
                        }
                        if (field.type === 'selector') {
                            var ts = col.querySelector('.table-list-tristate');
                            ts.addEventListener('click', _this3._stopPropagation);
                            var items = _this3._body.querySelectorAll('td:nth-child(' + (i + 1) + ') input[type="checkbox"]');
                            field.tristate = new Tristate(ts, items);
                        }
                        col.addEventListener('click', function (e) {
                            var event = document.createEvent('Event');
                            event.initEvent('column:click', false, false);
                            event.detail = { col: col, field: field, name: name };
                            _this3.dispatchEvent(event);
                        });
                    };

                    for (var i = 0; i < cols.length; ++i) {
                        _loop(i);
                    }
                }
            }
        }, {
            key: '_updateColumns',
            value: function _updateColumns(k, asc) {
                var buttons = this._header.querySelectorAll('.table-list-sort');
                for (var i = 0; i < buttons.length; ++i) {
                    var btn = buttons[i];
                    if (i === k) {
                        if (asc) {
                            btn.classList.remove('table-list-sort-down');
                            btn.classList.add('table-list-sort-up');
                        } else {
                            btn.classList.remove('table-list-sort-up');
                            btn.classList.add('table-list-sort-down');
                        }
                    } else {
                        btn.classList.remove('table-list-sort-up');
                        btn.classList.remove('table-list-sort-down');
                    }
                }
            }
        }, {
            key: '_updateSelector',
            value: function _updateSelector() {
                var cols = this._header.querySelectorAll('td');
                var fields = serialize(this._fields);
                for (var i = 0; i < cols.length; ++i) {
                    var _field = fields[i];
                    if (_field.tristate) {
                        var items = this._body.querySelectorAll('td:nth-child(' + (i + 1) + ') input[type="checkbox"]');
                        _field.tristate.state = items;
                        break;
                    }
                }
            }
        }, {
            key: '_reorder',
            value: function _reorder(i, name, asc) {
                this._updateColumns(i, asc);
                this._renderBody(sort(this.items, name, asc));
                this.adjustHeader();
                this._updateSelector();
            }
        }, {
            key: '_handleSort',
            value: function _handleSort(k) {
                this._sortBy.asc = !this._sortBy.asc;
                this._sortBy.field = Object.keys(this._fields)[k];
                this._reorder(k, this._sortBy.field, this._sortBy.asc);

                var event = document.createEvent('Event');
                event.initEvent('sort', false, false);
                event.detail = { field: this._fields[this._sortBy.field], name: this._sortBy.field, asc: this._sortBy.asc };
                this.dispatchEvent(event);
            }
        }, {
            key: '_renderHeader',
            value: function _renderHeader() {
                this._header.innerHTML = '<table>\n            <colgroup>' + Object.keys(this._fields).map(function (x) {
                    return '<col />';
                }).join('') + '</colgroup>\n            <tr>' + Object.keys(this._fields).map(this._renderHeaderColumn.bind(this)).join('') + '</tr>\n        </table>';
            }
        }, {
            key: 'adjustHeader',
            value: function adjustHeader() {
                if (this.hasItems) {
                    var fields = serialize(this._fields);
                    var widths = [];
                    var hc = this._header.querySelector('colgroup').children;
                    var bc = this._body.querySelector('colgroup').children;
                    if (this._adjustMode === 'auto') {
                        var row = this._body.querySelector('tr');
                        if (row && row.children) {
                            var cells = row.children;
                            var cols = this._header.querySelectorAll('td');
                            for (var i = 0; i < cells.length; ++i) {
                                var c = cells[i].getBoundingClientRect();
                                var h = cols[i].getBoundingClientRect();
                                widths.push(Math.max(c.width, h.width));
                            }
                            for (var _i = 0; _i < hc.length; ++_i) {
                                var w = widths[_i] + 'px';
                                hc[_i].style.width = w;
                                bc[_i].style.width = w;
                            }
                        }
                    } else {
                        for (var _i2 = 0; _i2 < hc.length; ++_i2) {
                            var _w = fields[_i2].width + 'px';
                            hc[_i2].style.width = _w;
                            bc[_i2].style.width = _w;
                        }
                    }
                }
            }
        }, {
            key: '_clearEvents',
            value: function _clearEvents() {
                var rows = this._container.querySelectorAll('tr');
                for (var i = 0; i < rows.length; ++i) {
                    var row = rows[i];
                    row.removeEventListener('mouseover', this._handleRowMouseOver);
                    row.removeEventListener('mouseout', this._handleRowMouseOut);
                    this._clearRowEvents(row);
                }
            }
        }, {
            key: '_clearRowEvents',
            value: function _clearRowEvents(row) {
                var cells = row.querySelectorAll('td');
                for (var i = 0; i < cells.length; ++i) {
                    cells[i].removeEventListener('click', this._handleCellClick);
                }
            }
        }, {
            key: '_handleCellClick',
            value: function _handleCellClick(row, cell, name, field, item, e) {

                var event = document.createEvent('Event');
                event.initEvent('cell:click', false, false);
                event.detail = { row: row, cell: cell, name: name, field: field, item: item };
                this.dispatchEvent(event);

                e.stopPropagation();
            }
        }, {
            key: '_handleRowMouseOver',
            value: function _handleRowMouseOver(row, item, e) {
                var _this4 = this;

                var cells = row.querySelectorAll('td');
                Object.keys(this._fields).map(function (k) {
                    return _this4._fields[k];
                }).forEach(function (x, j) {
                    if (typeof x.edit === 'string') {
                        var cell = cells[j];
                        if (!cell.querySelector('input')) {
                            cell.querySelector('i').classList.add(x.edit);
                        }
                    }
                });
                var event = document.createEvent('Event');
                event.initEvent('row:mouseover', false, false);
                event.detail = { row: row, item: item };
                this.dispatchEvent(event);

                e.stopPropagation();
            }
        }, {
            key: '_handleRowMouseOut',
            value: function _handleRowMouseOut(row, item, e) {
                var _this5 = this;

                var cells = row.querySelectorAll('td');
                Object.keys(this._fields).map(function (k) {
                    return _this5._fields[k];
                }).forEach(function (x, j) {
                    if (typeof x.edit === 'string') {
                        cells[j].querySelector('i').classList.remove(x.edit);
                    }
                });

                var event = document.createEvent('Event');
                event.initEvent('row:mouseout', false, false);
                event.detail = { row: row, item: item };
                this.dispatchEvent(event);

                e.stopPropagation();
            }
        }, {
            key: '_handleCellEdit',
            value: function _handleCellEdit(row, cell, val, btn, name, field, item) {
                var _this6 = this;

                var input = document.createElement('input');
                input.className = 'cell-edit-input';
                input.type = 'text';
                input.value = cell.innerText;
                input.style.width = '100%';
                val.style.display = 'none';
                btn.classList.remove(field.edit);
                var detach = function detach() {
                    document.body.removeEventListener('click', change);
                    input.removeEventListener('keydown', handler);
                    // input.removeEventListener('blur', change);
                    input.removeEventListener('focus', _this6._stopPropagation);
                    input.removeEventListener('click', _this6._stopPropagation);
                    cell.removeChild(input);

                    _this6.adjustHeader();

                    var event = document.createEvent('Event');
                    event.initEvent('cell:edit', false, false);
                    event.detail = { row: row, cell: cell, name: name, field: field, item: item };
                    _this6.dispatchEvent(event);
                };
                var change = function change() {
                    val.innerText = input.value;
                    item[name] = val.innerText;
                    val.style.display = 'inline-block';
                    detach();
                };
                var revert = function revert() {
                    val.innerText = item[name];
                    val.style.display = 'inline-block';
                    detach();
                };
                var handler = function handler(e) {
                    switch (e.keyCode) {
                        case 13:
                            change();
                            break;
                        case 27:
                            revert();
                            break;
                        default:
                            break;
                    }
                };
                document.body.addEventListener('click', change);
                input.addEventListener('focus', this._stopPropagation);
                input.addEventListener('keydown', handler);
                input.addEventListener('click', this._stopPropagation);
                cell.insertBefore(input, val);
                input.focus();
                input.select();
                // input.addEventListener('blur', change);
            }
        }, {
            key: 'getRow',
            value: function getRow(id) {
                var items = this._body.querySelectorAll('[data-item-id]');
                for (var i = 0; i < items.length; ++i) {
                    var item = items[i];
                    if (item.getAttribute('data-item-id') === id.toString()) {
                        return item;
                    }
                }
                return null;
            }
        }, {
            key: 'getCol',
            value: function getCol(name) {
                var items = this._header.querySelectorAll('[data-field]');
                for (var i = 0; i < items.length; ++i) {
                    var item = items[i];
                    if (item.getAttribute('data-field') === name) {
                        return item;
                    }
                }
                return null;
            }
        }, {
            key: 'scrollToRow',
            value: function scrollToRow(id) {
                var rows = this._body.querySelectorAll('[data-item-id]');
                for (var i = 0; i < rows.length; ++i) {
                    var row = rows[i];
                    if (row.getAttribute('data-item-id') === id.toString()) {
                        var _row$getBoundingClien = row.getBoundingClientRect(),
                            height = _row$getBoundingClien.height;

                        this._body.scrollTop = i * height;
                        break;
                    }
                }
            }
        }, {
            key: 'redrawRow',
            value: function redrawRow(id, item) {
                var row = this.getRow(id);
                this._index[id] = item;
                if (row) {
                    this._clearRowEvents(row);
                    row.insertAdjacentHTML('afterend', this._renderRow(item));
                    row.parentElement.removeChild(row);
                    this._attachRowEvents(this.getRow(id), item);
                    this._updateSelector();
                }
            }
        }, {
            key: 'items',
            set: function set$$1(value) {
                if (Array.isArray(value) && value.length > 0) {
                    this._index = create_index(value, this._indexBy);
                    if (this._sortBy.hasOwnProperty('field') && this._sortBy.hasOwnProperty('asc')) {
                        var i = -1;
                        var keys = Object.keys(this._fields);
                        for (var k = 0; k < keys.length; ++k) {
                            if (this._sortBy.field === keys[k]) {
                                i = k;
                                break;
                            }
                        }
                        if (i >= 0) {
                            this._renderHeader();
                            this._reorder(i, this._sortBy.field, this._sortBy.asc);
                            this._attachColumnsEvents();
                        }
                    } else {
                        this._render(this.items);
                    }
                } else {
                    this._index = {};
                    this._render(this.items);
                }
            },
            get: function get$$1() {
                return sort(serialize(this._index), this._sortBy.field, this._sortBy.asc);
            }
        }, {
            key: 'hasItems',
            get: function get$$1() {
                return Object.keys(this._index).length > 0;
            }
        }, {
            key: 'filtered',
            get: function get$$1() {
                return this._filtered;
            },
            set: function set$$1(value) {
                this._filtered = value;
                this.refresh();
            }
        }, {
            key: 'filteredItems',
            get: function get$$1() {
                var _this7 = this;

                if (typeof this._filter === 'function' && this.filtered) {
                    return this.items.filter(function (item) {
                        return _this7._filter(item);
                    });
                } else {
                    return this.items;
                }
            }
        }, {
            key: 'filter',
            set: function set$$1(value) {
                this._filter = value;
            }
        }, {
            key: 'count',
            get: function get$$1() {
                var rows = this._body.querySelectorAll('[data-item-id]');
                if (rows && rows.length) {
                    return rows.length;
                } else {
                    return 0;
                }        }
        }]);
        return DataGrid;
    }(EventTarget);

    var stringToArray = function stringToArray(str) {
        var arr = [];
        for (var i = 0; i < str.length; ++i) {
            arr.push(str.charAt(i));
        }
        return arr;
    };

    var pad = function pad(origin, str, width, sym) {
        var s = stringToArray(str);
        for (var i = 0; s.length < width; ++i) {
            if (origin === 'left') {
                s.splice(0, 0, sym);
            } else {
                s.push(sym);
            }
        }
        return s.join('');
    };

    var padLeft = function padLeft(str, sym, width) {
        return pad('left', str, width, sym);
    };

    var hsl2rgb = function hsl2rgb(h, s, l) {
        var q = void 0;
        if (l < 0.5) {
            q = l * (1.0 + s);
        } else if (l >= 0.5) {
            q = l + s - l * s;
        }
        var p = 2.0 * l - q;
        var hk = h / 360;
        var norm = function norm(tc) {
            if (tc < 0) return tc + 1.0;
            if (tc > 1) return tc - 1.0;
            return tc;
        };
        var tr = norm(hk + 1 / 3);
        var tg = norm(hk);
        var tb = norm(hk - 1 / 3);

        var color = function color(tc) {
            if (tc < 1 / 6) {
                return p + (q - p) * 6.0 * tc;
            }
            if (1 / 6 <= tc && tc < 1 / 2) {
                return q;
            }
            if (1 / 2 <= tc && tc < 2 / 3) {
                return p + (q - p) * (2 / 3 - tc) * 6.0;
            }
            return p;
        };

        return {
            r: Math.round(color(tr) * 255),
            g: Math.round(color(tg) * 255),
            b: Math.round(color(tb) * 255)
        };
    };

    var rgb2hsl = function rgb2hsl(R, G, B) {
        var r = R / 255,
            g = G / 255,
            b = B / 255;
        var max = Math.max(r, g, b);
        var min = Math.min(r, g, b);
        var h = void 0;
        if (max == min) {
            h = undefined;
        } else if (max == r && g >= b) {
            h = 60 * (g - b) / (max - min);
        } else if (max == r && g < b) {
            h = 60 * (g - b) / (max - min) + 360;
        } else if (max == g) {
            h = 60 * (b - r) / (max - min) + 120;
        } else if (max == b) {
            h = 60 * (r - g) / (max - min) + 240;
        }
        var l = (max + min) / 2;
        var s = void 0;
        if (l == 0 || max == min) {
            s = 0;
        } else if (0 < l && l <= 0.5) {
            s = (max - min) / (max + min);
        } else if (0.5 < l && l < 1) {
            s = (max - min) / (2 - (max + min));
        }
        return { h: h, s: s, l: l };
    };

    var rgb2hex = function rgb2hex(r, g, b) {
        return '#' + [r, g, b].map(function (x) {
            return padLeft(x.toString(16), '0', 2).toUpperCase();
        }).join('');
    };

    var hex2rgb = function hex2rgb(hex) {
        var _$exec$slice$map = /#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})/gi.exec(hex).slice(1).map(function (x) {
            return parseInt(x, 16);
        }),
            _$exec$slice$map2 = slicedToArray(_$exec$slice$map, 3),
            r = _$exec$slice$map2[0],
            g = _$exec$slice$map2[1],
            b = _$exec$slice$map2[2];

        return { r: r, g: g, b: b };
    };

    var Slider = function (_EventTarget) {
        inherits(Slider, _EventTarget);

        function Slider(container) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            classCallCheck(this, Slider);

            var _this = possibleConstructorReturn(this, (Slider.__proto__ || Object.getPrototypeOf(Slider)).call(this));

            _this._options = options;
            _this._options.orientation = _this._options.orientation || 'horizontal';
            _this._container = container;
            _this._container.classList.add('slider');
            _this._container.classList.add('noselect');
            _this._container.innerHTML = '<div class="slider-bar">\n                <div class="slider-tick">\n                    <div class="slider-tip">00</div>\n                </div>\n            </div>';
            _this._bar = _this._container.querySelector('.slider-bar');
            _this._tick = _this._container.querySelector('.slider-tick');
            _this._tick.classList.add('noselect');
            _this._tip = _this._container.querySelector('.slider-tip');
            var tickRect = _this._tick.getBoundingClientRect();
            _this._halfWidth = Math.round(tickRect.width / 2);
            _this._halfHeight = Math.round(tickRect.height / 2);
            _this._moving = false;
            switch (_this._options.orientation) {
                default:
                case 'horizontal':
                    _this._tick.style.left = -_this._halfWidth + 'px';
                    _this._startHorizontal = _this._startHorizontal.bind(_this);
                    _this._moveHorizontal = _this._moveHorizontal.bind(_this);
                    _this._clickHorizontal = _this._clickHorizontal.bind(_this);
                    _this._tip.style.top = '-20px';
                    _this._bar.addEventListener('click', _this._clickHorizontal);
                    _this._tick.addEventListener('mousedown', _this._startHorizontal);
                    document.addEventListener('mousemove', _this._moveHorizontal);
                    break;
                case 'vertical':
                    _this._tick.style.top = -_this._halfHeight + 'px';
                    _this._startVertical = _this._startVertical.bind(_this);
                    _this._moveVertical = _this._moveVertical.bind(_this);
                    _this._clickVertical = _this._clickVertical.bind(_this);
                    _this._tip.style.top = '-5px';
                    _this._tip.style.left = '20px';
                    _this._bar.addEventListener('click', _this._clickVertical);
                    _this._tick.addEventListener('mousedown', _this._startVertical);
                    document.addEventListener('mousemove', _this._moveVertical);
                    break;
            }
            _this._stop = _this._stop.bind(_this);
            document.addEventListener('mouseup', _this._stop);

            var containerRect = _this._container.getBoundingClientRect();
            _this._width = containerRect.width;
            _this._height = containerRect.height;
            _this._offset = 0;
            return _this;
        }

        createClass(Slider, [{
            key: '_clickHorizontal',
            value: function _clickHorizontal(e) {
                e.stopPropagation();
                var containerRect = this._container.getBoundingClientRect();
                var x = e.clientX - this._halfWidth - containerRect.left;
                if (x <= -this._halfWidth) {
                    this._tick.style.left = -this._halfWidth + 'px';
                    x = -this._halfWidth;
                } else if (x >= this._width - this._halfWidth) {
                    this._tick.style.left = this._width - this._halfWidth + 'px';
                    x = this._width - this._halfWidth;
                } else {
                    this._tick.style.left = x + 'px';
                }

                var event = document.createEvent('Event');
                event.initEvent('slide', false, false);
                event.detail = { value: x + this._halfWidth };
                this.dispatchEvent(event);
            }
        }, {
            key: '_startHorizontal',
            value: function _startHorizontal(e) {
                e.stopPropagation();
                var tickRect = this._tick.getBoundingClientRect();
                this._offset = e.clientX - tickRect.left;
                this._moving = true;
                if (this._options.useTip) {
                    this._tip.style.display = 'block';
                }
            }
        }, {
            key: '_moveHorizontal',
            value: function _moveHorizontal(e) {
                e.stopPropagation();
                if (this._moving) {
                    document.body.style.cursor = 'pointer';
                    var containerRect = this._container.getBoundingClientRect();
                    var x = e.clientX - this._offset - containerRect.left;
                    if (x <= -this._halfWidth) {
                        this._tick.style.left = -this._halfWidth + 'px';
                        x = -this._halfWidth;
                    } else if (x >= this._width - this._halfWidth) {
                        this._tick.style.left = this._width - this._halfWidth + 'px';
                        x = this._width - this._halfWidth;
                    } else {
                        this._tick.style.left = x + 'px';
                    }
                    if (this._options.useTip) {
                        this._tip.style.display = 'block';
                    }

                    var event = document.createEvent('Event');
                    event.initEvent('slide', false, false);
                    event.detail = { value: x + this._halfWidth, tip: this._tip };
                    this.dispatchEvent(event);
                }
            }
        }, {
            key: '_clickVertical',
            value: function _clickVertical(e) {
                e.stopPropagation();
                var containerRect = this._container.getBoundingClientRect();
                var y = e.clientY - this._halfHeight - containerRect.top;
                if (y <= -this._halfHeight) {
                    this._tick.style.top = -this._halfHeight + 'px';
                    y = -this._halfHeight;
                } else if (y >= this._height - this._halfHeight) {
                    this._tick.style.top = this._height - this._halfHeight + 'px';
                    y = this._height - this._halfHeight;
                } else {
                    this._tick.style.top = y + 'px';
                }

                var event = document.createEvent('Event');
                event.initEvent('slide', false, false);
                event.detail = { value: y + this._halfHeight };
                this.dispatchEvent(event);
            }
        }, {
            key: '_startVertical',
            value: function _startVertical(e) {
                e.stopPropagation();
                var tickRect = this._tick.getBoundingClientRect();
                this._offset = e.clientY - tickRect.top;
                this._moving = true;
            }
        }, {
            key: '_moveVertical',
            value: function _moveVertical(e) {
                e.stopPropagation();
                if (this._moving) {
                    document.body.style.cursor = 'pointer';
                    var containerRect = this._container.getBoundingClientRect();
                    var y = e.clientY - this._offset - containerRect.top;
                    if (y <= -this._halfHeight) {
                        this._tick.style.top = -this._halfHeight + 'px';
                        y = -this._halfHeight;
                    } else if (y >= this._height - this._halfHeight) {
                        this._tick.style.top = this._height - this._halfHeight + 'px';
                        y = this._height - this._halfHeight;
                    } else {
                        this._tick.style.top = y + 'px';
                    }
                    if (this._options.useTip) {
                        this._tip.style.display = 'block';
                    }

                    var event = document.createEvent('Event');
                    event.initEvent('slide', false, false);
                    event.detail = { value: y + this._halfHeight, tip: this._tip };
                    this.dispatchEvent(event);
                }
            }
        }, {
            key: '_stop',
            value: function _stop(e) {
                e.stopPropagation();
                this._moving = false;
                this._offset = 0;
                document.body.style.cursor = 'default';
                if (this._options.useTip) {
                    this._tip.style.display = 'none';
                }
            }
        }, {
            key: 'value',
            get: function get$$1() {
                var tickRect = this._tick.getBoundingClientRect();
                var containerRect = this._container.getBoundingClientRect();
                switch (this._options.orientation) {
                    default:
                    case 'horizontal':
                        return tickRect.left + this._halfWidth - containerRect.left;
                    case 'vertical':
                        return tickRect.top + this._halfHeight - containerRect.top;
                }
            },
            set: function set$$1(value) {
                var containerRect = this._container.getBoundingClientRect();
                switch (this._options.orientation) {
                    default:
                    case 'horizontal':
                        this._tick.style.left = value - this._halfWidth + 'px';
                        break;
                    case 'vertical':
                        this._tick.style.top = value - this._halfHeight + 'px';
                        break;
                }
            }
        }]);
        return Slider;
    }(EventTarget);

    var ColorSlider = function (_Slider) {
        inherits(ColorSlider, _Slider);

        function ColorSlider(container) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            classCallCheck(this, ColorSlider);

            var _this = possibleConstructorReturn(this, (ColorSlider.__proto__ || Object.getPrototypeOf(ColorSlider)).call(this, container, options));

            _this._options.alpha = _this._options.alpha || 1.0;
            _this._options.hue = _this._options.hue || 0;
            _this._options.saturation = _this._options.saturation || 1.0;
            _this._options.lightness = _this._options.lightness || 0.5;
            _this._container.classList.add('color-slider');
            _this._canvas = document.createElement('canvas');
            _this._container.querySelector('.slider-bar').appendChild(_this._canvas);
            switch (_this._options.orientation) {
                case 'horizontal':
                    _this._renderHorizontal(_this._options.alpha);
                    break;
                case 'vertical':
                    _this._renderVertical(_this._options.alpha);
                    break;
            }
            _this._handleChange = _this._handleChange.bind(_this);
            _this.addEventListener('slide', _this._handleChange);
            return _this;
        }

        createClass(ColorSlider, [{
            key: '_handleChange',
            value: function _handleChange(e) {
                this._options.hue = Math.round(e.detail.value * 360 / (this._options.orientation === 'horizontal' ? this._width : this._height));
                var event = document.createEvent('Event');
                event.initEvent('change', false, false);
                event.detail = this.value;
                this.dispatchEvent(event);
            }
        }, {
            key: '_renderHorizontal',
            value: function _renderHorizontal(alpha) {
                var ctx = this._canvas.getContext('2d');
                var imgData = ctx.createImageData(this._canvas.width, this._canvas.height);
                var data = imgData.data,
                    width = imgData.width;

                for (var i = 0; i < data.length; i += 4) {
                    var h = i / 4 % width * 360 / width;

                    var _hsl2rgb = hsl2rgb(h, this._options.saturation, this._options.lightness),
                        r = _hsl2rgb.r,
                        g = _hsl2rgb.g,
                        b = _hsl2rgb.b;

                    var a = Math.round(alpha * 255);
                    data[i + 0] = r;
                    data[i + 1] = g;
                    data[i + 2] = b;
                    data[i + 3] = a;
                }
                ctx.putImageData(imgData, 0, 0);
            }
        }, {
            key: '_renderVertical',
            value: function _renderVertical(alpha) {
                var ctx = this._canvas.getContext('2d');
                var imgData = ctx.createImageData(this._canvas.width, this._canvas.height);
                var data = imgData.data,
                    width = imgData.width,
                    height = imgData.height;

                for (var i = 0; i < data.length; i += 4) {
                    var h = Math.floor(i / 4 / width) * 360 / height;

                    var _hsl2rgb2 = hsl2rgb(h, this._options.saturation, this._options.lightness),
                        r = _hsl2rgb2.r,
                        g = _hsl2rgb2.g,
                        b = _hsl2rgb2.b;

                    var a = Math.round(alpha * 255);
                    data[i + 0] = r;
                    data[i + 1] = g;
                    data[i + 2] = b;
                    data[i + 3] = a;
                }
                ctx.putImageData(imgData, 0, 0);
            }
            // a (1)

        }, {
            key: 'alpha',
            set: function set$$1(a) {
                this._options.alpha = a;
                switch (this._options.orientation) {
                    case 'horizontal':
                        this._renderHorizontal(this._options.alpha);
                        break;
                    case 'vertical':
                        this._renderVertical(this._options.alpha);
                        break;
                }
            }
            // rgb (255,255,255), hsl(360,1,1)

        }, {
            key: 'value',
            get: function get$$1() {
                var _options = this._options,
                    hue = _options.hue,
                    saturation = _options.saturation,
                    lightness = _options.lightness;

                return {
                    rgb: hsl2rgb(hue, saturation, lightness),
                    hsl: { h: hue, s: saturation, l: lightness }
                };
            },
            set: function set$$1(_ref) {
                var r = _ref.r,
                    g = _ref.g,
                    b = _ref.b;

                var _rgb2hsl = rgb2hsl(r, g, b),
                    h = _rgb2hsl.h;

                this._options.hue = h;
                set(ColorSlider.prototype.__proto__ || Object.getPrototypeOf(ColorSlider.prototype), 'value', Math.round((this._options.orientation === 'horizontal' ? this._width : this._height) * h / 360), this);
            }
        }]);
        return ColorSlider;
    }(Slider);

    var AlphaSlider = function (_Slider) {
        inherits(AlphaSlider, _Slider);

        function AlphaSlider(container) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            classCallCheck(this, AlphaSlider);

            var _this = possibleConstructorReturn(this, (AlphaSlider.__proto__ || Object.getPrototypeOf(AlphaSlider)).call(this, container, options));

            _this._options.order = _this._options.order || 'asc';
            _this._options.rgb = _this._options.rgb || { r: 0, g: 0, b: 0 };
            _this._container.classList.add('alpha-slider');
            _this._canvas = document.createElement('canvas');
            _this._container.querySelector('.slider-bar').appendChild(_this._canvas);
            _this._handleChange = _this._handleChange.bind(_this);
            _this.addEventListener('slide', _this._handleChange);
            _this.setRGB(_this._options.rgb);
            return _this;
        }

        createClass(AlphaSlider, [{
            key: '_handleChange',
            value: function _handleChange(e) {
                var a = e.detail.value / (this._options.orientation === 'horizontal' ? this._width : this._height);
                var alpha = this._options.order === 'desc' ? 1.0 - a : a;
                if (e.detail.tip) {
                    e.detail.tip.innerText = Math.round(alpha * 100);
                }
                var event = document.createEvent('Event');
                event.initEvent('change', false, false);
                event.detail = { value: alpha };
                this.dispatchEvent(event);
            }
            // r (0,255), g (0,255), b (0,255)

        }, {
            key: '_renderHorizontal',
            value: function _renderHorizontal(r, g, b) {
                var ctx = this._canvas.getContext('2d');
                var imgData = ctx.getImageData(0, 0, this._canvas.width, this._canvas.height);
                var data = imgData.data,
                    width = imgData.width;

                for (var i = 0; i < data.length; i += 4) {
                    var a = i / 4 % width / width;
                    data[i + 0] = r;
                    data[i + 1] = g;
                    data[i + 2] = b;
                    data[i + 3] = Math.round(255 * (this._options.order === 'desc' ? 1.0 - a : a));
                }
                ctx.putImageData(imgData, 0, 0);
            }
            // r (0,255), g (0,255), b (0,255)

        }, {
            key: '_renderVertical',
            value: function _renderVertical(r, g, b) {
                var ctx = this._canvas.getContext('2d');
                var imgData = ctx.getImageData(0, 0, this._canvas.width, this._canvas.height);
                var data = imgData.data,
                    width = imgData.width,
                    height = imgData.height;

                for (var i = 0, j = 0, k = 0; i < data.length; i += 4, ++j) {
                    if (j >= width) {
                        ++k;
                        j = 0;
                    }
                    var a = k / height;
                    a = this._options.order === 'desc' ? 1.0 - a : a;
                    data[i + 0] = r;
                    data[i + 1] = g;
                    data[i + 2] = b;
                    data[i + 3] = Math.round(255 * a);
                }
                ctx.putImageData(imgData, 0, 0);
            }
        }, {
            key: 'setRGB',
            value: function setRGB(rgb) {
                this._options.rgb = rgb;
                var _options$rgb = this._options.rgb,
                    r = _options$rgb.r,
                    g = _options$rgb.g,
                    b = _options$rgb.b;

                switch (this._options.orientation) {
                    case 'horizontal':
                        this._renderHorizontal(r, g, b);
                        break;
                    case 'vertical':
                        this._renderVertical(r, g, b);
                        break;
                }
            }
        }]);
        return AlphaSlider;
    }(Slider);

    var ColorArea = function (_EventTarget) {
        inherits(ColorArea, _EventTarget);

        function ColorArea(container, options) {
            classCallCheck(this, ColorArea);

            var _this = possibleConstructorReturn(this, (ColorArea.__proto__ || Object.getPrototypeOf(ColorArea)).call(this));

            _this._options = options || {};
            _this._options.hue = _this._options.hue || 0;
            _this._options.alpha = _this._options.alpha || 1.0;
            _this._container = container;
            _this._container.classList.add('color-area');
            _this._container.innerHTML = '<div class="picker"></div><canvas></canvas>';

            _this._canvas = _this._container.querySelector('.color-area canvas');
            _this._click = _this._click.bind(_this);
            _this._canvas.addEventListener('click', _this._click);
            _this._picker = _this._container.querySelector('.color-area .picker');
            _this._picker.style.top = '50%';
            _this._picker.style.left = '50%';
            var pickerRect = _this._picker.getBoundingClientRect();
            _this._halfWidth = Math.round(pickerRect.width / 2);
            _this._halfHeight = Math.round(pickerRect.height / 2);

            _this._start = _this._start.bind(_this);
            _this._move = _this._move.bind(_this);
            _this._stop = _this._stop.bind(_this);
            _this._moving = false;
            _this._offsetX = 0;
            _this._offsetY = 0;

            _this._picker.addEventListener('mousedown', _this._start);
            document.addEventListener('mousemove', _this._move);
            document.addEventListener('mouseup', _this._stop);

            _this.setHue(_this._options.hue);
            return _this;
        }

        createClass(ColorArea, [{
            key: '_click',
            value: function _click(e) {
                e.stopPropagation();
                var containerRect = this._container.getBoundingClientRect();
                // handle x
                var x = e.clientX - this._halfWidth - containerRect.left;
                this._picker.style.left = x + 'px';

                // handle y
                var y = e.clientY - this._halfHeight - containerRect.top;
                this._picker.style.top = y + 'px';

                var s = 1 - (x + this._halfWidth) / containerRect.width;
                var l = 1 - (y + this._halfHeight) / containerRect.height;

                var event = document.createEvent('Event');
                event.initEvent('change', false, false);
                event.detail = { h: this._options.hue, s: s, l: l };
                this.dispatchEvent(event);
            }
        }, {
            key: '_start',
            value: function _start(e) {
                e.stopPropagation();
                var pickerRect = this._picker.getBoundingClientRect();
                this._offsetX = e.clientX - pickerRect.left;
                this._offsetY = e.clientY - pickerRect.top;
                this._moving = true;
            }
        }, {
            key: '_move',
            value: function _move(e) {
                e.stopPropagation();
                if (this._moving) {
                    document.body.style.cursor = 'pointer';
                    var containerRect = this._container.getBoundingClientRect();
                    // handle x
                    var x = e.clientX - this._offsetX - containerRect.left;
                    if (x <= -this._halfWidth) {
                        this._picker.style.left = -this._halfWidth + 'px';
                        x = -this._halfWidth;
                    } else if (x >= containerRect.width - this._halfWidth) {
                        this._picker.style.left = containerRect.width - this._halfWidth + 'px';
                        x = containerRect.width - this._halfWidth;
                    } else {
                        this._picker.style.left = x + 'px';
                    }
                    // handle y
                    var y = e.clientY - this._offsetY - containerRect.top;
                    if (y <= -this._halfHeight) {
                        this._picker.style.top = -this._halfHeight + 'px';
                        y = -this._halfHeight;
                    } else if (y >= containerRect.height - this._halfHeight) {
                        this._picker.style.top = containerRect.height - this._halfHeight + 'px';
                        y = containerRect.height - this._halfHeight;
                    } else {
                        this._picker.style.top = y + 'px';
                    }
                    var s = 1 - (x + this._halfWidth) / containerRect.width;
                    var l = 1 - (y + this._halfHeight) / containerRect.height;

                    var _hsl2rgb = hsl2rgb(0, 0, 1 - l),
                        r = _hsl2rgb.r,
                        g = _hsl2rgb.g,
                        b = _hsl2rgb.b;

                    this._picker.style.borderColor = 'rgb(' + [r, g, b].join(',') + ')';

                    var event = document.createEvent('Event');
                    event.initEvent('change', false, false);
                    event.detail = { h: this._options.hue, s: s, l: l };
                    this.dispatchEvent(event);
                }
            }
        }, {
            key: '_stop',
            value: function _stop(e) {
                e.stopPropagation();
                document.body.style.cursor = 'default';
                this._offsetX = 0;
                this._offsetY = 0;
                this._moving = false;
            }
        }, {
            key: 'setHue',
            value: function setHue(h) {
                this._options.hue = h;
                var ctx = this._canvas.getContext('2d');
                var imgData = ctx.getImageData(0, 0, this._canvas.width, this._canvas.height);
                var width = imgData.width,
                    height = imgData.height;

                var alpha = this._options.alpha;
                var k = 0;
                var data = new Uint8ClampedArray(width * height * 4);
                for (var i = height - 1; i >= 0; --i) {
                    for (var j = width - 1; j >= 0; --j) {
                        var s = j / width;
                        var l = i / height;

                        var _hsl2rgb2 = hsl2rgb(h, s, l),
                            r = _hsl2rgb2.r,
                            g = _hsl2rgb2.g,
                            b = _hsl2rgb2.b;

                        data[k + 0] = r;
                        data[k + 1] = g;
                        data[k + 2] = b;
                        data[k + 3] = Math.round(alpha * 255);
                        k += 4;
                    }
                }
                imgData.data.set(data);
                ctx.putImageData(imgData, 0, 0);

                var event = document.createEvent('Event');
                event.initEvent('change', false, false);
                event.detail = this.hsl;
                this.dispatchEvent(event);
            }
        }, {
            key: '_process',
            value: function _process(e) {
                var ctx = this._canvas.getContext('2d');
                var imgData = ctx.getImageData(0, 0, this._canvas.width, this._canvas.height);
                imgData.data.set(e.data);
                ctx.putImageData(imgData, 0, 0);

                var event = document.createEvent('Event');
                event.initEvent('change', false, false);
                event.detail = this.hsl;
                this.dispatchEvent(event);
            }
        }, {
            key: 'setAlpha',
            value: function setAlpha(alpha) {
                this._options.alpha = alpha;
                this.setHue(this._options.hue);
            }
        }, {
            key: 'hsl',
            get: function get$$1() {
                var pickerRect = this._picker.getBoundingClientRect();
                var containerRect = this._container.getBoundingClientRect();
                var s = 1 - (pickerRect.left + this._halfWidth - containerRect.left) / containerRect.width;
                var l = 1 - (pickerRect.top + this._halfHeight - containerRect.top) / containerRect.height;
                return { h: this._options.hue, s: s, l: l };
            },
            set: function set$$1(_ref) {
                var h = _ref.h,
                    s = _ref.s,
                    l = _ref.l;

                var containerRect = this._container.getBoundingClientRect();
                this._picker.style.left = (1 - s) * containerRect.width - this._halfWidth + 'px';
                this._picker.style.top = (1 - l) * containerRect.height - this._halfHeight + 'px';
                this.setHue(h);
            }
        }]);
        return ColorArea;
    }(EventTarget);

    var ColorPicker = function (_EventTarget) {
        inherits(ColorPicker, _EventTarget);

        function ColorPicker(container, options) {
            classCallCheck(this, ColorPicker);

            var _this = possibleConstructorReturn(this, (ColorPicker.__proto__ || Object.getPrototypeOf(ColorPicker)).call(this));

            _this._container = container;
            _this._options = options || {};
            _this._options.colorMode = _this._options.colorMode || 'hex';
            _this._container.classList.add('color-picker');
            _this._container.innerHTML = '<table>\n                <tbody>\n                    <tr>\n                        <td>\n                            <span class="color-picker-sample"></span>                            \n                        </td>\n                        <td>\n                            <span class="color-picker-mode"></span>\n                            <input type="text" class="color-picker-box" />\n                        </td>\n                        <td>\n                            <span class="color-picker-box-button"></span>\n                        </td>\n                        <td>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td colspan="3">\n                            <div class="color-picker-area"></div>\n                        </td>\n                        <td>\n                            <div class="color-picker-alpha"></div>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td colspan="3">\n                            <div class="color-picker-slider"></div>\n                        </td>\n                        <td>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>';

            _this._preventDefault = _this._preventDefault.bind(_this);
            _this._stopPropagation = _this._stopPropagation.bind(_this);
            _this._container.addEventListener('click', _this._preventDefault);
            _this._container.addEventListener('click', _this._stopPropagation);
            _this._container.addEventListener('dragstart', _this._preventDefault);
            _this._container.addEventListener('dragstart', _this._stopPropagation);
            // this._container.addEventListener('mousemove', this._preventDefault);;
            // this._container.addEventListener('mousemove', this._stopPropagation);

            _this._sample = _this._container.querySelector('.color-picker-sample');
            _this._box = _this._container.querySelector('.color-picker-box');
            _this._changeBox = _this._changeBox.bind(_this);
            _this._box.addEventListener('change', _this._changeBox);
            _this._box.addEventListener('focus', function (e) {
                return _this._box.select();
            });
            _this._avalue = _this._container.querySelector('.color-picker-alpha-value');
            _this._area = new ColorArea(_this._container.querySelector('.color-picker-area'));
            _this._alpha = new AlphaSlider(_this._container.querySelector('.color-picker-alpha'), {
                orientation: 'vertical', order: 'desc', useTip: true
            });
            _this._slider = new ColorSlider(_this._container.querySelector('.color-picker-slider'));
            _this._changeColor = _this._changeColor.bind(_this);
            _this._area.addEventListener('change', _this._changeColor);
            _this._changeHue = _this._changeHue.bind(_this);
            _this._slider.addEventListener('change', _this._changeHue);
            _this._changeAlpha = _this._changeAlpha.bind(_this);
            _this._alpha.addEventListener('change', _this._changeAlpha);
            _this._toggleColorMode = _this._toggleColorMode.bind(_this);
            _this._container.querySelector('.color-picker-box-button').addEventListener('click', _this._toggleColorMode);
            _this._mode = _this._container.querySelector('.color-picker-mode');
            _this._initialize();
            return _this;
        }

        createClass(ColorPicker, [{
            key: '_preventDefault',
            value: function _preventDefault(e) {
                e.preventDefault();
            }
        }, {
            key: '_stopPropagation',
            value: function _stopPropagation(e) {
                e.stopPropagation();
            }
        }, {
            key: '_initialize',
            value: function _initialize() {
                var _slider$value = this._slider.value,
                    rgb = _slider$value.rgb,
                    hsl = _slider$value.hsl;

                this._alpha.setRGB(rgb);
                this._area.setHue(hsl.h);
                var _area$hsl = this._area.hsl,
                    h = _area$hsl.h,
                    s = _area$hsl.s,
                    l = _area$hsl.l;

                var _hsl2rgb = hsl2rgb(h, s, l),
                    r = _hsl2rgb.r,
                    g = _hsl2rgb.g,
                    b = _hsl2rgb.b;

                this._setBox(r, g, b);
            }
        }, {
            key: 'setColorMode',
            value: function setColorMode(mode) {
                this._options.colorMode = mode;
                var _area$hsl2 = this._area.hsl,
                    h = _area$hsl2.h,
                    s = _area$hsl2.s,
                    l = _area$hsl2.l;

                var _hsl2rgb2 = hsl2rgb(h, s, l),
                    r = _hsl2rgb2.r,
                    g = _hsl2rgb2.g,
                    b = _hsl2rgb2.b;

                this._setBox(r, g, b);
            }
        }, {
            key: '_changeBox',
            value: function _changeBox(e) {
                switch (this._options.colorMode) {
                    case 'rgb':
                        this.value = rgb2hex(this._box.value);
                        break;
                    case 'hex':
                        this.value = this._box.value;
                        break;
                    default:
                        break;
                }
            }
        }, {
            key: '_toggleColorMode',
            value: function _toggleColorMode(e) {
                switch (this._options.colorMode) {
                    case 'rgb':
                        this._options.colorMode = 'hex';
                        break;
                    default:
                    case 'hex':
                        this._options.colorMode = 'rgb';
                        break;
                }
                var _area$hsl3 = this._area.hsl,
                    h = _area$hsl3.h,
                    s = _area$hsl3.s,
                    l = _area$hsl3.l;

                var _hsl2rgb3 = hsl2rgb(h, s, l),
                    r = _hsl2rgb3.r,
                    g = _hsl2rgb3.g,
                    b = _hsl2rgb3.b;

                this._setBox(r, g, b);
            }
            // rgb (255,255,255)

        }, {
            key: '_setBox',
            value: function _setBox(r, g, b) {
                var value = '';
                switch (this._options.colorMode) {
                    case 'rgb':
                        value = [r, g, b].join(',');
                        this._mode.innerText = 'rgb';
                        this._sample.style.backgroundColor = 'rgb(' + value + ')';
                        break;
                    default:
                    case 'hex':
                        value = rgb2hex(r, g, b);
                        this._mode.innerText = 'hex';
                        this._sample.style.backgroundColor = value;
                        break;
                }
                this._box.value = value;
            }
        }, {
            key: '_changeColor',
            value: function _changeColor(e) {
                var _e$detail = e.detail,
                    h = _e$detail.h,
                    s = _e$detail.s,
                    l = _e$detail.l;

                var _hsl2rgb4 = hsl2rgb(h, s, l),
                    r = _hsl2rgb4.r,
                    g = _hsl2rgb4.g,
                    b = _hsl2rgb4.b;

                this._setBox(r, g, b);
                var a = this._alpha.value;
                var event = document.createEvent('Event');
                event.initEvent('change', false, false);
                event.detail = { hsl: { h: h, s: s, l: l }, rgb: { r: r, g: g, b: b, a: a }, hex: rgb2hex(r, g, b) };
                this.dispatchEvent(event);
            }
        }, {
            key: '_changeHue',
            value: function _changeHue(e) {
                this._alpha.setRGB(e.detail.rgb);
                this._area.setHue(e.detail.hsl.h);
            }
        }, {
            key: '_changeAlpha',
            value: function _changeAlpha(e) {
                this._area.setAlpha(e.detail.value);
            }
        }, {
            key: 'value',
            get: function get$$1() {
                var _area$hsl4 = this._area.hsl,
                    h = _area$hsl4.h,
                    s = _area$hsl4.s,
                    l = _area$hsl4.l;

                var _hsl2rgb5 = hsl2rgb(h, s, l),
                    r = _hsl2rgb5.r,
                    g = _hsl2rgb5.g,
                    b = _hsl2rgb5.b;

                var a = this._alpha.value;
                return { rgb: { r: r, g: g, b: b, a: a }, hsl: { h: h, s: s, l: l } };
            },
            set: function set$$1(hex) {
                var _hex2rgb = hex2rgb(hex),
                    r = _hex2rgb.r,
                    g = _hex2rgb.g,
                    b = _hex2rgb.b;

                this._slider.value = { r: r, g: g, b: b };
                this._area.hsl = rgb2hsl(r, g, b);
                this._alpha.setRGB({ r: r, g: g, b: b });
            }
        }]);
        return ColorPicker;
    }(EventTarget);

    var T$4 = Translations$1;

    T$4.addText('rus', {
        objects: {
            title: 'Объекты',
            polygon: 'Многоугольник',
            line: 'Линия',
            point: 'Точка'
        },
        name: 'Название',
        area: 'Характеристика',
        color: 'Цвет'
    });

    T$4.addText('eng', {
        objects: {
            title: 'Objects',
            polygon: 'Polygon',
            line: 'Line',
            point: 'Point'
        },
        name: 'Name',
        area: 'Data',
        color: 'Color'
    });

    function get_area_text(area) {
        var sq = '<span class="square">2</span>';
        if (area < 10e+5) {
            return Math.round(area).toFixed(0) + ' ' + T$4.getText('units.m') + sq;
        } else {
            return Math.round(area / 10e+5).toFixed(0) + ' ' + T$4.getText('units.km') + sq;
        }
    }

    var DrawnObjects = function (_EventTarget) {
        inherits(DrawnObjects, _EventTarget);

        function DrawnObjects(container, _ref) {
            var _ref$color = _ref.color,
                color = _ref$color === undefined ? '#0000FF' : _ref$color;
            classCallCheck(this, DrawnObjects);

            var _this = possibleConstructorReturn(this, (DrawnObjects.__proto__ || Object.getPrototypeOf(DrawnObjects)).call(this));

            _this._count = 0;
            _this._container = container;
            _this._container.style.display = 'none';
            _this._container.innerHTML = '<div class="drawn-objects">\n                <div class="drawn-objects-header">\n                    <span class="drawn-objects-title">' + T$4.getText('objects.title') + '</span>\n                    <span class="drawn-objects-number">0</span>\n                    <span class="drawn-objects-minimize"></span>\n                </div>\n                <div class="drawn-objects-list"></div>\n            </div>';
            _this._preventDefault = _this._preventDefault.bind(_this);
            _this._stopPropagation = _this._stopPropagation.bind(_this);
            _this._container.addEventListener('click', _this._preventDefault);
            _this._container.addEventListener('click', _this._stopPropagation);
            _this._container.addEventListener('mousewheel', _this._stopPropagation);
            _this._toggle = _this._toggle.bind(_this);
            _this._container.querySelector('.drawn-objects-minimize').addEventListener('click', _this._toggle);

            _this._onCellClick = _this._onCellClick.bind(_this);
            _this._onCellEdit = _this._onCellEdit.bind(_this);
            _this._onColumnClick = _this._onColumnClick.bind(_this);
            _this._indexBy = 'id';
            _this._grid = new DataGrid(_this._container.querySelector('.drawn-objects-list'), {
                indexBy: _this._indexBy,
                fields: {
                    'visible': {
                        type: 'boolean',
                        columnIcon: 'drawn-objects-visible',
                        icon: 'search',
                        yes: 'search-visibility-off',
                        no: 'search-visibility-on',
                        default: true
                    },
                    'color': {
                        type: 'color',
                        name: T$4.getText('color'),
                        default: color
                    },
                    'name': {
                        type: 'string',
                        name: T$4.getText('name'),
                        edit: 'drawing-edit',
                        sortable: true
                    },
                    'area': {
                        type: 'float',
                        name: T$4.getText('area'),
                        align: 'right',
                        sortable: true,
                        default: 0,
                        formatter: function formatter(item) {
                            var geoJSON = item.geoJSON;
                            var g = geoJSON.geometry;
                            var type = g.type;
                            var value = item.area;
                            switch (type.toUpperCase()) {
                                case "POINT":
                                    return L.gmxUtil.latLonToString(g.coordinates[0], g.coordinates[1], 6);
                                case "LINESTRING":
                                case "MULTILINESTRING":
                                    return L.gmxUtil.prettifyDistance(value);
                                case "MULTIPOLYGON":
                                case "POLYGON":
                                default:
                                    return get_area_text(value);
                            }
                        }
                    },
                    'delete': {
                        columnIcon: 'delete-all',
                        type: 'button',
                        button: 'search search-delete'
                    }
                }
            });
            _this._grid.addEventListener('cell:click', _this._onCellClick);
            _this._grid.addEventListener('cell:edit', _this._onCellEdit);
            _this._grid.addEventListener('column:click', _this._onColumnClick);
            _this._colorPickerCell = null;
            _this._onSetColor = _this._onSetColor.bind(_this);

            _this._colorPickerContainer = create_container();
            _this._colorPickerContainer.classList.add('noselect');
            _this._hideColorPicker = _this._hideColorPicker.bind(_this);
            _this._colorPicker = new ColorPicker(_this._colorPickerContainer);
            _this._colorPicker.addEventListener('change', _this._onSetColor);
            document.body.addEventListener('click', _this._hideColorPicker);
            return _this;
        }

        createClass(DrawnObjects, [{
            key: '_toggle',
            value: function _toggle(e) {
                var content = this._container.querySelector('.drawn-objects-list');
                content.style.display = content.style.display === 'none' ? 'block' : 'none';
            }
        }, {
            key: '_preventDefault',
            value: function _preventDefault(e) {
                e.preventDefault();
            }
        }, {
            key: '_stopPropagation',
            value: function _stopPropagation(e) {
                e.stopPropagation();
            }
        }, {
            key: '_hideColorPicker',
            value: function _hideColorPicker(e) {
                this._colorPickerContainer.style.visibility = 'hidden';
            }
        }, {
            key: '_onSetColor',
            value: function _onSetColor(e) {
                if (this._colorPickerCell) {
                    var _colorPickerCell = this._colorPickerCell,
                        item = _colorPickerCell.item,
                        cell = _colorPickerCell.cell;

                    item.color = e.detail.hex;
                    cell.querySelector('.table-list-color').style.borderColor = e.detail.hex;

                    var event = document.createEvent('Event');
                    event.initEvent('edit', false, false);
                    event.detail = item;
                    this.dispatchEvent(event);
                }
            }
        }, {
            key: '_onCellClick',
            value: function _onCellClick(e) {
                var _e$detail = e.detail,
                    i = _e$detail.i,
                    j = _e$detail.j,
                    row = _e$detail.row,
                    cell = _e$detail.cell,
                    name = _e$detail.name,
                    field = _e$detail.field,
                    item = _e$detail.item;

                var event = document.createEvent('Event');
                switch (name) {
                    case 'visible':
                        // let btn = cell.querySelector('i');
                        // if (btn.classList.contains('search-visibility-off')) {
                        //     btn.classList.remove('search-visibility-off');
                        //     btn.classList.add('search-visibility-on');
                        //     item.visible = false;
                        // }
                        // else {
                        //     btn.classList.remove('search-visibility-on');
                        //     btn.classList.add('search-visibility-off');

                        // }   
                        item.visible = !item.visible;
                        var id = item[this._indexBy];
                        this._grid.redrawRow(id, item);

                        event.initEvent('check', false, false);
                        event.detail = item;
                        this.dispatchEvent(event);

                        break;
                    case 'color':
                        if (item.color) {
                            this._colorPickerCell = { item: item, cell: cell };

                            var _cell$getBoundingClie = cell.getBoundingClientRect(),
                                left = _cell$getBoundingClie.left,
                                top = _cell$getBoundingClie.top;

                            var colorPickerRect = this._colorPickerContainer.getBoundingClientRect();
                            this._colorPickerContainer.style.left = left - colorPickerRect.width - 50 + 'px';
                            var rect = document.body.getBoundingClientRect();
                            this._colorPickerContainer.style.top = (top + colorPickerRect.height < rect.bottom ? top : top - colorPickerRect.height + 10) + 'px';
                            this._colorPicker.value = item.color;
                            this._colorPickerContainer.style.visibility = 'visible';
                        }
                        break;
                    case 'delete':
                        event.initEvent('delete', false, false);
                        event.detail = item;
                        this.dispatchEvent(event);
                        break;
                    default:
                        event.initEvent('fit', false, false);
                        event.detail = item;
                        this.dispatchEvent(event);
                        break;
                }
            }
        }, {
            key: '_onCellEdit',
            value: function _onCellEdit(e) {
                var item = e.detail.item;

                var event = document.createEvent('Event');
                event.initEvent('edit', false, false);
                event.detail = item;
                this.dispatchEvent(event);
            }
        }, {
            key: '_onColumnClick',
            value: function _onColumnClick(e) {
                var _e$detail2 = e.detail,
                    col = _e$detail2.col,
                    name = _e$detail2.name;

                var event = document.createEvent('Event');
                switch (name) {
                    case 'visible':
                        var state = !col.querySelector('i').classList.contains('drawn-objects-visible');
                        this._grid.items.forEach(function (item) {
                            return item.visible = state;
                        });
                        this._grid.refresh();
                        var btn = this._grid.getCol(name).querySelector('i');
                        if (state) {
                            btn.classList.remove('drawn-objects-hidden');
                            btn.classList.add('drawn-objects-visible');
                        } else {
                            btn.classList.add('drawn-objects-hidden');
                            btn.classList.remove('drawn-objects-visible');
                        }

                        event.initEvent('show:all', false, false);
                        event.detail = state;
                        this.dispatchEvent(event);
                        break;
                    case 'delete':
                        event.initEvent('delete:all', false, false);
                        this.dispatchEvent(event);
                        break;
                    default:
                        break;
                }
            }
        }, {
            key: 'updateCount',
            value: function updateCount(num) {
                this._count = parseInt(num, 10);
                this._container.querySelector('.drawn-objects-number').innerText = num;
            }
        }, {
            key: 'resize',
            value: function resize(total) {
                var height = this._container.querySelector('.table-list-header').getBoundingClientRect().height;
                this._container.querySelector('.table-list-body').style.maxHeight = total - height + 'px';
            }
        }, {
            key: 'items',
            set: function set$$1(items) {
                if (Array.isArray(items) && items.length > 0) {
                    this._container.style.display = 'block';
                    this._grid.items = items;
                    this.updateCount(this._grid.items.length);
                } else {
                    this._container.style.display = 'none';
                    this._grid.items = [];
                    this.updateCount(0);
                }
            },
            get: function get$$1() {
                return this._grid.items;
            }
        }, {
            key: 'count',
            get: function get$$1() {
                return this._count;
            }
        }]);
        return DrawnObjects;
    }(EventTarget);

    var DrawnObjectsControl = L.Control.extend({
        includes: L.Evented ? L.Evented.prototype : L.Mixin.Events,

        // options.position (left|right)
        initialize: function initialize(options) {
            L.setOptions(this, options);
        },

        onAdd: function onAdd(map) {
            this._container = L.DomUtil.create('div', 'drawn-objects-control');
            this.widget = new DrawnObjects(this._container, {});
            // L.DomEvent.disableClickPropagation(this._container);
            // L.DomEvent.disableScrollPropagation(this._container);
            // L.DomEvent.on(this._container, 'mousemove', L.DomEvent.stopPropagation);
            return this._container;
        },

        onRemove: function onRemove(map) {}

    });

    var T$5 = Translations$1;

    T$5.addText('rus', {
        minimize: 'Свернуть',
        maximize: 'Показать',
        close: 'Закрыть'
    });
    T$5.addText('eng', {
        minimize: 'Minimize',
        maximize: 'Maximize',
        close: 'Close'
    });

    var FloatingPanel = function (_EventTarget) {
        inherits(FloatingPanel, _EventTarget);

        function FloatingPanel(container, _ref) {
            var _ref$title = _ref.title,
                title = _ref$title === undefined ? '' : _ref$title,
                _ref$id = _ref.id,
                id = _ref$id === undefined ? '' : _ref$id,
                _ref$closable = _ref.closable,
                closable = _ref$closable === undefined ? true : _ref$closable,
                _ref$left = _ref.left,
                left = _ref$left === undefined ? 100 : _ref$left,
                _ref$top = _ref.top,
                top = _ref$top === undefined ? 100 : _ref$top,
                _ref$modal = _ref.modal,
                modal = _ref$modal === undefined ? false : _ref$modal,
                _ref$header = _ref.header,
                header = _ref$header === undefined ? true : _ref$header;
            classCallCheck(this, FloatingPanel);

            var _this = possibleConstructorReturn(this, (FloatingPanel.__proto__ || Object.getPrototypeOf(FloatingPanel)).call(this));

            _this._id = id;
            _this._left = left;
            _this._top = top;
            _this._container = container;
            _this._modal = modal;
            _this._container.classList.add('noselect');
            _this._container.classList.add('panel-container');
            var useClose = closable ? '<td class="panel-close-button" title="' + T$5.getText('close') + '">\n                <i class="panel-icon-close" />\n            </td>' : '';
            _this._container.innerHTML = '<div class="panel-body">\n                ' + (header ? '<table class="panel-header">\n                        <tr>\n                            <td class="panel-header-title">' + title + '</td>\n                            <td class="panel-toggle-button" title="' + T$5.getText('minimize') + '">\n                                <i class="panel-icon-minimize" />\n                            </td>\n                            ' + useClose + '\n                        </tr>\n                    </table>' : '') + '\n                <div class="panel-content"></div>\n                <div class="panel-footer"></div>\n            </div>';
            _this._body = _this._container.querySelector('.panel-body');
            _this._content = _this._container.querySelector('.panel-content');
            _this._footer = _this._container.querySelector('.panel-footer');
            _this.show = _this.show.bind(_this);
            _this.hide = _this.hide.bind(_this);

            if (header) {
                _this._header = _this._container.querySelector('.panel-header');
                _this._title = _this._container.querySelector('.panel-header-title');
                _this.toggle = _this.toggle.bind(_this);
                _this._toggleButton = _this._container.querySelector('.panel-toggle-button');
                _this._toggleButton.addEventListener('click', _this.toggle);
            }

            if (header && closable) {
                _this._closeButton = _this._container.querySelector('.panel-close-button');
                _this._closeButton.addEventListener('click', _this.hide);
            }
            _this._savePosition = _this._savePosition.bind(_this);

            _this._stopPropagation = _this._stopPropagation.bind(_this);
            _this._startMove = _this._startMove.bind(_this);
            _this._stopMove = _this._stopMove.bind(_this);
            _this._handleMove = _this._handleMove.bind(_this);
            _this._container.addEventListener('dragstart', _this.preventDefault);
            if (header) {
                _this._header.addEventListener('mousedown', _this._startMove);
                _this._header.addEventListener('mousemove', _this._handleMove);
            }
            document.body.addEventListener('mouseup', _this._stopMove);
            _this._container.addEventListener('mousewheel', _this._stopPropagation);
            if (_this._modal) {
                _this._ovl = document.querySelector('.panel-modal-overlay');
                if (!_this._ovl) {
                    _this._ovl = document.createElement('div');
                    document.body.appendChild(_this._ovl);
                    _this._ovl.className = 'panel-modal-overlay';
                    _this._ovl.style.display = 'none';
                    _this._ovl.addEventListener('mousemove', _this._stopPropagation);
                    _this._ovl.addEventListener('mousewheel', _this._stopPropagation);
                    _this._ovl.addEventListener('click', _this._stopPropagation);
                }
                _this._container.classList.add('panel-modal');
            } else {
                _this._container.classList.add('panel-non-modal');
            }
            return _this;
        }

        createClass(FloatingPanel, [{
            key: '_startMove',
            value: function _startMove(e) {
                var _container$getBoundin = this._container.getBoundingClientRect(),
                    left = _container$getBoundin.left,
                    top = _container$getBoundin.top;

                this._offset = { x: e.clientX - left, y: e.clientY - top };
            }
        }, {
            key: '_stopMove',
            value: function _stopMove(e) {
                this._offset = null;
            }
        }, {
            key: '_handleMove',
            value: function _handleMove(e) {
                if (this._offset) {
                    this._container.style.left = e.clientX - this._offset.x + 'px';
                    this._container.style.top = e.clientY - this._offset.y + 'px';
                }
            }
        }, {
            key: '_stopPropagation',
            value: function _stopPropagation(e) {
                e.stopPropagation();
            }
        }, {
            key: 'show',
            value: function show() {
                if (this._modal) {
                    this._ovl.style.display = 'block';
                }
                this._body.style.visibility = 'visible';
                var height = 0;
                if (this._header) {
                    height = this._header.getBoundingClientRect().height;
                }
                var bodyRect = this._body.getBoundingClientRect();
                this._restorePosition(this._top - Math.round((height + bodyRect.height) / 2), this._left - Math.round(bodyRect.width / 2));
                var event = document.createEvent('Event');
                event.initEvent('show', false, false);
                this.dispatchEvent(event);
            }
        }, {
            key: 'hide',
            value: function hide() {
                if (this._modal) {
                    this._ovl.style.display = 'none';
                }
                this._body.style.visibility = 'hidden';
                var event = document.createEvent('Event');
                event.initEvent('hide', false, false);
                this.dispatchEvent(event);
            }
        }, {
            key: 'toggle',
            value: function toggle() {
                var btn = this._toggleButton.querySelector('i');
                if (this._content.style.display == 'none') {
                    btn.classList.remove('fa-plus-circle');
                    btn.classList.add('fa-minus-circle');
                    this._content.style.display = 'block';
                } else {
                    btn.classList.remove('fa-minus-circle');
                    btn.classList.add('fa-plus-circle');
                    this._content.style.display = 'none';
                }
            }
        }, {
            key: 'getTitle',
            value: function getTitle() {
                return this._title.innerText;
            }
        }, {
            key: 'setTitle',
            value: function setTitle(text) {
                return this._title.innerText = text;
            }
        }, {
            key: '_restorePosition',
            value: function _restorePosition(top, left) {
                if (typeof this._id === 'string' && this._id != '') {
                    var x = localStorage.getItem(this._id + '.left') || left;
                    var y = localStorage.getItem(this._id + '.top') || top;
                    this._container.style.left = x + 'px';
                    this._container.style.top = y + 'px';
                }
            }
        }, {
            key: '_savePosition',
            value: function _savePosition() {
                if (typeof this._id === 'string' && this._id != '') {
                    var _container$getBoundin2 = this._container.getBoundingClientRect(),
                        top = _container$getBoundin2.top,
                        left = _container$getBoundin2.left;

                    localStorage.setItem(this._id + '.top', top);
                    localStorage.setItem(this._id + '.left', left);
                }
            }
        }, {
            key: 'header',
            get: function get$$1() {
                return this._header;
            }
        }, {
            key: 'body',
            get: function get$$1() {
                return this._body;
            }
        }, {
            key: 'footer',
            get: function get$$1() {
                return this._footer;
            }
        }, {
            key: 'content',
            get: function get$$1() {
                return this._content;
            }
        }]);
        return FloatingPanel;
    }(EventTarget);

    var T$6 = Translations$1;

    T$6.addText('rus', {
        cart: {
            title: 'Корзина',
            clear: 'Очистить корзину',
            back: 'Назад',
            order: 'Перейти к оформлению заказа',
            warning: 'Для редактирования контактной информации воспользуйтесь <label class="link">ссылкой</label>.\r\nПосле этого необходимо снова зайти в систему.',
            customer: 'Организация (заказчик)',
            project: {
                name: 'Название проекта',
                type: {
                    title: 'Тип проекта',
                    commercial: 'Коммерческий',
                    internal: 'Внутренний',
                    presale: 'Пресейл'
                },
                number: '№ Договора-контракта'
            },
            person: 'Имя и фамилия',
            company: 'Компания',
            email: 'Электронная почта',
            comment: 'Комментарий',
            header: 'Оформление заказа',
            submit: 'Заказать',
            close: 'Закрыть',
            success: {
                header: 'Благодарим за оформление заказа!',
                content: 'На адрес электронной почты, указанный при регистрации было отправлено сообщение с ссылкой на детали заказа.',
                footer: 'В ближайшее время мы свяжемся с Вами и дадим подробную информацию о стоимости и характеристиках.'
            },
            invalid: 'Данное поле обязательно для заполнения'
        }
    });

    T$6.addText('eng', {
        cart: {
            title: 'Cart',
            clear: 'Clear',
            back: 'Back',
            order: 'To order',
            warning: 'To edit contact information use the link #. Afterwards it is necessary to login.',
            customer: 'Organization (customer)',
            project: {
                name: 'Project name',
                type: {
                    title: 'Project type',
                    commercial: 'Commercial',
                    internal: 'Internal',
                    presale: 'Presale'
                },
                number: 'Project number'
            },
            person: 'Name',
            company: 'Company',
            email: 'Email',
            comment: 'Comment',
            header: 'Place an order',
            submit: 'Submit',
            close: 'Close',
            success: {
                header: 'Thank you for order!',
                content: 'An email with the permanent link to your query has been sent to your address.',
                footer: 'We will soon send you more information concerning the cost and details.'
            },
            invalid: 'This field is required'
        }
    });

    var Cart = function (_FloatingPanel) {
        inherits(Cart, _FloatingPanel);

        function Cart(container, _ref) {
            var catalogResourceServer = _ref.catalogResourceServer,
                left = _ref.left,
                top = _ref.top,
                _ref$cols = _ref.cols,
                cols = _ref$cols === undefined ? 2 : _ref$cols,
                _ref$imageWidth = _ref.imageWidth,
                imageWidth = _ref$imageWidth === undefined ? 250 : _ref$imageWidth,
                _ref$imageHeight = _ref.imageHeight,
                imageHeight = _ref$imageHeight === undefined ? 250 : _ref$imageHeight,
                _ref$internal = _ref.internal,
                internal = _ref$internal === undefined ? true : _ref$internal;
            classCallCheck(this, Cart);

            var _this = possibleConstructorReturn(this, (Cart.__proto__ || Object.getPrototypeOf(Cart)).call(this, container, { id: 'panel.cart', title: T$6.getText('cart.header'), left: left, top: top, modal: true }));

            _this._catalogResourceServer = catalogResourceServer;
            _this._body.classList.add('cart');
            _this._cols = cols;
            _this._internal = internal;
            _this._link = '//my.kosmosnimki.ru/Home/Settings';
            _this._submit = _this._submit.bind(_this);
            _this._imageWidth = imageWidth;
            _this._imageHeight = imageHeight;
            _this._items = [];
            _this._permalink = '';
            _this.hide();

            var dlgCartContainer = create_container();
            dlgCartContainer.classList.add('cart-dialog');
            _this._dlgCart = new FloatingPanel(dlgCartContainer, { id: 'cart.dialog', left: left, top: top, modal: true });
            _this._dlgCart.hide();
            _this._dlgCart.content.innerHTML = '<div>' + T$6.getText('cart.success.header') + '</div>\n        <div>' + T$6.getText('cart.success.content') + '</div>\n        <div>' + T$6.getText('cart.success.footer') + '</div>';
            _this._dlgCart.footer.innerHTML = '<button class="cart-close-button">' + T$6.getText('cart.close') + '</button>';
            _this._dlgCart.footer.querySelector('button').addEventListener('click', function (e) {
                _this._dlgCart.hide();
            });

            _this._requiredFields = _this._internal ? ['.cart-customer input', '.cart-project input', '.cart-project-number', '.cart-person input', '.cart-email input'] : ['.cart-person input', '.cart-email input'];
            return _this;
        }

        createClass(Cart, [{
            key: '_view',
            value: function _view() {
                var _this2 = this;

                this._updateItemsNumber();
                var warning = T$6.getText('cart.warning').replace(/\r\n/, '<br />');
                var userInfo = window.Catalog.userInfo;
                this._content.innerHTML = '<div class="cart-order">\n            <div class="cart-order-form">\n                <div class="cart-order-warning">' + warning + '</div>\n                <table>\n                    <tbody>\n                        <tr class="cart-customer">\n                            <td>\n                                <label>' + T$6.getText('cart.customer') + '</label>\n                            </td>\n                            <td>\n                                <input type="text" value="" />\n                            </td>\n                            <td>' + (this._internal ? '*' : '') + '</td>\n                        </tr>\n                        ' + (this._internal ? '<tr class="cart-project">\n                                <td>\n                                    <label>' + T$6.getText('cart.project.name') + '</label>\n                                </td>\n                                <td>\n                                    <input type="text" value="" />\n                                </td>\n                                <td>*</td>\n                            </tr>\n                            <tr class="cart-project-type">\n                                <td>\n                                    <label>' + T$6.getText('cart.project.type.title') + '</label>                                    \n                                </td>\n                                <td>\n                                    <select>\n                                        <option value="commercial">' + T$6.getText('cart.project.type.commercial') + '</option>\n                                        <option value="internal">' + T$6.getText('cart.project.type.internal') + '</option>\n                                        <option value="presale">' + T$6.getText('cart.project.type.presale') + '</option>\n                                    </select>                                  \n                                </td>\n                                <td>*</td>\n                            </tr>\n                            <tr class="cart-project-number">\n                                <td>\n                                    <label>' + T$6.getText('cart.project.number') + '</label>\n                                </td>\n                                <td>\n                                    <input type="text" class="cart-project-number" value="" />\n                                </td>\n                                <td>*</td>\n                            </tr>' : '') + '\n                        <tr class="cart-person">\n                            <td>\n                                <label>' + T$6.getText('cart.person') + '</label>\n                            </td>\n                            <td>\n                                <input type="text" value="' + userInfo.FullName + '" />\n                            </td>\n                            <td>*</td>\n                        </tr>\n                        ' + (this._internal ? '<tr class="cart-company">\n                                <td>\n                                    <label>' + T$6.getText('cart.company') + '</label>\n                                </td>\n                                <td>\n                                    <input type="text" readonly value="' + userInfo.Organization + '" />\n                                </td>\n                                <td></td>\n                            </tr>' : '') + '\n                        <tr class="cart-email">\n                            <td>\n                                <label>' + T$6.getText('cart.email') + '</label>\n                            </td>\n                            <td>\n                                <input type="text" value="' + userInfo.Email + '" />\n                            </td>\n                            <td>*</td>\n                        </tr>\n                        <tr class="cart-comment">\n                            <td>\n                                <label>' + T$6.getText('cart.comment') + '</label>\n                            </td>\n                            <td>                            \n                                <textarea maxlength="1000"></textarea>\n                            </td>\n                            <td>                                \n                            </td>\n                        </tr>                  \n                    </tbody>\n                </table>                \n            </div>\n            <div class="cart-order-footer">                \n                <button class="cart-order-submit">' + T$6.getText('cart.submit') + '</button>\n            </div>\n        </div>';

                this._content.querySelector('.cart-order-warning .link').addEventListener('click', function (e) {
                    var matches = /link=([^&]+)/g.exec(_this2.permalink);
                    if (Array.isArray(matches) && matches.length > 0) {
                        var _matches = slicedToArray(matches, 2),
                            link = _matches[0],
                            id = _matches[1];

                        read_permalink(id).then(function (response) {
                            localStorage.setItem('view_state', JSON.stringify(response));
                            window.location = _this2._link;
                        }).catch(function (e) {
                            console.log(e);
                        });
                    } else {
                        console.log('Permalink not set:', _this2._permalink);
                    }
                });

                this._submitButton = this._content.querySelector('.cart-order-submit');
                this._submitButton.addEventListener('click', this._submit);

                if (this._internal) {
                    this._projectTypeSelect = this._content.querySelector('.cart-project-type select');
                    var update_project_number = function update_project_number() {
                        var field = _this2._content.querySelector('.cart-project-number');
                        var input = field.querySelector('input');
                        var required = _this2._projectTypeSelect.value === 'commercial';
                        input.readOnly = !required;
                        field.querySelector('td:nth-child(3)').innerText = required ? '*' : '';
                        if (input.readOnly) {
                            input.classList.add('read-only');
                        } else {
                            input.classList.remove('read-only');
                        }
                    };
                    update_project_number();
                    this._projectTypeSelect.addEventListener('change', function (e) {
                        return update_project_number();
                    });
                }

                this.clear = this.clear.bind(this);

                this._requiredFields.forEach(function (s) {
                    var el = _this2._container.querySelector(s === '.cart-project-number' ? s + ' input' : s);
                    if (el) {
                        el.addEventListener('focus', function (e) {
                            el.classList.remove('invalid-field');
                        });
                    }
                });
            }
        }, {
            key: '_updateItemsNumber',
            value: function _updateItemsNumber() {
                var event = document.createEvent('Event');
                event.initEvent('items:change', false, false);
                event.detail = this.count;
                this.dispatchEvent(event);
            }
        }, {
            key: 'hide',
            value: function hide() {
                get(Cart.prototype.__proto__ || Object.getPrototypeOf(Cart.prototype), 'hide', this).call(this);
                var event = document.createEvent('Event');
                event.initEvent('hide', false, false);
                this.dispatchEvent(event);
            }
        }, {
            key: 'show',
            value: function show() {
                get(Cart.prototype.__proto__ || Object.getPrototypeOf(Cart.prototype), 'show', this).call(this);
                var bounds = document.body.getBoundingClientRect();
                var header = document.getElementById('header');
                var headerBounds = header.getBoundingClientRect();
                var height = bounds.height - headerBounds.height;
                var cartBounds = this.body.getBoundingClientRect();
                if (cartBounds.height > height) {
                    var _headerBounds = this.header.getBoundingClientRect();
                    var footerBounds = this.footer.getBoundingClientRect();
                    this.content.style.maxHeight = height - _headerBounds.height - footerBounds.height + 'px';
                    this.content.style.overflowY = 'auto';
                } else {
                    this.content.style.maxHeight = 'auto';
                    this.content.style.overflowY = 'none';
                }
            }
        }, {
            key: '_valid',
            value: function _valid(s) {
                if (this._internal && s === '.cart-project-number') {
                    switch (this._projectTypeSelect.value) {
                        case 'commercial':
                            var _el = this._container.querySelector(s + ' input');
                            if (_el && _el.value.trim() === '') {
                                _el.classList.add('invalid-field');
                                return false;
                            } else {
                                _el.classList.remove('invalid-field');
                                return true;
                            }
                        case 'internal':
                        case 'presale':
                            return true;
                        default:
                            return false;
                    }
                }
                var el = this._container.querySelector(s);
                if (el && el.value.trim() === '') {
                    el.classList.add('invalid-field');
                    return false;
                } else {
                    el.classList.remove('invalid-field');
                    return true;
                }
            }
        }, {
            key: '_validate',
            value: function _validate() {
                return this._requiredFields.map(this._valid.bind(this)).every(function (s) {
                    return s;
                });
            }
        }, {
            key: '_getProjectType',
            value: function _getProjectType(type) {
                switch (type) {
                    case 'commercial':
                        return 'К';
                    case 'internal':
                        return 'ВН';
                    case 'presale':
                        return 'ПС';
                    default:
                        throw 'unknown project type';
                }
            }
        }, {
            key: '_submit',
            value: function _submit() {
                var _this3 = this;

                if (this._validate()) {
                    this._catalogResourceServer.sendPostRequest('CreateOrder.ashx', {
                        TinyReference: this.permalink,
                        ReceiveWay: '',
                        Customer: this._container.querySelector('.cart-customer input').value,
                        Project: this._internal ? this._container.querySelector('.cart-project input').value : '',
                        ProjectType: this._getProjectType(this._internal ? this._container.querySelector('.cart-project-type select').value : 'commercial'),
                        ContractNumber: this._internal ? this._container.querySelector('input.cart-project-number').value : '',
                        Name: '',
                        Surname: this._container.querySelector('.cart-person input').value,
                        Organization: this._internal ? this._container.querySelector('.cart-company input').value : '',
                        Email: this._container.querySelector('.cart-email input').value,
                        Phone: '',
                        Comment: this._container.querySelector('.cart-comment textarea').value,
                        Scenes: this.items.map(function (item) {
                            return item.sceneid;
                        }).join(','),
                        Internal: this._internal
                    }).then(function (response) {
                        _this3.hide();
                        if (response.Status === 'ok') {
                            _this3._dlgCart.show();
                        } else {
                            console.log(response);
                        }
                    }).catch(function (e) {
                        _this3.hide();
                        console.log(e);
                    });
                }
            }
        }, {
            key: 'clear',
            value: function clear() {
                this._items = [];
                this._view();
                this.hide();
            }
        }, {
            key: 'items',
            get: function get$$1() {
                return this._items;
            },
            set: function set$$1(value) {
                this._items = value;
                this._view();
            }
        }, {
            key: 'permalink',
            set: function set$$1(value) {
                this._permalink = value;
            },
            get: function get$$1() {
                return this._permalink;
            }
        }, {
            key: 'count',
            get: function get$$1() {
                return this.items.length;
            }
        }]);
        return Cart;
    }(FloatingPanel);

    var T$7 = Translations$1;

    T$7.addText('rus', {
        operator: {
            dg: 'Digital Globe, США',
            airbus: 'Airbus Defence & Space, Франция',
            siis: 'SI Imaging Services (SIIS), Южная Корея',
            ge: 'GeoEye, США',
            iinv: 'ImageSat International, N.V., Израиль',
            spaceview: 'Beijing Space View Technology Co., Ltd (Space View), КНР',
            vniiem: 'ФГУП "НПП ВНИИЭМ", Беларусь',
            blackbridge: 'BlackBridge AG, ФРГ',
            usgs: 'United States Geological Survey, США',
            roskosmos: 'Роскосмос',
            twentyfirst: 'Twenty First Century AT, China'
        }
    });

    T$7.addText('eng', {
        operator: {
            dg: 'Digital Globe, USA',
            airbus: 'Airbus Defence & Space, France',
            siis: 'SI Imaging Services (SIIS), South Korea',
            ge: 'GeoEye, USA',
            iinv: 'ImageSat International, N.V., Israel',
            spaceview: 'Beijing Space View Technology Co., Ltd (Space View), China',
            vniiem: 'ФГУП "НПП ВНИИЭМ", Belarus',
            blackbridge: 'BlackBridge AG, Germany',
            usgs: 'United States Geological Survey, USA',
            roskosmos: 'Roskosmos',
            twentyfirst: 'Twenty First Century AT, China'
        }
    });

    var Satellite = function () {
        function Satellite(_ref) {
            var id = _ref.id,
                platforms = _ref.platforms,
                name = _ref.name,
                resolution = _ref.resolution,
                swath = _ref.swath,
                operator = _ref.operator,
                since = _ref.since,
                _ref$ms = _ref.ms,
                ms = _ref$ms === undefined ? true : _ref$ms,
                _ref$arity = _ref.arity,
                arity = _ref$arity === undefined ? 1 : _ref$arity,
                _ref$restricted = _ref.restricted,
                restricted = _ref$restricted === undefined ? false : _ref$restricted,
                _ref$checked = _ref.checked,
                checked = _ref$checked === undefined ? false : _ref$checked;
            classCallCheck(this, Satellite);

            this._id = id;
            this._platforms = platforms;
            this._name = name;
            this._resolution = resolution;
            this._swath = swath;
            this._operator = operator;
            this._since = since;
            this._arity = arity;
            this._ms = ms;
            this._restricted = restricted;
            this._checked = checked;
        }

        createClass(Satellite, [{
            key: 'islocal',
            value: function islocal(archive) {
                switch (archive) {
                    case 'global':
                        return ' AND islocal = FALSE';
                    case 'local':
                        return ' AND islocal = TRUE';
                    default:
                    case 'all':
                        return '';
                }
            }
        }, {
            key: 'condition',
            value: function condition(archive) {
                return 'platform IN (' + this.platforms.map(function (x) {
                    return '\'' + x + '\'';
                }).join(',') + ')' + this.islocal(archive);
            }
        }, {
            key: 'id',
            get: function get$$1() {
                return this._id;
            }
        }, {
            key: 'platforms',
            get: function get$$1() {
                return this._platforms;
            }
        }, {
            key: 'name',
            get: function get$$1() {
                return this._name;
            }
        }, {
            key: 'resolution',
            get: function get$$1() {
                return this._resolution;
            }
        }, {
            key: 'swath',
            get: function get$$1() {
                return this._swath;
            }
        }, {
            key: 'operator',
            get: function get$$1() {
                return this._operator;
            }
        }, {
            key: 'since',
            get: function get$$1() {
                return this._since;
            }
        }, {
            key: 'arity',
            get: function get$$1() {
                return this._arity;
            }
        }, {
            key: 'ms',
            get: function get$$1() {
                return this._ms;
            }
        }, {
            key: 'restricted',
            get: function get$$1() {
                return this._restricted;
            }
        }, {
            key: 'checked',
            get: function get$$1() {
                return this._checked;
            },
            set: function set$$1(value) {
                this._checked = value;
            }
        }]);
        return Satellite;
    }();

    var DG = function (_Satellite) {
        inherits(DG, _Satellite);

        function DG(_ref2) {
            var id = _ref2.id,
                platforms = _ref2.platforms,
                name = _ref2.name,
                resolution = _ref2.resolution,
                swath = _ref2.swath,
                since = _ref2.since,
                ms = _ref2.ms;
            classCallCheck(this, DG);
            return possibleConstructorReturn(this, (DG.__proto__ || Object.getPrototypeOf(DG)).call(this, { id: id, platforms: platforms, name: name, resolution: resolution, swath: swath, operator: T$7.getText('operator.dg'), since: since, ms: ms }));
        }

        return DG;
    }(Satellite);

    var KOMPSAT = function (_Satellite2) {
        inherits(KOMPSAT, _Satellite2);

        function KOMPSAT(_ref3) {
            var id = _ref3.id,
                platforms = _ref3.platforms,
                name = _ref3.name,
                resolution = _ref3.resolution,
                swath = _ref3.swath,
                since = _ref3.since;
            classCallCheck(this, KOMPSAT);
            return possibleConstructorReturn(this, (KOMPSAT.__proto__ || Object.getPrototypeOf(KOMPSAT)).call(this, { id: id, platforms: platforms, name: name, resolution: resolution, swath: swath, operator: T$7.getText('operator.siis'), since: since }));
        }

        return KOMPSAT;
    }(Satellite);

    var SpaceView = function (_Satellite3) {
        inherits(SpaceView, _Satellite3);

        function SpaceView(_ref4) {
            var id = _ref4.id,
                platforms = _ref4.platforms,
                name = _ref4.name,
                resolution = _ref4.resolution,
                swath = _ref4.swath,
                arity = _ref4.arity,
                since = _ref4.since;
            classCallCheck(this, SpaceView);
            return possibleConstructorReturn(this, (SpaceView.__proto__ || Object.getPrototypeOf(SpaceView)).call(this, { id: id, platforms: platforms, name: name, resolution: resolution, swath: swath, operator: T$7.getText('operator.spaceview'), arity: arity, since: since, restricted: true }));
        }

        return SpaceView;
    }(Satellite);

    var GF1 = function (_SpaceView) {
        inherits(GF1, _SpaceView);

        function GF1(_ref5) {
            var id = _ref5.id,
                platforms = _ref5.platforms,
                name = _ref5.name,
                resolution = _ref5.resolution,
                swath = _ref5.swath,
                since = _ref5.since,
                sensor = _ref5.sensor;
            classCallCheck(this, GF1);

            var _this4 = possibleConstructorReturn(this, (GF1.__proto__ || Object.getPrototypeOf(GF1)).call(this, { id: id, platforms: platforms, name: name, resolution: resolution, swath: swath, since: since }));

            _this4._sensor = sensor;
            return _this4;
        }

        createClass(GF1, [{
            key: 'condition',
            value: function condition(archive) {
                return get(GF1.prototype.__proto__ || Object.getPrototypeOf(GF1.prototype), 'condition', this).call(this, archive) + ' AND sensor = \'' + this.sensor + '\'';
            }
        }, {
            key: 'sensor',
            get: function get$$1() {
                return this._sensor;
            }
        }]);
        return GF1;
    }(SpaceView);

    var SV1 = function (_SpaceView2) {
        inherits(SV1, _SpaceView2);

        function SV1() {
            classCallCheck(this, SV1);
            return possibleConstructorReturn(this, (SV1.__proto__ || Object.getPrototypeOf(SV1)).call(this, { id: 'SV1', platforms: ['GJ1A', 'GJ1B', 'GJ1C', 'GJ1D'], name: 'Superview-1', resolution: 0.5, swath: 12, arity: 4, since: '26.12.2016, 09.01.2018' }));
        }

        return SV1;
    }(SpaceView);

    var Airbus = function (_Satellite4) {
        inherits(Airbus, _Satellite4);

        function Airbus(_ref6) {
            var id = _ref6.id,
                platforms = _ref6.platforms,
                name = _ref6.name,
                resolution = _ref6.resolution,
                swath = _ref6.swath,
                since = _ref6.since,
                arity = _ref6.arity,
                ms = _ref6.ms;
            classCallCheck(this, Airbus);
            return possibleConstructorReturn(this, (Airbus.__proto__ || Object.getPrototypeOf(Airbus)).call(this, { id: id, platforms: platforms, name: name, resolution: resolution, swath: swath, operator: T$7.getText('operator.airbus'), since: since, arity: arity, ms: ms }));
        }

        return Airbus;
    }(Satellite);

    var PHR = function (_Airbus) {
        inherits(PHR, _Airbus);

        function PHR() {
            classCallCheck(this, PHR);
            return possibleConstructorReturn(this, (PHR.__proto__ || Object.getPrototypeOf(PHR)).call(this, { id: 'PHR', platforms: ['PHR1A', 'PHR1B', '1A_PM', '1B_PM', 'PHR-1A', 'PHR-1B'], name: 'Pleiades A-B', resolution: 0.5, swath: 20, since: '2011, 2012', arity: 2 }));
        }

        createClass(PHR, [{
            key: 'condition',
            value: function condition(archive) {
                switch (archive) {
                    case 'all':
                        return "platform IN ('PHR1A','PHR1B','1A_PM','1B_PM','PHR-1A','PHR-1B')";
                    case 'local':
                        return "platform IN ('1A_PM','1B_PM','PHR-1A','PHR-1B')";
                    case 'global':
                    default:
                        return get(PHR.prototype.__proto__ || Object.getPrototypeOf(PHR.prototype), 'condition', this).call(this, archive);
                }
            }
        }]);
        return PHR;
    }(Airbus);

    var PLD_1A = function (_Airbus2) {
        inherits(PLD_1A, _Airbus2);

        function PLD_1A() {
            classCallCheck(this, PLD_1A);
            return possibleConstructorReturn(this, (PLD_1A.__proto__ || Object.getPrototypeOf(PLD_1A)).call(this, { id: '1A_PHR', platforms: ['1A-PHR-1A', '1A-PHR-1B'], name: '1ATLAS (PLD)', resolution: 0.5, swath: 20, since: '2011, 2012', arity: 2 }));
        }

        createClass(PLD_1A, [{
            key: 'condition',
            value: function condition(archive) {
                return "platform IN ('1A-PHR-1A','1A-PHR-1B')";
            }
        }, {
            key: 'restricted',
            get: function get$$1() {
                return true;
            }
        }]);
        return PLD_1A;
    }(Airbus);

    var SP5_10MS = function (_Airbus3) {
        inherits(SP5_10MS, _Airbus3);

        function SP5_10MS() {
            classCallCheck(this, SP5_10MS);
            return possibleConstructorReturn(this, (SP5_10MS.__proto__ || Object.getPrototypeOf(SP5_10MS)).call(this, { id: 'SP5_10MS', platforms: ['SPOT 5'], name: 'SPOT 5 (10m)', resolution: 10, swath: 20, since: '2002 - 2015' }));
        }

        createClass(SP5_10MS, [{
            key: 'condition',
            value: function condition(archive, authorized) {
                return 'platform = \'SPOT 5\' AND sensor = \'J\'' + (authorized ? this.islocal(archive) : '');
            }
        }]);
        return SP5_10MS;
    }(Airbus);

    var SP5_5MS = function (_Airbus4) {
        inherits(SP5_5MS, _Airbus4);

        function SP5_5MS() {
            classCallCheck(this, SP5_5MS);
            return possibleConstructorReturn(this, (SP5_5MS.__proto__ || Object.getPrototypeOf(SP5_5MS)).call(this, { id: 'SP5_5MS', platforms: ['SPOT 5'], name: 'SPOT 5 (5m)', resolution: 5, swath: 20, since: '2002 - 2015' }));
        }

        createClass(SP5_5MS, [{
            key: 'condition',
            value: function condition(archive, authorized) {
                return 'platform = \'SPOT 5\' AND (sensor = \'J\' AND (spot5_a_exists = TRUE OR spot5_b_exists = TRUE))' + (authorized ? this.islocal(archive) : '');
            }
        }]);
        return SP5_5MS;
    }(Airbus);

    var SP5_5PC = function (_SP5_5MS) {
        inherits(SP5_5PC, _SP5_5MS);

        function SP5_5PC() {
            classCallCheck(this, SP5_5PC);

            var _this11 = possibleConstructorReturn(this, (SP5_5PC.__proto__ || Object.getPrototypeOf(SP5_5PC)).call(this));

            _this11._id = 'SP5_5PC';
            _this11._ms = false;
            return _this11;
        }

        createClass(SP5_5PC, [{
            key: 'condition',
            value: function condition(archive, authorized) {
                return 'platform = \'SPOT 5\' AND (sensor = \'A\' OR sensor = \'B\' AND spot5_b_exists = FALSE)' + (authorized ? this.islocal(archive) : '');
            }
        }]);
        return SP5_5PC;
    }(SP5_5MS);

    var SP5_2MS = function (_Airbus5) {
        inherits(SP5_2MS, _Airbus5);

        function SP5_2MS() {
            classCallCheck(this, SP5_2MS);
            return possibleConstructorReturn(this, (SP5_2MS.__proto__ || Object.getPrototypeOf(SP5_2MS)).call(this, { id: 'SP5_2MS', platforms: ['SPOT 5'], name: 'SPOT 5 (2.5m)', resolution: 2.5, swath: 20, since: '2002 - 2015' }));
        }

        createClass(SP5_2MS, [{
            key: 'condition',
            value: function condition(archive, authorized) {
                return 'platform = \'SPOT 5\' AND sensor = \'J\' AND spot5_a_exists = TRUE AND spot5_b_exists = TRUE' + (authorized ? this.islocal(archive) : '');
            }
        }]);
        return SP5_2MS;
    }(Airbus);

    var SP5_2PC = function (_SP5_2MS) {
        inherits(SP5_2PC, _SP5_2MS);

        function SP5_2PC() {
            classCallCheck(this, SP5_2PC);

            var _this13 = possibleConstructorReturn(this, (SP5_2PC.__proto__ || Object.getPrototypeOf(SP5_2PC)).call(this));

            _this13._id = 'SP5_2PC';
            _this13._ms = false;
            return _this13;
        }

        createClass(SP5_2PC, [{
            key: 'condition',
            value: function condition(archive, authorized) {
                return 'platform = \'SPOT 5\' AND sensor = \'A\' AND spot5_b_exists = TRUE' + (authorized ? this.islocal(archive) : '');
            }
        }]);
        return SP5_2PC;
    }(SP5_2MS);

    var SP6_7 = function (_Airbus6) {
        inherits(SP6_7, _Airbus6);

        function SP6_7() {
            classCallCheck(this, SP6_7);
            return possibleConstructorReturn(this, (SP6_7.__proto__ || Object.getPrototypeOf(SP6_7)).call(this, { id: 'SP6_7', platforms: ['SPOT6', 'SPOT 6', 'SPOT7', 'SPOT 7'], name: 'SPOT 6-7', resolution: 1.5, swath: 60, since: '2012, 2014', arity: 2 }));
        }

        createClass(SP6_7, [{
            key: 'condition',
            value: function condition(archive, authorized) {
                return 'platform IN (\'SPOT6\',\'SPOT 6\',\'SPOT7\',\'SPOT 7\')' + (authorized ? this.islocal(archive) : '');
            }
        }]);
        return SP6_7;
    }(Airbus);

    var SP6_7_1A = function (_Airbus7) {
        inherits(SP6_7_1A, _Airbus7);

        function SP6_7_1A() {
            classCallCheck(this, SP6_7_1A);
            return possibleConstructorReturn(this, (SP6_7_1A.__proto__ || Object.getPrototypeOf(SP6_7_1A)).call(this, { id: '1A_SP6_7', platforms: ['1A-SPOT-6', '1A-SPOT-7'], name: '1ATLAS (SP)', resolution: 1.5, swath: 60, since: '2012, 2014', arity: 2 }));
        }

        createClass(SP6_7_1A, [{
            key: 'condition',
            value: function condition(archive, authorized) {
                return "platform IN ('1A-SPOT-6','1A-SPOT-7')";
            }
        }, {
            key: 'restricted',
            get: function get$$1() {
                return true;
            }
        }]);
        return SP6_7_1A;
    }(Airbus);

    var SP67_P = function (_Airbus8) {
        inherits(SP67_P, _Airbus8);

        function SP67_P() {
            classCallCheck(this, SP67_P);
            return possibleConstructorReturn(this, (SP67_P.__proto__ || Object.getPrototypeOf(SP67_P)).call(this, { id: 'SP67_P', platforms: ['SPOT-6', 'SPOT-7'], name: 'SPOT-6/7-P', resolution: 1.5, swath: 60, since: '2012, 2014', arity: 2 }));
        }

        createClass(SP67_P, [{
            key: 'condition',
            value: function condition(archive, authorized) {
                return "platform IN ('SPOT-6','SPOT-7') AND product = TRUE";
            }
        }, {
            key: 'restricted',
            get: function get$$1() {
                return true;
            }
        }]);
        return SP67_P;
    }(Airbus);

    var EROS = function (_Satellite5) {
        inherits(EROS, _Satellite5);

        function EROS(_ref7) {
            var id = _ref7.id,
                platforms = _ref7.platforms,
                name = _ref7.name,
                resolution = _ref7.resolution,
                swath = _ref7.swath,
                since = _ref7.since;
            classCallCheck(this, EROS);
            return possibleConstructorReturn(this, (EROS.__proto__ || Object.getPrototypeOf(EROS)).call(this, { id: id, platforms: platforms, name: name, resolution: resolution, swath: swath, operator: T$7.getText('operator.iinv'), restricted: true, since: since, ms: false }));
        }

        return EROS;
    }(Satellite);

    var RP = function (_Satellite6) {
        inherits(RP, _Satellite6);

        function RP(_ref8) {
            var id = _ref8.id,
                platforms = _ref8.platforms,
                name = _ref8.name,
                ms = _ref8.ms;
            classCallCheck(this, RP);
            return possibleConstructorReturn(this, (RP.__proto__ || Object.getPrototypeOf(RP)).call(this, { id: id, platforms: platforms, name: name, resolution: 1, swath: 38, operator: T$7.getText('operator.roskosmos'), arity: 3, since: '2013, 2014, 2016', ms: ms }));
        }

        createClass(RP, [{
            key: 'condition',
            value: function condition(archive) {
                return get(RP.prototype.__proto__ || Object.getPrototypeOf(RP.prototype), 'condition', this).call(this, archive) + ' AND sensor = \'\u0421\u041F\u041F\u0418 "\u0421\u0430\u043D\u0433\u0443\u0440-1\u0423"\'';
            }
        }]);
        return RP;
    }(Satellite);

    var RP_PC = function (_RP) {
        inherits(RP_PC, _RP);

        function RP_PC() {
            classCallCheck(this, RP_PC);
            return possibleConstructorReturn(this, (RP_PC.__proto__ || Object.getPrototypeOf(RP_PC)).call(this, { id: 'RP_PC', platforms: ['Ресурс-П1', 'Ресурс-П2', 'Ресурс-П3'], name: 'Ресурс-П', ms: false }));
        }

        createClass(RP_PC, [{
            key: 'condition',
            value: function condition(archive) {
                return get(RP_PC.prototype.__proto__ || Object.getPrototypeOf(RP_PC.prototype), 'condition', this).call(this, archive) + ' AND spot5_a_exists = TRUE AND spot5_b_exists = FALSE';
            }
        }]);
        return RP_PC;
    }(RP);

    var RP_1MS = function (_RP2) {
        inherits(RP_1MS, _RP2);

        function RP_1MS() {
            classCallCheck(this, RP_1MS);
            return possibleConstructorReturn(this, (RP_1MS.__proto__ || Object.getPrototypeOf(RP_1MS)).call(this, { id: 'RP_1MS', platforms: ['Ресурс-П1', 'Ресурс-П2', 'Ресурс-П3'], name: 'Ресурс-П (1м)', resolution: 1, ms: true }));
        }

        createClass(RP_1MS, [{
            key: 'condition',
            value: function condition(archive) {
                return get(RP_1MS.prototype.__proto__ || Object.getPrototypeOf(RP_1MS.prototype), 'condition', this).call(this, archive) + ' AND spot5_a_exists = TRUE AND spot5_b_exists = TRUE';
            }
        }]);
        return RP_1MS;
    }(RP);

    var RP_4MS = function (_RP3) {
        inherits(RP_4MS, _RP3);

        function RP_4MS() {
            classCallCheck(this, RP_4MS);
            return possibleConstructorReturn(this, (RP_4MS.__proto__ || Object.getPrototypeOf(RP_4MS)).call(this, { id: 'RP_4MS', platforms: ['Ресурс-П1', 'Ресурс-П2', 'Ресурс-П3'], name: 'Ресурс-П (4м)', resolution: 4, ms: true }));
        }

        createClass(RP_4MS, [{
            key: 'condition',
            value: function condition(archive) {
                return get(RP_4MS.prototype.__proto__ || Object.getPrototypeOf(RP_4MS.prototype), 'condition', this).call(this, archive) + ' AND spot5_b_exists = TRUE';
            }
        }]);
        return RP_4MS;
    }(RP);

    var Triplesat = function (_Satellite7) {
        inherits(Triplesat, _Satellite7);

        function Triplesat() {
            classCallCheck(this, Triplesat);
            return possibleConstructorReturn(this, (Triplesat.__proto__ || Object.getPrototypeOf(Triplesat)).call(this, {
                id: '21AT',
                platforms: ['TripleSat Constellation-1', 'TripleSat Constellation-2', 'TripleSat Constellation-3'],
                name: 'TripleSat',
                resolution: 1,
                swath: 23,
                arity: 3,
                operator: T$7.getText('operator.twentyfirst'),
                since: '2015',
                ms: true,
                restricted: true
            }));
        }

        return Triplesat;
    }(Satellite);

    var satellites = {
        ms: [new DG({ id: 'WV04', platforms: ['WV04'], name: 'WorldView 4', resolution: 0.3, swath: 13.2, since: '2016' }), new DG({ id: 'WV03', platforms: ['WV03'], name: 'WorldView 3', resolution: 0.3, swath: 13.1, since: '2014' }), new DG({ id: 'WV02', platforms: ['WV02'], name: 'WorldView 2', resolution: 0.4, swath: 16.4, since: '2009' }), new DG({ id: 'GE01', platforms: ['GE01'], name: 'GeoEye-1', resolution: 0.4, swath: 15.2, since: '2008' }), new PHR(), new DG({ id: 'QB02', platforms: ['QB02'], name: 'Quickbird', resolution: 0.5, swath: 16.5, since: '2001 - 2015' }), new KOMPSAT({ id: 'KOMPSAT3A', platforms: ['KOMPSAT3A'], name: 'KOMPSAT-3A', resolution: 0.5, swath: 12, since: '2015' }), new KOMPSAT({ id: 'KOMPSAT3', platforms: ['KOMPSAT3'], name: 'KOMPSAT-3', resolution: 0.7, swath: 16, since: '2012' }), new SV1(), new Satellite({ id: 'IK', platforms: ['IK-2', 'IKONOS-2'], name: 'IKONOS', resolution: 0.8, swath: 11.3, operator: T$7.getText('operator.ge'), since: '1999 - 2015' }), new SpaceView({ id: 'GF2', platforms: ['GF2'], name: 'GaoFen-2', resolution: 0.8, swath: 45, since: '2014' }), new KOMPSAT({ id: 'KOMPSAT2', platforms: ['KOMPSAT2'], name: 'KOMPSAT-2', resolution: 1, swath: 15, since: '2006' }), new Triplesat(), new RP_1MS(), new SP6_7(), new Satellite({ id: 'BKA', platforms: ['BKA'], name: 'БелКА', resolution: 2, swath: 20, operator: T$7.getText('operator.vniiem'), since: '2012', restricted: true }), new GF1({ id: 'GF1_2m', platforms: ['GF1'], name: 'GaoFen-1 (2m)', resolution: 2, swath: 60, since: '2013', sensor: 'A' }), new SpaceView({ id: 'ZY3', platforms: ['ZY3', 'ZY302'], name: 'ZiYuan-3', resolution: 2.1, swath: 51, since: '2012' }),
        // new SP5_2MS(),
        new RP_4MS(),
        // new SP5_5MS(),
        new Satellite({ id: 'RE', platforms: ['RE'], name: 'RapidEye', resolution: 6.5, swath: 77, operator: T$7.getText('operator.blackbridge'), since: '2008', restricted: true }), new SP5_10MS(), new Satellite({ id: 'LANDSAT8', platforms: ['LANDSAT_8'], name: 'LANDSAT 8', resolution: 15, swath: 185, operator: T$7.getText('operator.usgs'), since: '2013', restricted: true }), new GF1({ id: 'GF1_16m', platforms: ['GF1'], name: 'GaoFen-1 (16m)', resolution: 16, swath: 800, since: '2013', sensor: 'B' }), new SP6_7_1A(), new PLD_1A(), new SP67_P()],
        pc: [new DG({ id: 'WV01', platforms: ['WV01'], name: 'WorldView 1', resolution: 0.5, swath: 17.6, since: '2007' }), new EROS({ id: 'EROSB', platforms: ['EROS-B'], name: 'EROS-B', resolution: 0.7, swath: 7, since: '2006' }), new RP_PC(), new EROS({ id: 'EROSA', platforms: ['EROS-A1'], name: 'EROS-A', resolution: 1.9, swath: 14, since: '2000' }),
        // new SP5_2PC(),
        new SP5_5PC()]
    };

    function get_name(a, x) {
        return x.platforms.reduce(function (b, y) {
            b[y] = x.name;
            return b;
        }, a);
    }

    var names = satellites.ms.reduce(get_name, {});
    names = satellites.pc.reduce(get_name, names);

    function getSatelliteName(platform) {
        return names[platform];
    }

    var T$8 = Translations$1;

    T$8.addText('rus', {
        results: {
            title: 'Найденные снимки',
            sceneid: 'ID',
            date: 'Дата',
            satellite: 'Спутник',
            clouds: 'Обл.',
            angle: 'Угол',
            stereo: 'Стерео',
            visibility: 'Видимость',
            cart: 'Добавить все в корзину'
        },
        warning: {
            title: 'Внимание'
        }
    });

    T$8.addText('eng', {
        results: {
            title: 'Found images',
            sceneid: 'ID',
            date: 'Date',
            satellite: 'Satellite',
            clouds: 'Clouds',
            angle: 'Angle',
            stereo: 'Stereo',
            visibility: 'Visibility',
            cart: 'Add all to cart'
        },
        warning: {
            title: 'Warning'
        }
    });

    var ResultList = function (_EventTarget) {
        inherits(ResultList, _EventTarget);

        function ResultList(container, _ref) {
            var restricted = _ref.restricted;
            classCallCheck(this, ResultList);

            var _this = possibleConstructorReturn(this, (ResultList.__proto__ || Object.getPrototypeOf(ResultList)).call(this));

            _this._cart = {};
            _this._restricted = restricted;
            _this._container = container;
            _this._container.classList.add('result-list');
            _this._onColumnClick = _this._onColumnClick.bind(_this);
            _this._onCellClick = _this._onCellClick.bind(_this);
            _this._onRowMouseOver = _this._onRowMouseOver.bind(_this);
            _this._onRowMouseOut = _this._onRowMouseOut.bind(_this);
            _this._onSort = _this._onSort.bind(_this);
            _this._activeInfo = null;
            _this._disableMouseHover = false;
            _this._indexBy = 'gmx_id';
            _this._fields = {
                'visible': {
                    type: 'string',
                    icon: 'search',
                    default: false,
                    width: 30,
                    styler: function styler(item) {
                        switch (item.visible) {
                            case 'visible':
                                return 'search search-visibility-off';
                            case 'hidden':
                                return 'search search-visibility-on';
                            case 'loading':
                                return 'search-visibility-loading';
                            case 'failed':
                                return 'search-visibility-failed';
                            default:
                                return '';
                        }
                    }
                },
                'stereo': {
                    columnIcon: 'search search-stereo',
                    type: 'boolean',
                    icon: 'search',
                    yes: 'search-stereo',
                    sortable: true,
                    default: false,
                    tooltip: T$8.getText('results.stereo'),
                    width: 32,
                    formatter: function formatter(item) {
                        switch (_typeof(item.stereo)) {
                            case 'string':
                                return item.stereo !== 'NONE' && item.stereo !== '';
                            case 'boolean':
                                return item.stereo;
                            default:
                                return false;
                        }
                    }
                },
                'platform': {
                    type: 'string',
                    name: T$8.getText('results.satellite'),
                    sortable: true,
                    formatter: function formatter(item) {
                        switch (item.platform) {
                            case 'SPOT6':
                            case 'SPOT 6':
                                return item.islocal ? 'SPOT 6' : 'SPOT 6 (A)';
                            case 'SPOT7':
                            case 'SPOT 7':
                                return item.islocal ? 'SPOT 7' : 'SPOT 7 (A)';
                            case 'SPOT-6':
                                return item.product ? 'SPOT 6 (P)' : 'SPOT 6';
                            case 'SPOT-7':
                                return item.product ? 'SPOT 7 (P)' : 'SPOT 7';
                            case 'SPOT 5':
                                var sp5 = 'SPOT 5';
                                if (item.sensor === 'J') {
                                    if (item.spot5_a_exists & item.spot5_b_exists) {
                                        sp5 = 'SPOT 5 - 2.5ms';
                                    } else if (item.spot5_a_exists || item.spot5_b_exists) {
                                        sp5 = 'SPOT 5 - 5ms';
                                    } else {
                                        sp5 = 'SPOT 5 - 10ms';
                                    }
                                } else if (item.sensor === 'A' || item.sensor === 'B' && !item.spot5_b_exists) {
                                    sp5 = 'SPOT 5 - 5pan';
                                } else if (item.sensor === 'A' && item.spot5_b_exists) {
                                    sp5 = 'SPOT 5 - 2.5pan';
                                }
                                return '' + sp5 + (item.islocal ? '' : ' (A)');
                            case 'Ресурс-П1':
                            case 'Ресурс-П2':
                            case 'Ресурс-П3':
                                if (item.spot5_a_exists && !item.spot5_b_exists) {
                                    return item.platform + ' pan';
                                } else if (item.spot5_b_exists) {
                                    return item.platform + ' ms';
                                } else {
                                    return item.platform;
                                }
                            case 'GF1':
                                switch (item.sensor) {
                                    case 'A':
                                        return 'GaoFen-1 (2m)';
                                    case 'B':
                                        return 'GaoFen-1 (16m)';
                                    default:
                                        return 'GaoFen-1';
                                }
                            case '1A-PHR-1A':
                                return '1ATLAS (PHR-1A)';
                            case '1A-PHR-1B':
                                return '1ATLAS (PHR-1B)';
                            case '1A-SPOT-6':
                                return '1ATLAS (SP6)';
                            case '1A-SPOT-7':
                                return '1ATLAS (SP7)';
                            case 'TripleSat Constellation-1':
                                return 'Triplesat-1';
                            case 'TripleSat Constellation-2':
                                return 'Triplesat-2';
                            case 'TripleSat Constellation-3':
                                return 'Triplesat-3';
                            case 'GJ1A':
                                return 'Superview-1 01';
                            case 'GJ1B':
                                return 'Superview-1 02';
                            case 'GJ1C':
                                return 'Superview-1 03';
                            case 'GJ1D':
                                return 'Superview-1 04';
                            default:
                                return '' + getSatelliteName(item.platform) + (item.islocal ? ' (L)' : '');
                        }
                    },
                    width: 100
                },
                'cloudness': {
                    type: 'float',
                    name: T$8.getText('results.clouds'),
                    sortable: true,
                    formatter: function formatter(item) {
                        var value = item.cloudness;
                        return value < 0 ? '' : Math.round(value);
                    },
                    default: 0,
                    align: 'center',
                    width: 55
                },
                'tilt': {
                    type: 'float',
                    name: T$8.getText('results.angle'),
                    sortable: true,
                    formatter: function formatter(item) {
                        var value = item.tilt;
                        return value < 0 ? '' : Math.round(value);
                    },
                    default: 0,
                    align: 'center',
                    width: 55
                },
                'acqdate': {
                    type: 'date',
                    name: T$8.getText('results.date'),
                    formatter: function formatter(item) {
                        return item.acqdate.toLocaleDateString();
                    },
                    sortable: true,
                    width: 71
                },
                'info': {
                    type: 'boolean',
                    icon: 'search',
                    yes: 'search-info-off',
                    no: 'search-info-on',
                    width: 26
                },
                'cart': {
                    tooltip: T$8.getText('results.cart'),
                    columnIcon: 'cart-add cart-add-active',
                    type: 'boolean',
                    icon: 'cart-add',
                    yes: 'cart-add-active',
                    no: 'cart-add-passive',
                    width: 22
                }
            };

            _this._grid = new DataGrid(_this._container, {
                fields: _this.fields,
                filter: function filter(item) {
                    return Boolean(item.checked);
                },
                sortBy: { field: 'acqdate', asc: false },
                indexBy: _this._indexBy
            });
            _this._grid.addEventListener('cell:click', _this._onCellClick);
            _this._grid.addEventListener('column:click', _this._onColumnClick);
            _this._grid.addEventListener('row:mouseover', _this._onRowMouseOver);
            _this._grid.addEventListener('row:mouseout', _this._onRowMouseOut);
            _this._grid.addEventListener('sort', _this._onSort);
            _this._stopPropagation = _this._stopPropagation.bind(_this);
            return _this;
        }

        createClass(ResultList, [{
            key: '_stopPropagation',
            value: function _stopPropagation(e) {
                e.stopPropagation();
            }
        }, {
            key: 'getItemByIndex',
            value: function getItemByIndex(id) {
                return this._grid.getItemByIndex(id);
            }
        }, {
            key: '_onSort',
            value: function _onSort(e) {
                var event = document.createEvent('Event');
                event.initEvent('sort', false, false);
                event.detail = this._grid.items;
                this.dispatchEvent(event);
            }
        }, {
            key: '_onCellClick',
            value: function _onCellClick(e) {
                e.stopPropagation();
                var _e$detail = e.detail,
                    row = _e$detail.row,
                    cell = _e$detail.cell,
                    name = _e$detail.name,
                    field = _e$detail.field,
                    item = _e$detail.item;

                var event = document.createEvent('Event');
                var btn = null;

                switch (name) {
                    case 'cart':
                        btn = cell.querySelector('i');
                        if (btn.classList.contains('cart-add-active')) {
                            btn.classList.remove('cart-add-active');
                            btn.classList.add('cart-add-passive');
                            item.cart = false;
                        } else {
                            btn.classList.remove('cart-add-passive');
                            btn.classList.add('cart-add-active');
                            item.cart = true;
                        }

                        event.initEvent('cart', false, false);
                        event.detail = item;
                        this.dispatchEvent(event);
                        break;
                    case 'visible':
                        event.initEvent('visible', false, false);
                        event.detail = item;
                        this.dispatchEvent(event);
                        break;
                    case 'info':
                        var _cell$getBoundingClie = cell.getBoundingClientRect(),
                            left = _cell$getBoundingClie.left,
                            top = _cell$getBoundingClie.top;

                        var button = cell.querySelector('i');

                        if (this._activeInfo) {
                            this._activeInfo.classList.remove('search-info-off');
                            this._activeInfo.classList.add('search-info-on');
                        }

                        this._activeInfo = button;

                        event.initEvent('info', false, false);
                        event.detail = { item: item, left: left, top: top, button: button };
                        this.dispatchEvent(event);
                        break;
                    default:
                        // k = Object.keys(this._fields).indexOf('visible');
                        // btn = row.querySelectorAll('td')[k].querySelector('i');
                        // btn.classList.remove('search-visibility-on');
                        // btn.classList.add('search-visibility-off');
                        // // item.visible = 'visible';

                        // event.initEvent('visible', false, false);
                        // event.detail = item;
                        // this.dispatchEvent(event);
                        break;
                }
                switch (name) {
                    case 'cart':
                    case 'info':
                    case 'visible':
                        break;
                    default:
                        event.initEvent('click', false, false);
                        event.detail = e.detail;
                        this.dispatchEvent(event);
                        break;
                }
            }
        }, {
            key: '_updateChecked',
            value: function _updateChecked(state) {
                var btn = this._grid.getCol('cart').querySelector('i');
                if (state) {
                    btn.classList.remove('cart-add-passive');
                    btn.classList.add('cart-add-active');
                } else {
                    btn.classList.remove('cart-add-active');
                    btn.classList.add('cart-add-passive');
                }
            }
        }, {
            key: '_getChecked',
            value: function _getChecked() {
                if (this._grid.items.length === 0) {
                    return false;
                }
                var checked = false;
                if (this._grid.items.every(function (x) {
                    return x.cart;
                })) {
                    checked = true;
                } else if (this._grid.items.every(function (x) {
                    return !x.cart;
                })) {
                    checked = false;
                }
                return checked;
            }
        }, {
            key: '_onColumnClick',
            value: function _onColumnClick(e) {
                e.stopPropagation();
                var _e$detail2 = e.detail,
                    col = _e$detail2.col,
                    field = _e$detail2.field,
                    name = _e$detail2.name;

                var event = document.createEvent('Event');
                switch (name) {
                    case 'cart':
                        var newItems = this._grid.items.filter(function (item) {
                            return !item.cart;
                        });
                        // let state = !this._getChecked();
                        var state = true;
                        if (newItems.length + window.Catalog.favoritesList.items.length <= window.MAX_CART_SIZE) {
                            this._grid.items.forEach(function (item) {
                                item.checked = state;
                            });
                            this._grid.refresh();

                            // this._updateChecked(state);

                            event.initEvent('cart:all', false, false);
                            event.detail = { items: newItems, state: state };
                            this.dispatchEvent(event);
                        } else {
                            event.initEvent('cart:limit', false, false);
                            this.dispatchEvent(event);
                        }
                        break;
                    default:
                        break;
                }
            }
        }, {
            key: '_onRowMouseOver',
            value: function _onRowMouseOver(e) {
                if (!this._disableMouseHover) {
                    var event = document.createEvent('Event');
                    event.initEvent('mouseover', false, false);
                    event.detail = e.detail;
                    this.dispatchEvent(event);
                }
            }
        }, {
            key: '_onRowMouseOut',
            value: function _onRowMouseOut(e) {
                if (!this._disableMouseHover) {
                    var event = document.createEvent('Event');
                    event.initEvent('mouseout', false, false);
                    event.detail = e.detail;
                    this.dispatchEvent(event);
                }
            }
        }, {
            key: 'hilite',
            value: function hilite(id) {
                var row = this._grid.getRow(id);
                if (row) {
                    row.classList.add('hilite');
                }
            }
        }, {
            key: 'dim',
            value: function dim(id) {
                var row = this._grid.getRow(id);
                if (row) {
                    row.classList.remove('hilite');
                }
            }
        }, {
            key: 'resize',
            value: function resize(total) {
                var height = this._container.querySelector('.table-list-header').getBoundingClientRect().height;
                this._container.querySelector('.table-list-body').style.maxHeight = total - height + 'px';
            }
        }, {
            key: 'refresh',
            value: function refresh() {
                this._grid.refresh();
                // this._updateChecked(this._getChecked());
                var event = document.createEvent('Event');
                event.initEvent('refreshed', false, false);
                this.dispatchEvent(event);
            }
        }, {
            key: 'scrollToRow',
            value: function scrollToRow(id) {
                this._grid.scrollToRow(id);
            }
        }, {
            key: 'enableFilter',
            value: function enableFilter(enable) {
                this._grid.filtered = enable;
            }
        }, {
            key: 'adjustWidth',
            value: function adjustWidth() {
                this._grid.adjustHeader();
            }
        }, {
            key: 'getRow',
            value: function getRow(rowId) {
                return this._grid.getRow(rowId);
            }
        }, {
            key: 'redrawItem',
            value: function redrawItem(id, item) {
                this._disableMouseHover = true;
                this._grid.redrawRow(id, item);
                this._disableMouseHover = false;
            }
        }, {
            key: 'fields',
            get: function get$$1() {
                return this._fields;
            }
        }, {
            key: 'indexBy',
            get: function get$$1() {
                return this._indexBy;
            }
        }, {
            key: 'items',
            set: function set$$1(value) {
                if (Array.isArray(value)) {
                    this._grid.items = value;
                }
            },
            get: function get$$1() {
                return this._grid.items;
            }
        }, {
            key: 'filteredItems',
            get: function get$$1() {
                return this._grid.filteredItems;
            }
        }, {
            key: 'bbox',
            get: function get$$1() {
                return this._container.getBoundingClientRect();
            }
        }, {
            key: 'filter',
            set: function set$$1(value) {
                this._grid.filter = value;
            }
        }, {
            key: 'count',
            get: function get$$1() {
                return this._grid.count;
            }
        }]);
        return ResultList;
    }(EventTarget);

    var T$9 = Translations$1;

    var FavoritesList = function (_EventTarget) {
        inherits(FavoritesList, _EventTarget);

        function FavoritesList(container, _ref) {
            var restricted = _ref.restricted;
            classCallCheck(this, FavoritesList);

            var _this = possibleConstructorReturn(this, (FavoritesList.__proto__ || Object.getPrototypeOf(FavoritesList)).call(this));

            _this._cart = {};
            _this._restricted = restricted;
            _this._container = container;
            _this._container.classList.add('favorites-list');
            _this._onCellClick = _this._onCellClick.bind(_this);
            _this._onColumnClick = _this._onColumnClick.bind(_this);
            _this._onRowMouseOver = _this._onRowMouseOver.bind(_this);
            _this._onRowMouseOut = _this._onRowMouseOut.bind(_this);
            _this._onSort = _this._onSort.bind(_this);
            _this._activeInfo = null;
            _this._disableMouseHover = false;
            _this._indexBy = 'gmx_id';
            _this._fields = {
                'selected': {
                    type: 'selector',
                    default: false
                },
                'visible': {
                    type: 'string',
                    columnIcon: 'search search-visibility-off',
                    default: false,
                    width: 30,
                    styler: function styler(item) {
                        switch (item.visible) {
                            case 'visible':
                                return 'search search-visibility-off';
                            case 'hidden':
                                return 'search search-visibility-on';
                            case 'loading':
                                return 'search-visibility-loading';
                            case 'failed':
                                return 'search-visibility-failed';
                            default:
                                return '';
                        }
                    }
                },
                'stereo': {
                    columnIcon: 'search search-stereo',
                    type: 'boolean',
                    icon: 'search',
                    yes: 'search-stereo',
                    sortable: true,
                    default: false,
                    tooltip: T$9.getText('results.stereo'),
                    formatter: function formatter(item) {
                        switch (_typeof(item.stereo)) {
                            case 'string':
                                return item.stereo !== 'NONE' && item.stereo !== '';
                            case 'boolean':
                                return item.stereo;
                            default:
                                return false;
                        }
                    }
                },
                'platform': {
                    type: 'string',
                    name: T$9.getText('results.satellite'),
                    sortable: true,
                    formatter: function formatter(item) {
                        switch (item.platform) {
                            case 'SPOT6':
                            case 'SPOT 6':
                                return item.islocal ? 'SPOT 6' : 'SPOT 6 (A)';
                            case 'SPOT7':
                            case 'SPOT 7':
                                return item.islocal ? 'SPOT 7' : 'SPOT 7 (A)';
                            case 'SPOT-6':
                                return item.product ? 'SPOT 6 (P)' : 'SPOT 6';
                            case 'SPOT-7':
                                return item.product ? 'SPOT 7 (P)' : 'SPOT 7';
                            case 'SPOT 5':
                                var sp5 = 'SPOT 5';
                                if (item.sensor === 'J') {
                                    if (item.spot5_a_exists & item.spot5_b_exists) {
                                        sp5 = 'SPOT 5 - 2.5ms';
                                    } else if (item.spot5_a_exists || item.spot5_b_exists) {
                                        sp5 = 'SPOT 5 - 5ms';
                                    } else {
                                        sp5 = 'SPOT 5 - 10ms';
                                    }
                                } else if (item.sensor === 'A' || item.sensor === 'B' && !item.spot5_b_exists) {
                                    sp5 = 'SPOT 5 - 5pan';
                                } else if (item.sensor === 'A' && item.spot5_b_exists) {
                                    sp5 = 'SPOT 5 - 2.5pan';
                                }
                                return '' + sp5 + (item.islocal ? '' : ' (A)');
                            case 'Ресурс-П1':
                            case 'Ресурс-П2':
                            case 'Ресурс-П3':
                                if (item.spot5_a_exists && !item.spot5_b_exists) {
                                    return item.platform + ' pan';
                                } else if (item.spot5_b_exists) {
                                    return item.platform + ' ms';
                                } else {
                                    return item.platform;
                                }
                            case 'GF1':
                                switch (item.sensor) {
                                    case 'A':
                                        return 'GaoFen-1 (2m)';
                                    case 'B':
                                        return 'GaoFen-1 (16m)';
                                    default:
                                        return 'GaoFen-1';
                                }
                            case '1A-PHR-1A':
                                return '1ATLAS (PHR-1A)';
                            case '1A-PHR-1B':
                                return '1ATLAS (PHR-1B)';
                            case '1A-SPOT-6':
                                return '1ATLAS (SP6)';
                            case '1A-SPOT-7':
                                return '1ATLAS (SP7)';
                            case 'TripleSat Constellation-1':
                                return 'Triplesat-1';
                            case 'TripleSat Constellation-2':
                                return 'Triplesat-2';
                            case 'TripleSat Constellation-3':
                                return 'Triplesat-3';
                            case 'GJ1A':
                                return 'Superview-1 01';
                            case 'GJ1B':
                                return 'Superview-1 02';
                            case 'GJ1C':
                                return 'Superview-1 03';
                            case 'GJ1D':
                                return 'Superview-1 04';
                            default:
                                return '' + getSatelliteName(item.platform) + (item.islocal ? ' (L)' : '');
                        }
                    }
                },
                'cloudness': {
                    type: 'float',
                    name: T$9.getText('results.clouds'),
                    sortable: true,
                    formatter: function formatter(item) {
                        return Math.round(item.cloudness);
                    },
                    default: 0,
                    align: 'center'
                },
                'tilt': {
                    type: 'float',
                    name: T$9.getText('results.angle'),
                    sortable: true,
                    formatter: function formatter(item) {
                        return Math.round(item.tilt);
                    },
                    default: 0,
                    align: 'center'
                },
                'acqdate': {
                    type: 'date',
                    name: T$9.getText('results.date'),
                    formatter: function formatter(item) {
                        return item.acqdate.toLocaleDateString();
                    },
                    sortable: true
                },
                'info': {
                    type: 'boolean',
                    icon: 'search',
                    yes: 'search-info-off',
                    no: 'search-info-on'
                }

            };

            _this._grid = new DataGrid(_this._container, {
                fields: _this.fields,
                sortBy: { field: 'acqdate', asc: false },
                indexBy: _this._indexBy
            });
            _this._grid.addEventListener('cell:click', _this._onCellClick);
            _this._grid.addEventListener('column:click', _this._onColumnClick);
            _this._grid.addEventListener('row:mouseover', _this._onRowMouseOver);
            _this._grid.addEventListener('row:mouseout', _this._onRowMouseOut);
            _this._grid.addEventListener('sort', _this._onSort);
            _this._stopPropagation = _this._stopPropagation.bind(_this);
            return _this;
        }

        createClass(FavoritesList, [{
            key: '_onSort',
            value: function _onSort(e) {
                var event = document.createEvent('Event');
                event.initEvent('sort', false, false);
                event.detail = this._grid.items;
                this.dispatchEvent(event);
            }
        }, {
            key: '_stopPropagation',
            value: function _stopPropagation(e) {
                e.stopPropagation();
            }
        }, {
            key: 'getItemByIndex',
            value: function getItemByIndex(id) {
                return this._grid.getItemByIndex(id);
            }
        }, {
            key: '_onCellClick',
            value: function _onCellClick(e) {
                e.stopPropagation();
                var _e$detail = e.detail,
                    i = _e$detail.i,
                    j = _e$detail.j,
                    row = _e$detail.row,
                    cell = _e$detail.cell,
                    name = _e$detail.name,
                    field = _e$detail.field,
                    item = _e$detail.item;

                var event = document.createEvent('Event');
                var btn = null;
                var k = 0;

                switch (name) {
                    case 'selected':
                        item.selected = Boolean(cell.querySelector('input[type=checkbox]').checked);
                        event.initEvent('selected', false, false);
                        event.detail = item;
                        this.dispatchEvent(event);
                        break;
                    case 'visible':
                        event.initEvent('visible', false, false);
                        event.detail = item;
                        this.dispatchEvent(event);
                        break;
                    case 'info':
                        var _cell$getBoundingClie = cell.getBoundingClientRect(),
                            left = _cell$getBoundingClie.left,
                            top = _cell$getBoundingClie.top;

                        var button = cell.querySelector('i');

                        event.initEvent('info', false, false);
                        event.detail = { item: item, left: left, top: top, button: button };
                        this.dispatchEvent(event);

                        break;
                    default:
                        k = Object.keys(this._fields).indexOf('visible');
                        btn = row.querySelectorAll('td')[k].querySelector('i');
                        btn.classList.remove('search-visibility-on');
                        btn.classList.add('search-visibility-off');
                        item.visible = true;

                        event.initEvent('visible', false, false);
                        event.detail = item;
                        this.dispatchEvent(event);
                        break;
                }
                switch (name) {
                    case 'selected':
                    case 'info':
                    case 'visible':
                        break;
                    default:
                        event.initEvent('click', false, false);
                        event.detail = e.detail;
                        this.dispatchEvent(event);
                        break;
                }
            }
        }, {
            key: '_onColumnClick',
            value: function _onColumnClick(e) {
                e.stopPropagation();
                var _e$detail2 = e.detail,
                    col = _e$detail2.col,
                    field = _e$detail2.field,
                    name = _e$detail2.name;

                switch (name) {
                    case 'visible':
                        var state = false;
                        if (this._grid.items.every(function (x) {
                            return x.visible !== 'hidden';
                        })) {
                            state = false;
                        } else if (this._grid.items.every(function (x) {
                            return x.visible === 'hidden';
                        })) {
                            state = true;
                        } else {
                            state = col.querySelector('i').classList.contains('favorites-select-quicklooks-active');
                        }
                        var btn = this._grid.getCol(name).querySelector('i');
                        if (state) {
                            btn.classList.add('favorites-select-quicklooks-passive');
                            btn.classList.remove('favorites-select-quicklooks-active');
                        } else {
                            btn.classList.add('favorites-select-quicklooks-active');
                            btn.classList.remove('favorites-select-quicklooks-passive');
                        }
                        var event = document.createEvent('Event');
                        event.initEvent('visible:all', false, false);
                        event.detail = state;
                        this.dispatchEvent(event);
                        break;
                    default:
                        break;
                }
            }
        }, {
            key: '_onRowMouseOver',
            value: function _onRowMouseOver(e) {
                if (!this._disableMouseHover) {
                    var event = document.createEvent('Event');
                    event.initEvent('mouseover', false, false);
                    event.detail = e.detail;
                    this.dispatchEvent(event);
                }
            }
        }, {
            key: '_onRowMouseOut',
            value: function _onRowMouseOut(e) {
                if (!this._disableMouseHover) {
                    var event = document.createEvent('Event');
                    event.initEvent('mouseout', false, false);
                    event.detail = e.detail;
                    this.dispatchEvent(event);
                }
            }
        }, {
            key: 'hilite',
            value: function hilite(id) {
                var row = this._grid.getRow(id);
                if (row) {
                    row.classList.add('hilite');
                }
            }
        }, {
            key: 'dim',
            value: function dim(id) {
                var row = this._grid.getRow(id);
                if (row) {
                    row.classList.remove('hilite');
                }
            }
        }, {
            key: 'resize',
            value: function resize(total) {
                var height = this._container.querySelector('.table-list-header').getBoundingClientRect().height;
                var body = this._container.querySelector('.table-list-body');
                body.style.maxHeight = total - height + 'px';
                body.style.height = body.style.maxHeight;
            }
        }, {
            key: 'refresh',
            value: function refresh() {
                this._grid.refresh();
                var event = document.createEvent('Event');
                event.initEvent('refreshed', false, false);
                this.dispatchEvent(event);
            }
        }, {
            key: 'scrollToRow',
            value: function scrollToRow(id) {
                this._grid.scrollToRow(id);
            }
        }, {
            key: 'enableFilter',
            value: function enableFilter(enable) {
                this._grid.filtered = enable;
            }
        }, {
            key: 'adjustWidth',
            value: function adjustWidth() {
                this._grid.adjustHeader();
            }
        }, {
            key: 'getRow',
            value: function getRow(rowId) {
                return this._grid.getRow(rowId);
            }
        }, {
            key: 'redrawItem',
            value: function redrawItem(id, item) {
                this._disableMouseHover = true;
                this._grid.redrawRow(id, item);
                this._disableMouseHover = false;
            }
        }, {
            key: 'fields',
            get: function get$$1() {
                return this._fields;
            }
        }, {
            key: 'indexBy',
            get: function get$$1() {
                return this._indexBy;
            }
        }, {
            key: 'items',
            set: function set$$1(value) {
                if (Array.isArray(value)) {
                    this._grid.items = value;
                }
            },
            get: function get$$1() {
                return this._grid.items;
            }
        }, {
            key: 'filteredItems',
            get: function get$$1() {
                return this._grid.filteredItems;
            }
        }, {
            key: 'bbox',
            get: function get$$1() {
                return this._container.getBoundingClientRect();
            }
        }, {
            key: 'filter',
            set: function set$$1(value) {
                this._grid.filter = value;
            }
        }, {
            key: 'count',
            get: function get$$1() {
                return this._grid.count;
            }
        }]);
        return FavoritesList;
    }(EventTarget);

    var uniqueGlobalName = function () {
        var freeid = 0;
        return function (thing) {
            var id = "gmx_unique_" + freeid++;
            window[id] = thing;
            return id;
        };
    }();

    /** Посылает кросс-доменный GET запрос к серверу с использованием транспорта JSONP.
     *
     * @memberOf nsGmx.Utils
     * @param {String} url URL сервера.
     * @param {Function} callback Ф-ция, которая будет вызвана при получении от сервера результата.
     * @param {String} [callbackParamName=CallbackName] Имя параметра для задания имени ф-ции ответа.
     * @param {Function} [errorCallback] Ф-ция, которая будет вызвана в случае ошибки запроса к серверу
     */
    function sendCrossDomainJSONRequest(url, callback, callbackParamName, errorCallback) {
        callbackParamName = callbackParamName || 'CallbackName';

        var script = document.createElement("script");
        script.setAttribute("charset", "UTF-8");
        var callbackName = uniqueGlobalName(function (obj) {
            callback && callback(obj);
            window[callbackName] = false;
            document.getElementsByTagName("head").item(0).removeChild(script);
        });

        var sepSym = url.indexOf('?') == -1 ? '?' : '&';

        if (errorCallback) {
            script.onerror = errorCallback;
        }

        script.setAttribute("src", "" + url + sepSym + callbackParamName + "=" + callbackName + "&" + Math.random());
        document.getElementsByTagName("head").item(0).appendChild(script);
    }

    var AuthManager = function (_EventTarget) {
        inherits(AuthManager, _EventTarget);

        function AuthManager(_ref) {
            var authorizationEndpoint = _ref.authorizationEndpoint,
                userInfoEndpoint = _ref.userInfoEndpoint,
                redirectEndpointHtml = _ref.redirectEndpointHtml,
                redirectEndpointAshx = _ref.redirectEndpointAshx,
                credentialLoginEndpoint = _ref.credentialLoginEndpoint,
                _ref$clientId = _ref.clientId,
                clientId = _ref$clientId === undefined ? 1 : _ref$clientId;
            classCallCheck(this, AuthManager);

            // поддерживаем как минимум два события для
            // серверов ресурсов: login и logout
            var _this = possibleConstructorReturn(this, (AuthManager.__proto__ || Object.getPrototypeOf(AuthManager)).call(this));

            _this._authorizationEndpoint = authorizationEndpoint;
            _this._userInfoEndpoint = userInfoEndpoint;
            _this._redirectEndpointHtml = redirectEndpointHtml;
            _this._redirectEndpointAshx = redirectEndpointAshx;
            _this._redirectEndpointAshx2 = redirectEndpointAshx + '/?return_url=' + location.href;
            _this._credentialLoginEndpoint = credentialLoginEndpoint;
            _this._resourceServers = [];
            _this._clientId = clientId;
            return _this;
        }

        createClass(AuthManager, [{
            key: '$getAntiCsrfToken',
            value: function $getAntiCsrfToken() {
                var cookieName = "sync";
                var re = new RegExp('.*' + cookieName + '=([^;]+).*', 'i');
                return document.cookie.replace(re, '$1');
            }
            /** Добавляет сервер ресурсов
             * Должна вызываться только из класса ResourceServer.
             * @param {ResourceServer} resourceServer
             */

        }, {
            key: '$addResourceServer',
            value: function $addResourceServer(resourceServer) {
                this._resourceServers.push(resourceServer);
            }
        }, {
            key: '_chain',
            value: function _chain(tasks, state) {
                return tasks.reduce(function (prev, next) {
                    return prev.then(next);
                }, new Promise(function (resolve, reject) {
                    return resolve(state);
                }));
            }
        }, {
            key: '_authorizeResourceServers',
            value: function _authorizeResourceServers() {
                var tasks = this._resourceServers.map(function (rs) {
                    return function (state) {
                        return new Promise(function (resolve) {
                            rs.sendGetRequest('oAuth2/LoginDialog.ashx').then(function (response) {
                                state = state.concat(response);
                                resolve(state);
                            }).catch(function (e) {
                                return state.push(e);
                            });
                        });
                    };
                });
                return this._chain(tasks, []);
            }
        }, {
            key: '_processAuthorization',
            value: function _processAuthorization(search) {
                var _this2 = this,
                    _arguments = arguments;

                function parseQueryString(search) {
                    var a = search.slice(1).split('&');
                    var o = {};
                    for (var i = 0; i < a.length; i++) {
                        var s = a[i].split('=');
                        o[s[0]] = s[1];
                    }
                    return o;
                }
                return new Promise(function (resolve, reject) {
                    // превращаем строку с параметрами в хеш
                    var params = parseQueryString(search);

                    if (params.error) {
                        reject({
                            Status: 'auth',
                            Result: null,
                            Error: {
                                message: params.error
                            }
                        });
                    } else {
                        sendCrossDomainJSONRequest('' + _this2._redirectEndpointAshx + search, function (resp) {
                            if (resp.Status === 'ok') {
                                resolve({
                                    Status: 'ok',
                                    Result: resp.Result
                                });
                            } else {
                                reject({
                                    Status: resp.Status,
                                    Result: null
                                });
                            }
                        }, 'CallbackName', function () {
                            reject({
                                Status: 'network',
                                Result: null,
                                Error: {
                                    message: _arguments[2]
                                }
                            });
                        });
                    }
                });
            }
            /** Получение информации о пользователе от AuthServer
             * @return {Function} promise(userInfo)
             */

        }, {
            key: 'getUserInfo',
            value: function getUserInfo() {
                var _this3 = this;

                if (this._getUserInfoDeferred) {
                    return this._getUserInfoDeferred;
                }
                return this._getUserInfoDeferred = new Promise(function (resolve, reject) {

                    function authorizationGrant(search) {
                        // удаляем айфрейм и глобальную переменную
                        setTimeout(function () {
                            delete window.authorizationGrant;
                            document.body.removeChild(document.body.querySelector('.authorizationIframe'));
                        }, 0);

                        this._processAuthorization(search).then(function (resp) {
                            return resolve(resp);
                        }, function (err) {
                            return reject(err);
                        });
                    }

                    // посылаем запросы на все сервера ресурсов
                    // когда они все ответят ..
                    _this3._authorizeResourceServers().then(function (servers) {
                        // .. формируем параметры state и scope
                        var scope = '';
                        var state = '';
                        for (var i = 0; i < servers.length; i++) {
                            var response = servers[i];
                            scope += response.Service.ServerId + ',';
                            state += response.Result.State + ',';
                        }
                        scope = scope.slice(0, -1);
                        state = state.slice(0, -1);

                        // .. и посылаем запрос на сервер авторизации
                        window.authorizationGrant = authorizationGrant.bind(_this3);
                        document.body.insertAdjacentHTML('afterbegin', '<iframe\n                    class="authorizationIframe"\n                    style="display: block !important; position: absolute; left: -99999px;"\n                    src="' + _this3._userInfoEndpoint + '/?client_id=1&redirect_uri=' + _this3._redirectEndpointHtml + '&scope=' + scope + '&state=' + state + '">\n                </iframe>');
                    }).catch(function () {
                        reject({
                            Status: 'error'
                        });
                    });
                });
            }
            /** Принудительное перелогинивание пользователя.
             * Пользователь должен увидеть поля для ввода
             * логина/пароля (возможно, на сервере авторизации).
             * При успешной авторизации библиотека должна
             * произвести авторизацию пользователя на всех
             * подключенных серверах ресурсов
             * и только после этого resolve promise
             * @return {Function} promise(userInfo)
             */

        }, {
            key: 'login',
            value: function login(arg) {
                var _this4 = this;

                var foreignServer = void 0;
                var iframeContainer = void 0;
                if (typeof arg === 'string') {
                    // обратная совместимость
                    foreignServer = arg;
                } else if ((typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object') {
                    foreignServer = arg.foreignServer;
                    iframeContainer = arg.iframeContainer;
                }

                this._authorizeResourceServers().then(function (servers) {
                    // .. формируем параметры state и scope
                    var scope = '';
                    var state = '';
                    for (var i = 0; i < servers.length; i++) {
                        var response = servers[i];
                        scope += response.Service.ServerId + ',';
                        state += response.Result.State + ',';
                    }
                    scope = scope.slice(0, -1);
                    state = state.slice(0, -1);

                    var authUrl = _this4._authorizationEndpoint + '/?client_id=1&redirect_uri=' + _this4._redirectEndpointAshx2 + '&scope=' + scope + '&state=' + state;

                    if (foreignServer) {
                        authUrl += '&authserver=' + foreignServer;
                    }

                    if (!iframeContainer) {
                        window.open(authUrl, '_self');
                    } else {
                        var authorizationGrant = function authorizationGrant() {
                            window.location.reload();
                            var event = document.createEvent('Event');
                            event.initEvent('login', false, false);
                            this.dispatchEvent(event);
                        };

                        window.authorizationGrant = authorizationGrant;
                        document.body.removeChild(document.body.querySelector('.authorizationIframe'));
                        document.body.insertAdjacentHTML('afterbegin', '<iframe\n                    class="authorizationIframe"\n                    src="' + self._authorizationEndpoint + '/?client_id=1\n                        &redirect_uri=' + self._redirectEndpointHtml + '\n                        &redirect_uri_alt=' + self._redirectEndpointAshx2 + '\n                        &scope=' + scope + '\n                        &state=' + state + '">\n                </iframe>');
                    }
                });
            }
            /** Залогиниться, используя логин и пароль
             * @param  {String} login
             * @param  {String} password
             * @return {Promise}
             */

        }, {
            key: 'loginWithCredentials',
            value: function loginWithCredentials(login, password) {
                var _this5 = this,
                    _arguments2 = arguments;

                // отправляем ajax-запрос на Handler/Login с логином и паролем
                // После этого пользователь считается залогиненным на my.
                // Затем вызываем getUserInfo()

                return new Promise(function (resolve, reject) {
                    sendCrossDomainJSONRequest(_this5._credentialLoginEndpoint + '?login=' + encodeURIComponent(login) + '&password=' + encodeURIComponent(password), function (response) {
                        if (response.Status.toLowerCase() === 'ok') {
                            _this5.getUserInfo().then(function () {
                                resolve({
                                    Status: 'ok',
                                    Result: _arguments2[0].Result
                                });
                            }).catch(function () {
                                reject({
                                    Status: 'error',
                                    Result: {
                                        Message: 'authorization error'
                                    }
                                });
                            });
                        } else if (response.Status.toLowerCase() === 'auth') {
                            reject({
                                Status: 'auth',
                                Result: {
                                    Message: response.Result.Message
                                }
                            });
                        } else {
                            reject({
                                Status: 'error',
                                Result: {
                                    Message: 'unknown error'
                                }
                            });
                        }
                    }, 'CallbackName', function () {
                        reject({
                            Status: 'network',
                            Result: {
                                Message: 'network error'
                            }
                        });
                    });
                });
            }
            /** Принудительное разлогинивание пользователя.
             * В том числе и на серверах ресурсов
             * @return {Function} promise(status)
             */

        }, {
            key: 'logout',
            value: function logout() {
                var _this6 = this;

                return new Promise(function (resolve, reject) {
                    var promises = [];
                    for (var i = 0; i < _this6._resourceServers.length; i++) {
                        var resourceServer = _this6._resourceServers[i];
                        var promise = resourceServer.sendGetRequest('oAuth2/Logout.ashx');
                        promises.push(promise);
                    }
                    _this6._chain(promises, {}).then(function () {
                        if (_this6._clientId === 1) {
                            sendCrossDomainJSONRequest('//my.kosmosnimki.ru/Handler/Logout', function (response) {
                                return resolve({ Status: 'ok' });
                            }, '', function () {
                                return reject({ Status: 'network' });
                            });
                        } else {
                            resolve({
                                Status: 'ok'
                            });
                            var event = document.createEvent('Event');
                            event.initEvent('logout', false, false);
                            _this6.dispatchEvent(event);
                        }
                    }).catch(function () {
                        reject({
                            Status: 'error'
                        });
                    });
                });
            }
        }]);
        return AuthManager;
    }(EventTarget);

    // <String>options.title
    // <String>options.className
    // <String>options.trigger (hover|click|manual)
    // <String>options.direction (down|up)
    // <Boolean>options.adjustWidth
    // <Boolean>options.showTopItem

    var DropdownWidget = function (_EventTarget) {
        inherits(DropdownWidget, _EventTarget);

        function DropdownWidget(options) {
            classCallCheck(this, DropdownWidget);

            var _this = possibleConstructorReturn(this, (DropdownWidget.__proto__ || Object.getPrototypeOf(DropdownWidget)).call(this));

            _this.options = extend({
                title: '',
                trigger: 'hover',
                direction: 'down',
                adjustWidth: true,
                showTopItem: true,
                titleClassName: ''
            }, options);

            _this.$el = _this.options.el;
            _this.$el.classList.add('dropdownWidget');
            _this.$el.classList.add('dropdownWidget-item');

            _this.$titleContainer = document.createElement('div');
            _this.$titleContainer.classList.add('dropdownWidget-dropdownTitle');
            if (_this.options.titleClassName) {
                _this.$titleContainer.classList.add(_this.options.titleClassName);
            }
            _this.$titleContainer.innerHTML = _this.options.title;
            _this.$el.appendChild(_this.$titleContainer);

            _this.$dropdownContainer = document.createElement('div');
            _this.$dropdownContainer.classList.add('dropdownWidget-dropdown');
            _this.$dropdownContainer.style.display = 'none';
            _this.$el.appendChild(_this.$dropdownContainer);

            _this.$dropdownTitle = document.createElement('div');
            _this.$dropdownTitle.classList.add('dropdownWidget-item');
            _this.$dropdownTitle.classList.add('dropdownWidget-dropdownTitle');
            if (options.titleClassName) {
                _this.$dropdownTitle.classList.add(options.titleClassName);
            }
            _this.$dropdownTitle.innerHTML = _this.options.title;
            _this.$dropdownContainer.appendChild(_this.$dropdownTitle);

            if (!_this.options.showTopItem) {
                _this.$dropdownTitle.style.display = 'none';
            }

            if (_this.options.trigger === 'hover') {
                _this.$dropdownTitle.classList.add('ui-state-disabled');
                _this.$titleContainer.addEventListener('mouseover', function () {
                    return _this.expand();
                });
                _this.$dropdownContainer.addEventListener('mouseleave', function () {
                    return _this.collapse();
                });
            } else if (_this.options.trigger === 'click') {
                _this.$titleContainer.addEventListener('click', function () {
                    return _this.expand();
                });
                _this.$dropdownTitle.addEventListener('click', function () {
                    return _this.collapse();
                });
            }

            if (_this.options.direction === 'up') {
                _this.$el.classList.add('dropdownWidget_direction-up');
            } else {
                _this.$el.classList.add('dropdownWidget_direction-down');
            }

            _this._items = {};
            return _this;
        }

        createClass(DropdownWidget, [{
            key: 'addItem',
            value: function addItem(id, inst, position) {
                var _this2 = this;

                this._items[id] = inst;

                var $container = document.createElement('div');

                $container.classList.add('dropdownWidget-item');
                $container.classList.add('dropdownWidget-dropdownItem');
                $container.setAttribute('data-id', id);
                $container.setAttribute('data-position', position);
                $container.addEventListener('click', function (je) {
                    var event = document.createEvent('Event');
                    event.initEvent('item:click', false, false);
                    event.detail = { dataId: je.currentTarget.getAttribute('data-id') };
                    _this2.dispatchEvent(event);

                    if (_this2.options.trigger === 'click') {
                        _this2.collapse();
                    }
                });
                $container.appendChild(inst.el);
                this.$dropdownContainer.appendChild($container);
                this._sortItems();
            }
        }, {
            key: 'setTitle',
            value: function setTitle(title) {
                this.$titleContainer.innerHTML = title;
                this.$dropdownTitle.innerHTML = title;
            }
        }, {
            key: 'toggle',
            value: function toggle() {
                this._expanded ? this.collapse() : this.expand();
                this._expanded = !this._expanded;
            }
        }, {
            key: 'expand',
            value: function expand() {
                var r = this.$el.getBoundingClientRect();
                this.$dropdownContainer.style.minWidth = r.width + 'px';
                this.$dropdownContainer.style.display = 'block';
                var event = document.createEvent('Event');
                event.initEvent('expand', false, false);
                event.detail = {};
                this.dispatchEvent(event);
            }
        }, {
            key: 'collapse',
            value: function collapse() {
                this.$dropdownContainer.style.display = 'none';
                var event = document.createEvent('Event');
                event.initEvent('collapse', false, false);
                event.detail = {};
                this.dispatchEvent(event);
            }
        }, {
            key: 'reset',
            value: function reset() {
                this.collapse();
            }
        }, {
            key: '_sortItems',
            value: function _sortItems() {
                var containerEl = this.$dropdownContainer[0];
                var items = Array.prototype.slice.call(containerEl.children);

                var titleEl = items.splice(items.indexOf(containerEl.querySelector('.dropdownWidget-dropdownTitle')), 1);

                while (items.length) {
                    var positions = items.map(function (el) {
                        return parseInt(el.getAttribute('data-position'), 10);
                    });
                    var maxPositionIndex = positions.indexOf(Math.max.apply(null, positions));
                    containerEl.insertBefore(items.splice(maxPositionIndex, 1)[0], containerEl.children[0]);
                }

                if (this.options.direction === 'up') {
                    containerEl.appendChild(titleEl);
                } else {
                    containerEl.insertBefore(titleEl, containerEl.children[0]);
                }
            }
        }]);
        return DropdownWidget;
    }(EventTarget);

    var DropdownMenuWidget = function () {
        function DropdownMenuWidget(options) {
            classCallCheck(this, DropdownMenuWidget);


            this._view = document.createElement('div');
            this._view.classList.add('dropdownMenuWidget');
            this._view.innerHTML = options.items.map(this._renderItem.bind(this)).join('');
            var dropDown = this._view.querySelector('.dropdownMenuWidget-itemDropdown');
            if (dropDown) {
                dropDown.style.display = 'none';
            }
            var mouseTimeout = options.mouseTimeout || 100;
            var items = this._view.querySelectorAll('.dropdownMenuWidget-item');

            var _loop = function _loop(i) {
                var mouseIsOver = false;
                items[i].addEventListener('mouseenter', function (je) {
                    mouseIsOver = true;
                    setTimeout(function () {
                        if (mouseIsOver) {
                            var dd = je.target.querySelector('.dropdownMenuWidget-itemDropdown');
                            if (dd) {
                                dd.style.display = 'block';
                            }
                        }
                    }, 100);
                });
                items[i].addEventListener('mouseleave', function (je) {
                    mouseIsOver = false;
                    var dd = je.target.querySelector('.dropdownMenuWidget-itemDropdown');
                    if (dd) {
                        dd.style.display = 'none';
                    }
                });
            };

            for (var i = 0; i < items.length; ++i) {
                _loop(i);
            }
        }

        createClass(DropdownMenuWidget, [{
            key: '_renderDropdown',
            value: function _renderDropdown(_ref) {
                var className = _ref.className,
                    id = _ref.id,
                    link = _ref.link,
                    newWindow = _ref.newWindow,
                    icon = _ref.icon,
                    title = _ref.title;

                return '<li class="dropdownMenuWidget-dropdownMenuItem' + (className ? ' ' + className : '') + '">\n            ' + (newWindow ? '<div class="ui-icon ui-icon-newwin dropdownMenuWidget-dropdownMenuIcon"></div>' : '') + '\n            <a\n                ' + (id ? 'id="' + id + '"' : '') + '\n                ' + (link ? 'href="' + link + '"' : 'href="javascript:void(0)"') + '\n                ' + (newWindow && link ? 'target="_blank"' : '') + '\n                class="dropdownMenuWidget-dropdownItemAnchor' + (newWindow ? ' dropdownMenuWidget-dropdownItemAnchor_newWindow' : '') + '"\n            >\n                ' + (icon ? '<img src="' + icon + '"/>' : '') + '\n                ' + (title ? '<span>' + title + '</span>' : '') + '\n            </a>\n        </li>';
            }
        }, {
            key: '_renderItem',
            value: function _renderItem(_ref2) {
                var className = _ref2.className,
                    id = _ref2.id,
                    link = _ref2.link,
                    newWindow = _ref2.newWindow,
                    icon = _ref2.icon,
                    fonticon = _ref2.fonticon,
                    title = _ref2.title,
                    dropdown = _ref2.dropdown;

                return '<div class="dropdownMenuWidget-item' + (className ? ' ' + className : '') + '">\n        <a\n            ' + (id ? 'id="' + id + '"' : '') + '\n            ' + (link ? 'href="' + link + '"' : 'href="javascript:void(0)"') + '\n            ' + (newWindow && link ? 'target="_blank"' : '') + '\n            class="dropdownMenuWidget-itemAnchor' + (newWindow ? ' dropdownMenuWidget-itemAnchor_newWindow' : '') + '"\n        >\n            ' + (icon ? '<img src="' + icon + '" />' : '') + '\n            ' + (fonticon ? '<i class="' + fonticon + '"></i>' : '') + '\n            ' + (title ? '<span>' + title + '</span>' + (dropdown ? '<i class="icon-angle-down"></i>' : '') : '') + '\n        </a>\n        ' + (dropdown ? '<div class="dropdownMenuWidget-itemDropdown">\
                <ul class="dropdownMenuWidget-dropdownMenu">' + dropdown.map(this._renderDropdown.bind(this)).join('') + '</ul>\
            </div>' : '') + '\n        </div>';
            }
        }, {
            key: 'appendTo',
            value: function appendTo(placeholder) {
                placeholder.appendChild(this._view);
            }
        }]);
        return DropdownMenuWidget;
    }();

    var T$a = Translations$1;

    T$a.addText('rus', {
        auth: {
            'login': 'Войти',
            'logout': 'Выйти',
            'myAccount': 'Личный кабинет',
            'myMap': 'Личная карта',
            'closeDialog': 'Закрыть'
        }
    });

    T$a.addText('eng', {
        auth: {
            'login': 'Login',
            'logout': 'Logout',
            'myAccount': 'My account',
            'myMap': 'My map',
            'closeDialog': 'Close'
        }
    });

    var AuthWidget = function (_EventTarget) {
        inherits(AuthWidget, _EventTarget);

        function AuthWidget(options) {
            classCallCheck(this, AuthWidget);

            var _this = possibleConstructorReturn(this, (AuthWidget.__proto__ || Object.getPrototypeOf(AuthWidget)).call(this));

            _this._view = document.createElement('div');
            _this._view.classList.add('authWidget');

            _this._authManager = options.authManager;
            _this._userInfo = null;

            _this._options = options;
            _this._options.showAccountLink = true;
            _this._options.accountLink = '//my.kosmosnimki.ru/Home/Settings/';
            _this._options.showMapLink = true;

            _this._authManager.getUserInfo().then(function (response) {
                _this._render({
                    login: response.Result && response.Result.Login,
                    userName: response.Result && (response.Result.FullName || response.Result.Nickname || response.Result.Login),
                    nickName: response.Result.Nickname
                });
                _this._userInfo = response.Result;
                var event = document.createEvent('Event');
                event.initEvent('ready', false, false);
                _this.dispatchEvent(event);
            }).catch(function (response) {
                _this._render(response);
            });
            _this._authManager.addEventListener('login', function () {
                var event = document.createEvent('Event');
                event.initEvent('login', false, false);
                _this.dispatchEvent(event);
            });
            return _this;
        }

        createClass(AuthWidget, [{
            key: '_render',
            value: function _render(vm) {
                var _this2 = this;

                this._view.innerHTML = vm.nickName ? '<div class="authWidget_authorized">\n                <div class="authWidget-userPanel">\n                    <div class="authWidget-userPanel-iconCell">\n                        <div class="authWidget-userPanel-userIcon account account-user-logout"></div>\n                    </div>\n                    <div class="authWidget-userPanel-userMenuCell"></div>\n                </div>\n            </div>' : '<div class="authWidget_unauthorized">\n                <!-- div class="authWidget-loginButton">' + T$a.getText('auth.login') + '</div -->\n                <div class="authWidget-loginButton account account-user-login"></div>\n            </div>';

                if (vm.nickName) {
                    var dropdownItems = [];

                    if (this._options.showAccountLink) {
                        dropdownItems.push({
                            title: T$a.getText('auth.myAccount'),
                            link: this._options.accountLink,
                            id: 'AuthWidgetAccountLink',
                            newWindow: true,
                            iconClass: 'account account-personal-area'
                        });
                    }

                    if (this._options.showMapLink) {
                        var defaultMapLink = '//maps.kosmosnimki.ru/api/index.html?' + encodeURIComponent('@' + vm.login);
                        dropdownItems.push({
                            title: T$a.getText('auth.myMap'),
                            link: this._options.mapLink || defaultMapLink,
                            id: 'AuthWidgetMapLink',
                            newWindow: true,
                            iconClass: 'account account-personal-map'
                        });
                    }

                    dropdownItems.push({
                        title: T$a.getText('auth.logout'),
                        className: 'authWidget-logoutButton',
                        iconClass: 'account account-exit'
                    });

                    var dropdownMenuWidget = new DropdownMenuWidget({
                        items: [{
                            title: vm.nickName,
                            dropdown: dropdownItems
                        }]
                    });

                    dropdownMenuWidget.appendTo(this._view.querySelector('.authWidget-userPanel-userMenuCell'));
                }

                var loginBtn = this._view.querySelector('.authWidget-loginButton');
                if (loginBtn) {
                    loginBtn.addEventListener('click', function (e) {
                        var $iframeContainer;
                        // if (this._options.loginDialog) {

                        //     $iframeContainer = document.createElement('div');
                        //     $iframeContainer.classList.add('authWidget-iframeContainer');
                        //     var dialog = $iframeContainer.dialog({
                        //         width: 500,
                        //         height: 450,
                        //         closeText: T.getText('auth.closeDialog'),
                        //         close: (je, ui) => {
                        //             $(this).dialog('destroy');
                        //         }
                        //     });
                        //     // HACK:
                        //     let btn = $iframeContainer.querySelector('button.ui-button');
                        //     if (btn) {
                        //         btn.classList.add('ui-icon');
                        //         btn.style.outline = 'none';
                        //     }                                
                        // }

                        _this2._authManager.login({
                            iframeContainer: $iframeContainer && $iframeContainer[0]
                        });
                    });
                }

                var logoutBtn = this._view.querySelector('.authWidget-logoutButton');
                if (logoutBtn) {
                    logoutBtn.addEventListener('click', function (e) {
                        _this2._authManager.logout().then(function (response) {
                            _this2._render(response);
                            _this2._userInfo = response.Result;
                            var event = document.createEvent('Event');
                            event.initEvent('logout', false, false);
                            _this2.dispatchEvent(event);
                        });
                    });
                }
            }

            /** Получить информацию о пользователе, которую вернул AuthManager
             * @return {Object}
             */

        }, {
            key: 'getUserInfo',
            value: function getUserInfo() {
                return this._userInfo;
            }
        }, {
            key: 'appendTo',
            value: function appendTo(placeholder) {
                placeholder.appendChild(this._view);
            }
        }]);
        return AuthWidget;
    }(EventTarget);

    //TODO: использовать ли библиотеку?
    function parseUri(str) {
        var parser = /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*):?([^:@]*))?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,
            key = ["source", "protocol", "authority", "userInfo", "user", "password", "host", "port", "relative", "path", "directory", "file", "query", "anchor"],
            m = parser.exec(str),
            uri = {},
            i = 14;

        while (i--) {
            uri[key[i]] = m[i] || "";
        } // HACK
        uri.hostOnly = uri.host;
        uri.host = uri.authority;

        return uri;
    }

    var requests = {};
    var lastRequestId = 0;
    var uniquePrefix = "id" + Math.random();

    function processMessage(e) {
        if (e.origin in requests) {
            var dataStr = decodeURIComponent(e.data.replace(/\n/g, '\n\\'));
            try {
                var dataObj = JSON.parse(dataStr);
                var request = requests[e.origin][dataObj.CallbackName];
                if (request) {
                    delete requests[e.origin][dataObj.CallbackName];
                    request.iframe.parentNode.removeChild(request.iframe);
                    request.callback && request.callback(dataObj);
                }
            } catch (e) {}
        }
    }

    //совместимость с IE8
    if (window.addEventListener) {
        window.addEventListener('message', processMessage);
    } else {
        window.attachEvent('onmessage', processMessage);
    }

    function addQueryVariables(url, variables) {
        var oldQueryString = url.split('?')[1];
        var newQueryString = '';
        for (var variable in variables) {
            if (variables.hasOwnProperty(variable)) {
                newQueryString += '&' + variable + '=' + encodeURIComponent(variables[variable]);
            }
        }
        if (oldQueryString) {
            return url + newQueryString;
        } else {
            return url + '?' + newQueryString.slice(1);
        }
    }

    function createPostIframe(id) {
        var iframe = document.createElement("iframe");
        iframe.style.display = 'none';
        iframe.setAttribute('id', id);
        iframe.setAttribute('name', id);
        iframe.src = 'javascript:true';

        return iframe;
    }

    var Server = function () {
        function Server(_ref) {
            var root = _ref.root;
            classCallCheck(this, Server);

            this._root = root;
        }

        /** Послать GET запрос к серверу ресурсов.
         * @param  {String} url
         * @param  {Object} params
         * @return {Function} promise(data)
         */


        createClass(Server, [{
            key: "sendGetRequest",
            value: function sendGetRequest(url, params) {
                var _this = this;

                return new Promise(function (resolve, reject) {
                    var requestUrl = _this._root + "/" + url;
                    requestUrl = addQueryVariables(requestUrl, params);
                    sendCrossDomainJSONRequest(requestUrl, function (data) {
                        return resolve(data);
                    }, 'CallbackName', function (errors) {
                        return reject({ Status: 'error' });
                    });
                });
            }

            /** Послать к серверу ресурсов запрос за картинкой.
             * @param  {String} url
             * @param  {Object} params
             * @return {Function} promise(image)
             */

        }, {
            key: "sendImageRequest",
            value: function sendImageRequest(url, params) {
                var requestUrl = this._root + "/" + url;
                requestUrl = addQueryVariables(requestUrl, params);

                var img = new Image();

                img.onload = function () {
                    return resolve({ Status: 'ok', Result: img });
                };
                img.onerror = function (errors) {
                    return reject(errors);
                };
                img.src = requestUrl;
            }

            /** Послать POST запрос к серверу ресурсов.
             * @param  {String} url
             * @param  {Object} params
             * @param  {HTMLFormElement} baseForm HTML Form, которая может быть использована как основа для посылки запроса (например, если нужно загрузить файл)
             * @return {Function} promise(data)
             */

        }, {
            key: "sendPostRequest",
            value: function sendPostRequest(url, params, baseForm) {
                var requestURL = this._root + "/" + url;
                return new Promise(function (resolve, reject) {
                    var processResponse = function processResponse(response) {
                        if (response.Status !== 'ok') {
                            reject(response);
                        } else {
                            resolve(response);
                        }
                    };

                    try {

                        var id = "" + uniquePrefix + lastRequestId++;
                        var iframe = createPostIframe(id);
                        var parsedURL = parseUri(requestURL);
                        var origin = (parsedURL.protocol ? parsedURL.protocol + ":" : window.location.protocol) + ("//" + (parsedURL.host || window.location.host));
                        var originalFormAction = void 0;
                        var form = void 0;

                        requests[origin] = requests[origin] || {};
                        requests[origin][id] = { callback: processResponse, iframe: iframe };

                        if (baseForm) {
                            form = baseForm;
                            originalFormAction = form.getAttribute('action');
                            form.setAttribute('action', requestURL);
                            form.target = id;
                        } else {
                            form = document.createElement('form');
                            form.style.display = 'none';
                            form.setAttribute('enctype', 'multipart/form-data');
                            form.target = id;
                            form.setAttribute('method', 'POST');
                            form.setAttribute('action', requestURL);
                            form.id = id;
                        }

                        var hiddenParamsDiv = document.createElement("div");
                        hiddenParamsDiv.style.display = 'none';

                        var appendFormParam = function appendFormParam(paramName, paramValue) {
                            var input = document.createElement("input");
                            paramValue = typeof paramValue !== 'undefined' ? paramValue : '';

                            input.setAttribute('type', 'hidden');
                            input.setAttribute('name', paramName);
                            input.setAttribute('value', paramValue);

                            hiddenParamsDiv.appendChild(input);
                        };

                        for (var paramName in params) {
                            appendFormParam(paramName, params[paramName]);
                        }

                        appendFormParam('WrapStyle', 'message');
                        appendFormParam('CallbackName', id);

                        form.appendChild(hiddenParamsDiv);

                        if (!baseForm) document.body.appendChild(form);

                        document.body.appendChild(iframe);

                        form.submit();

                        if (baseForm) {
                            form.removeChild(hiddenParamsDiv);
                            if (originalFormAction !== null) form.setAttribute('action', originalFormAction);else form.removeAttribute('action');
                        } else {
                            form.parentNode.removeChild(form);
                        }
                    } catch (e) {
                        reject(e);
                    }
                });
            }
        }]);
        return Server;
    }();

    var ResourceServer = function (_Server) {
        inherits(ResourceServer, _Server);

        function ResourceServer(authManager, _ref) {
            var id = _ref.id,
                root = _ref.root;
            classCallCheck(this, ResourceServer);

            var _this = possibleConstructorReturn(this, (ResourceServer.__proto__ || Object.getPrototypeOf(ResourceServer)).call(this, { root: root }));

            _this._id = id;
            _this._authManager = authManager;
            _this._authManager.$addResourceServer(_this);
            return _this;
        }

        createClass(ResourceServer, [{
            key: 'sendGetRequest',
            value: function sendGetRequest(url, params, baseForm) {
                var _this2 = this;

                params = params || {};
                params.sync = this._authManager.$getAntiCsrfToken();
                return new Promise(function (resolve, reject) {
                    get(ResourceServer.prototype.__proto__ || Object.getPrototypeOf(ResourceServer.prototype), 'sendGetRequest', _this2).call(_this2, url, params, baseForm).then(function (data) {
                        data.Service = { ServerId: _this2._id };
                        if (data.Status === 'ok') {
                            resolve(data);
                        } else {
                            reject(data);
                        }
                    }).catch(function (errors) {
                        return reject({ Status: 'error', ErrorInfo: errors.ErrorInfo });
                    });
                });
            }
        }, {
            key: 'sendImageRequest',
            value: function sendImageRequest(url, params, baseForm) {
                var _this3 = this;

                params = params || {};
                params.sync = this._authManager.$getAntiCsrfToken();
                return new Promise(function (resolve, reject) {
                    get(ResourceServer.prototype.__proto__ || Object.getPrototypeOf(ResourceServer.prototype), 'sendImageRequest', _this3).call(_this3, url, params, baseForm).then(function (data) {
                        data.Service = { ServerId: _this3._id };
                        if (data.Status === 'ok') {
                            resolve(data);
                        } else {
                            reject(data);
                        }
                    }).catch(function (errors) {
                        return reject({ Status: 'error', ErrorInfo: errors.ErrorInfo });
                    });
                });
            }
        }, {
            key: 'sendPostRequest',
            value: function sendPostRequest(url, params, baseForm) {
                var _this4 = this;

                params = params || {};
                params.sync = this._authManager.$getAntiCsrfToken();
                return new Promise(function (resolve, reject) {
                    get(ResourceServer.prototype.__proto__ || Object.getPrototypeOf(ResourceServer.prototype), 'sendPostRequest', _this4).call(_this4, url, params, baseForm).then(function (data) {
                        data.Service = { ServerId: _this4._id };
                        if (data.Status === 'ok') {
                            resolve(data);
                        } else {
                            reject(data);
                        }
                    }).catch(function (errors) {
                        return reject({ Status: 'error', ErrorInfo: errors.ErrorInfo });
                    });
                });
            }
        }]);
        return ResourceServer;
    }(Server);

    var resourceServersInstances = {};
    var resourceServersConstructors = {};
    var authManager = void 0;

    // зашиваем известные и часто-используемые ресурсы
    resourceServersConstructors['subscriptions'] = function () {
        return new ResourceServer(authManager, {
            id: 'subscriptions',
            root: '//fires.kosmosnimki.ru/SAPIv2'
        });
    };

    resourceServersConstructors['geomixer2'] = function () {
        return new ResourceServer(authManager, {
            id: 'geomixer2',
            root: '//maps2.kosmosnimki.ru'
        });
    };

    resourceServersConstructors['geomixer'] = function () {
        return new ResourceServer(authManager, {
            id: 'geomixer',
            root: '//maps.kosmosnimki.ru'
        });
    };

    resourceServersConstructors['geocode'] = function () {
        return new ResourceServer(authManager, {
            id: 'geocode',
            root: '//geocode.kosmosnimki.ru'
        });
    };

    function getResourceServer(id) {
        if (!authManager) {
            authManager = getAuthManager();
        }
        // используем lazy instantiation для отложенного создания
        // необходимых нам компонентов
        if (!resourceServersInstances[id]) {
            resourceServersInstances[id] = resourceServersConstructors[id]();
        }
        return resourceServersInstances[id];
    }

    function getAuthManager() {
        // то же и с authManager
        if (!authManager) {
            authManager = new AuthManager({
                authorizationEndpoint: '//my.kosmosnimki.ru/Test/LoginDialog',
                userInfoEndpoint: '//my.kosmosnimki.ru/oAuth/LoginDialog',
                redirectEndpointHtml: location.href.replace(/[^\/]+$/, '') + 'oAuth2/oAuthCallback.htm',
                redirectEndpointAshx: location.href.replace(/[^\/]+$/, '') + 'oAuth2/oAuthCallback.ashx',
                credentialLoginEndpoint: '//my.kosmosnimki.ru/Handler/Login'
            });
        }
        return authManager;
    }

    function sti(period, lon, lat) {
        return 65536 * period + 256 * Math.round(256 * (90 - lat) / 180) + Math.round(256 * (lon + 180) / 360);
    }

    function step(lat) {
        return lat < 50 ? 1 : 50 <= lat && lat <= 70 ? 2 : 3;
    }

    function tile_range(period, _ref) {
        var _ref2 = slicedToArray(_ref, 4),
            _ref2$ = slicedToArray(_ref2[0], 2),
            x1 = _ref2$[0],
            y1 = _ref2$[1],
            _ref2$2 = slicedToArray(_ref2[1], 2),
            x2 = _ref2$2[0],
            y2 = _ref2$2[1],
            _ref2$3 = slicedToArray(_ref2[2], 2),
            x3 = _ref2$3[0],
            y3 = _ref2$3[1],
            _ref2$4 = slicedToArray(_ref2[3], 2),
            x4 = _ref2$4[0],
            y4 = _ref2$4[1];

        var nw = sti(period, x1, y1) - (step(Math.abs(y1)) + 512);
        var ne = sti(period, x2, y2) + (step(Math.abs(y2)) - 512);
        var se = sti(period, x3, y3) + (step(Math.abs(y3)) + 512);

        var rng = [];
        for (var lo = nw, hi = ne; hi <= se; lo += 256, hi += 256) {
            var k = lo;
            while (k <= hi) {
                rng.push(k++);
            }
        }
        return rng;
    }

    function get_quarters(date) {
        return (date.getFullYear() - 1970) * 4 + Math.ceil((date.getMonth() + 1) / 3);
    }

    function st_range(start, end, boxes) {
        var rng = [];
        var lo = get_quarters(start);
        var hi = get_quarters(end);

        var _loop = function _loop(i) {
            boxes.forEach(function (box) {
                tile_range(i, box).forEach(function (n) {
                    return rng.push(n);
                });
            });
        };

        for (var i = lo; i <= hi; i++) {
            _loop(i);
        }
        return rng;
    }

    function to_query(range) {
        return '' + (range.length > 0 ? 'stidx IN (' + range.join(',') + ')' : '');
    }

    var RequestAdapter = function () {
        function RequestAdapter(_ref) {
            var layer = _ref.layer,
                gmxResourceServer = _ref.gmxResourceServer,
                authorized = _ref.authorized;
            classCallCheck(this, RequestAdapter);

            this._layer = layer;
            this._gmxResourceServer = gmxResourceServer;
            this._geometries = [];
            this._authorized = authorized;
        }

        createClass(RequestAdapter, [{
            key: '_formatDate',
            value: function _formatDate(date) {
                return moment(date).format('YYYY-MM-DD');
            }
        }, {
            key: 'search',
            value: function search() {
                var _this = this;

                var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

                return new Promise(function (resolve, reject) {
                    var rq = _this.request;
                    rq.pagesize = limit;
                    _this._gmxResourceServer.sendPostRequest('VectorLayer/Search.ashx', rq).then(function (response) {
                        if (response.Status === 'ok') {
                            resolve(response.Result);
                        } else {
                            reject(response);
                        }
                    }).catch(function (e) {
                        return reject(e);
                    });
                });
            }
        }, {
            key: 'criteria',
            set: function set$$1(value) {
                this._criteria = value;
            },
            get: function get$$1() {
                return this._criteria;
            }
        }, {
            key: 'satellites',
            get: function get$$1() {
                var _this2 = this;

                var _criteria = this._criteria,
                    satellites = _criteria.satellites,
                    archive = _criteria.archive;

                var serialize = function serialize(s) {
                    return Object.keys(s).reduce(function (a, k) {
                        return a.concat(s[k]);
                    }, []);
                };
                var ss = serialize(satellites.ms).concat(serialize(satellites.pc));
                return '(' + ss.filter(function (x) {
                    return x.checked;
                }).map(function (x) {
                    return '(' + x.condition(archive, _this2._authorized) + ')';
                }).join(' OR ') + ')';
            }
        }, {
            key: 'geometries',
            get: function get$$1() {
                return this._geometries;
            },
            set: function set$$1(value) {
                this._geometries = value;
            }
        }, {
            key: 'geometry',
            get: function get$$1() {
                return {
                    type: 'GeometryCollection',
                    geometries: this._geometries
                };
            }
        }, {
            key: 'hasGeometry',
            get: function get$$1() {
                return Array.isArray(this._geometries) && this._geometries.length > 0;
            }
        }, {
            key: 'date',
            get: function get$$1() {
                var _criteria2 = this._criteria,
                    date = _criteria2.date,
                    annually = _criteria2.annually;

                var _date = slicedToArray(date, 2),
                    dateStart = _date[0],
                    dateEnd = _date[1];

                if (annually) {
                    var dcr = [];
                    var startMonth = dateStart.getMonth();
                    var startDay = dateStart.getDate();
                    var endMonth = dateEnd.getMonth();
                    var endDay = dateEnd.getDate();
                    var endYear = dateEnd.getFullYear();
                    if (startMonth > endMonth) {
                        --endYear;
                    }
                    for (var year = dateStart.getFullYear(); year <= endYear; year++) {
                        var start = new Date(year, startMonth, startDay);
                        var end = new Date(startMonth > endMonth ? year + 1 : year, endMonth, endDay);
                        dcr.push('(acqdate >= \'' + this._formatDate(start) + '\' AND acqdate <= \'' + this._formatDate(end) + '\')');
                    }
                    return '(' + dcr.join(' OR ') + ')';
                } else {
                    return '(acqdate >= \'' + this._formatDate(dateStart) + '\' AND acqdate <= \'' + this._formatDate(dateEnd) + '\')';
                }
            }
        }, {
            key: 'clouds',
            get: function get$$1() {
                var clouds = this._criteria.clouds;

                var _clouds = slicedToArray(clouds, 2),
                    min = _clouds[0],
                    max = _clouds[1];

                return '(cloudness IS NULL OR cloudness < 0 OR (cloudness >= ' + min.toFixed(1) + ' AND cloudness <= ' + max.toFixed(1) + '))';
            }
        }, {
            key: 'angle',
            get: function get$$1() {
                var angle = this._criteria.angle;

                var _angle = slicedToArray(angle, 2),
                    min = _angle[0],
                    max = _angle[1];

                return '(tilt IS NULL OR tilt < 0 OR (tilt >= ' + min.toFixed(1) + ' AND tilt <= ' + max.toFixed(1) + '))';
            }
        }, {
            key: 'stereo',
            get: function get$$1() {
                var stereo = this._criteria.stereo;

                return stereo ? "NOT (stereo IS NULL OR stereo = 'NONE')" : '';
            }
        }, {
            key: 'spatial',
            get: function get$$1() {
                return 'Intersects([geomixergeojson], buffer(GeometryFromGeoJson(\'' + JSON.stringify(this.geometry) + '\', 4326), 0.001))';
            }
        }, {
            key: 'archive',
            get: function get$$1() {
                var archive = this._criteria.archive;

                switch (archive) {
                    case 'global':
                        return 'islocal = FALSE';
                    case 'local':
                        return 'islocal = TRUE';
                    default:
                    case 'all':
                        return '';
                }
            }
        }, {
            key: 'st_index',
            get: function get$$1() {
                var _criteria3 = this._criteria,
                    _criteria3$date = slicedToArray(_criteria3.date, 2),
                    start = _criteria3$date[0],
                    end = _criteria3$date[1],
                    annually = _criteria3.annually;

                var boxes = this.geometries.reduce(function (a, g) {
                    a.push(get_bbox(g));
                    return a;
                }, []);
                return to_query(st_range(start, end, boxes));
            }
        }, {
            key: 'query',
            get: function get$$1() {
                return [this.st_index, this.spatial, this.date, this.clouds, this.angle, this.stereo, this.satellites].filter(function (x) {
                    return x.trim() !== '';
                }).join(' AND ');
            }
        }, {
            key: 'request',
            get: function get$$1() {
                return {
                    layer: this._layer,
                    orderby: 'acqdate',
                    orderdirection: 'desc',
                    geometry: true,
                    page: 0,
                    pagesize: 0,
                    count: 'add',
                    out_cs: 'EPSG:3857',
                    query: this.query
                };
            }
        }]);
        return RequestAdapter;
    }();

    var Colors = {
        Default: 0x23a5cc,
        Hilite: 0x23a5cc,
        Cart: 0xef4e70,
        CartHilite: 0xef4e70
    };

    var serialize$1 = function serialize(obj) {
        return Object.keys(obj).map(function (id) {
            return obj[id];
        });
    };

    var attributes = ["hover", "selected", "visible", "clip_coords", "result", "cart", "sceneid", "acqdate", "acqtime", "cloudness", "tilt", "sunelev", "stereo", "url", "x1", "y1", "x2", "y2", "x3", "y3", "x4", "y4", "volume", "platform", "spot5_a_exists", "spot5_b_exists", "islocal", "product", "gmx_id", "sensor", "local_exists", "spot5id", "stidx"];
    var attrTypes = ["boolean", "boolean", "string", "object", "boolean", "boolean", "string", "date", "time", "float", "float", "float", "string", "string", "float", "float", "float", "float", "float", "float", "float", "float", "string", "string", "boolean", "boolean", "boolean", "boolean", "integer", "string", "boolean", "string", "integer"];

    var CompositeLayer = function (_EventTarget) {
        inherits(CompositeLayer, _EventTarget);

        function CompositeLayer(_ref) {
            var _ref$minZoom = _ref.minZoom,
                minZoom = _ref$minZoom === undefined ? 3 : _ref$minZoom,
                _ref$maxZoom = _ref.maxZoom,
                maxZoom = _ref$maxZoom === undefined ? 17 : _ref$maxZoom,
                map = _ref.map,
                _ref$qlUrl = _ref.qlUrl,
                qlUrl = _ref$qlUrl === undefined ? '//search.kosmosnimki.ru/QuickLookImage.ashx' : _ref$qlUrl,
                _ref$qlSize = _ref.qlSize,
                qlSize = _ref$qlSize === undefined ? { width: 600, height: 600 } : _ref$qlSize,
                _ref$srs = _ref.srs,
                srs = _ref$srs === undefined ? 3857 : _ref$srs;
            classCallCheck(this, CompositeLayer);

            var _this = possibleConstructorReturn(this, (CompositeLayer.__proto__ || Object.getPrototypeOf(CompositeLayer)).call(this));

            _this._currentTab = '';
            _this._qlUrl = qlUrl;
            _this._qlSize = qlSize;
            _this._attributes = attributes;
            _this._attrTypes = attrTypes;
            _this._sceneid_index = _this._attributes.indexOf('sceneid') + 1;
            _this._result_index = _this._attributes.indexOf('result') + 1;
            _this._platform_index = _this._attributes.indexOf('platform') + 1;
            _this._clip_coords_index = _this._attributes.indexOf('clip_coords') + 1;
            _this._cart_index = _this._attributes.indexOf('cart') + 1;
            _this._selected_index = _this._attributes.indexOf('selected') + 1;
            _this._url_index = _this._attributes.indexOf('url') + 1;
            _this._visible_index = _this._attributes.indexOf('visible') + 1;
            _this._hover_index = _this._attributes.indexOf('hover') + 1;
            _this._x1_index = _this._attributes.indexOf('x1') + 1;
            _this._vectors = {};
            _this._propertiesToItem = _this._propertiesToItem.bind(_this);

            _this._map = map;
            var tab_filter = function tab_filter(_ref2) {
                var properties = _ref2.properties;

                var obj = _this._propertiesToItem(properties);
                var filtered = true;
                if (typeof _this._filter === 'function') {
                    filtered = _this._filter(obj);
                }
                switch (_this._currentTab) {
                    case 'results':
                        return filtered && properties[_this._result_index];
                    case 'favorites':
                        return filtered && properties[_this._cart_index];
                    case 'search':
                        return false;
                    default:
                        return true;
                }
            };
            _this._vectorLayer = L.gmx.createLayer({
                geometry: null,
                properties: {
                    type: 'Vector',
                    visible: true,
                    identityField: 'gmx_id',
                    GeometryType: 'polygon',
                    srs: srs,
                    attributes: _this._attributes,
                    attrTypes: _this._attrTypes,
                    styles: [{
                        MinZoom: minZoom,
                        MaxZoom: maxZoom,
                        DisableBalloonOnClick: true,
                        DisableBalloonOnMouseMove: true,
                        RenderStyle: {
                            outline: { color: Colors.Default, thickness: 1 },
                            fill: { color: 0xfff, opacity: 0 }
                        },
                        HoverStyle: {
                            outline: { color: Colors.Default, thickness: 1 },
                            fill: { color: 0xfff, opacity: 0 }
                        }
                    }]
                }
            });
            _this._vectorLayer.disableFlip();
            _this._vectorLayer.setFilter(tab_filter);
            _this._vectorLayer.setStyleHook(function (item) {
                var properties = item.properties;

                var color = Colors.Default;
                var lineWidth = 1;
                if (properties[_this._hover_index]) {
                    color = properties[_this._cart_index] ? Colors.CartHilite : Colors.Hilite;
                    lineWidth = 3;
                } else {
                    color = properties[_this._cart_index] ? Colors.Cart : Colors.Default;
                }
                return { skipRasters: true, strokeStyle: color, lineWidth: lineWidth };
            });
            _this._vectorLayer.addTo(_this._map);
            _this._vectorLayer.on('click', function (e) {
                var _e$gmx = e.gmx,
                    id = _e$gmx.id,
                    layer = _e$gmx.layer,
                    target = _e$gmx.target;

                var show = null;
                if (_this._vectors[id]) {
                    var properties = _this._vectors[id].properties;

                    if (properties) {
                        switch (properties[_this._visible_index]) {
                            case 'visible':
                            case 'loading':
                                show = false;
                                break;
                            case 'hidden':
                            default:
                                show = true;
                                break;
                        }
                        _this.setVisible(id, show);
                        _this.showQuicklook(id, show).then(function () {
                            var event = document.createEvent('Event');
                            event.initEvent('ready', false, false);
                            event.detail = { id: id, show: show };
                            _this.dispatchEvent(event);
                        });
                        var event = document.createEvent('Event');
                        event.initEvent('click', false, false);
                        event.detail = { id: id, show: show };
                        _this.dispatchEvent(event);
                    }
                }
            }).on('mouseover', function (e) {
                var _e$gmx2 = e.gmx,
                    id = _e$gmx2.id,
                    layer = _e$gmx2.layer,
                    target = _e$gmx2.target;

                if (_this._vectors[id]) {
                    var properties = _this._vectors[id].properties;

                    if (properties) {
                        properties[_this._hover_index] = true;
                        _this._vectorLayer.redrawItem(id);
                        var event = document.createEvent('Event');
                        event.initEvent('mouseover', false, false);
                        event.detail = id;
                        _this.dispatchEvent(event);
                    }
                }
            }).on('mouseout', function (e) {
                var _e$gmx3 = e.gmx,
                    id = _e$gmx3.id,
                    layer = _e$gmx3.layer,
                    target = _e$gmx3.target;

                if (_this._vectors[id]) {
                    var properties = _this._vectors[id].properties;

                    if (properties) {
                        properties[_this._hover_index] = false;
                        _this._vectorLayer.redrawItem(id);
                        var event = document.createEvent('Event');
                        event.initEvent('mouseout', false, false);
                        event.detail = id;
                        _this.dispatchEvent(event);
                    }
                }
            });
            return _this;
        }

        createClass(CompositeLayer, [{
            key: 'showQuicklook',
            value: function showQuicklook(id, show) {
                var _this2 = this;

                return new Promise(function (resolve) {
                    var _vectors$id = _this2._vectors[id],
                        properties = _vectors$id.properties,
                        quicklook = _vectors$id.quicklook;

                    if (show) {
                        if (!quicklook) {
                            var sceneid = split_complex_id(properties[_this2._sceneid_index]).id;
                            var platform = properties[_this2._platform_index];
                            var imageUrl = _this2._qlUrl + '?sceneid=' + sceneid + '&platform=' + platform + '&width=' + _this2._qlSize.width + '&height=' + _this2._qlSize.height;
                            // let imageUrl = `${this._qlUrl}?sceneid=${sceneid}&platform=${platform}`;

                            var _map$getCenter = _this2._map.getCenter(),
                                lng = _map$getCenter.lng;

                            var clipCoords = normalize_geometry(properties[_this2._clip_coords_index], lng);

                            var _properties$slice = properties.slice(_this2._x1_index, _this2._x1_index + 8),
                                _properties$slice2 = slicedToArray(_properties$slice, 8),
                                x1 = _properties$slice2[0],
                                y1 = _properties$slice2[1],
                                x2 = _properties$slice2[2],
                                y2 = _properties$slice2[3],
                                x3 = _properties$slice2[4],
                                y3 = _properties$slice2[5],
                                x4 = _properties$slice2[6],
                                y4 = _properties$slice2[7];

                            var anchors = [[make_close_to(lng, x1), y1], [make_close_to(lng, x2), y2], [make_close_to(lng, x3), y3], [make_close_to(lng, x4), y4]];

                            quicklook = L.imageTransform(imageUrl, flatten(anchors, true), {
                                clip: clipCoords,
                                disableSetClip: true,
                                pane: 'tilePane'
                            });
                            quicklook.on('load', function (e) {
                                properties[_this2._visible_index] = 'visible';
                                var gmx_id = properties[0];
                                _this2._vectorLayer.bringToTopItem(gmx_id);
                                resolve();
                            });
                            quicklook.on('error', function (e) {
                                properties[_this2._visible_index] = 'failed';
                                _this2._map.removeLayer(quicklook);
                                var gmx_id = properties[0];
                                if (_this2._vectors[gmx_id]) {
                                    _this2._vectors[gmx_id].quicklook = null;
                                }
                                resolve();
                            });
                            quicklook.addTo(_this2._map);
                            _this2._vectors[id].quicklook = quicklook;
                        } else {
                            properties[_this2._visible_index] = 'visible';
                            quicklook.addTo(_this2._map);
                            _this2._vectorLayer.bringToTopItem(id);
                            resolve();
                        }
                    } else {
                        if (quicklook) {
                            _this2._map.removeLayer(quicklook);
                            _this2._vectors[id].quicklook = null;
                        }
                        _this2._vectorLayer.bringToBottomItem(id);
                        resolve();
                    }
                });
            }
        }, {
            key: '_propertiesToItem',
            value: function _propertiesToItem(properties) {
                var _this3 = this;

                return properties && properties.slice(1, properties.length - 1).reduce(function (a, v, i) {
                    var f = _this3._attributes[i];
                    switch (_this3._attrTypes[i]) {
                        case 'date':
                            switch (typeof v === 'undefined' ? 'undefined' : _typeof(v)) {
                                case 'string':
                                    a[f] = new Date(v);
                                    break;
                                case 'number':
                                    a[f] = new Date(v * 1000);
                                    break;
                                default:
                                    break;
                            }
                            break;
                        default:
                            a[f] = v;
                            break;
                    }
                    return a;
                }, {}) || null;
            }
        }, {
            key: '_mergeResults',
            value: function _mergeResults(old, data) {
                var _this4 = this;

                var cache = Object.keys(old).reduce(function (a, id) {
                    a[id] = a[id] || { properties: [], quicklook: null };
                    a[id].properties = old[id].properties;
                    return a;
                }, {});
                return data.reduce(function (a, value) {
                    var id = value[0];
                    if (cache[id]) {
                        cache[id].properties[_this4._result_index] = true;
                    } else {
                        a[id] = a[id] || { properties: [], quicklook: null };
                        a[id].properties = value;
                    }
                    return a;
                }, cache);
            }
        }, {
            key: 'setData',
            value: function setData(_ref3) {
                var _this5 = this;

                var fields = _ref3.fields,
                    values = _ref3.values;

                var idx = fields.indexOf('gmx_id');
                var vectors = values.reduce(function (a, properties) {
                    var clipCoords = normalize_geometry(L.gmxUtil.geometryToGeoJSON(properties[properties.length - 1], true, true));
                    var value = _this5._attributes.reduce(function (b, k) {
                        var i = fields.indexOf(k);
                        if (i < 0) {
                            switch (k) {
                                case 'hover':
                                case 'selected':
                                case 'cart':
                                    b.push(false);
                                    break;
                                case 'result':
                                    b.push(true);
                                    break;
                                case 'acqtime':
                                    b.push(null);
                                    break;
                                case 'visible':
                                    b.push('hidden');
                                    break;
                                case 'clip_coords':
                                    b.push(clipCoords);
                                    break;
                                default:
                                    break;
                            }
                        } else {
                            switch (k) {
                                case 'visible':
                                    switch (_typeof(properties[i])) {
                                        case 'boolean':
                                            b.push(properties[i] ? 'visible' : 'hidden');
                                            break;
                                        default:
                                        case 'string':
                                            b.push(properties[i]);
                                            break;
                                    }
                                    break;
                                case 'clip_coords':
                                    b.push(clipCoords);
                                    break;
                                default:
                                    b.push(properties[i]);
                                    break;
                            }
                        }
                        return b;
                    }, []);
                    value.unshift(properties[idx]);
                    value.push(properties[properties.length - 1]);
                    a.push(value);
                    return a;
                }, []);
                this._vectors = this._mergeResults(this._vectors, vectors);
                this._vectorLayer.removeData();
                var items = serialize$1(this._vectors).map(function (_ref4) {
                    var properties = _ref4.properties;
                    return properties;
                });
                this._vectorLayer.addData(items);
            }
        }, {
            key: 'clear',
            value: function clear() {
                var _this6 = this;

                var toRemove = Object.keys(this._vectors).reduce(function (a, id) {
                    var properties = _this6._vectors[id].properties;

                    if (properties[_this6._cart_index]) {
                        properties[_this6._result_index] = false;
                    } else {
                        a.push([id]);
                    }
                    return a;
                }, []);
                this._vectorLayer.removeData(toRemove);
                toRemove.forEach(function (_ref5) {
                    var _ref6 = slicedToArray(_ref5, 1),
                        id = _ref6[0];

                    var quicklook = _this6._vectors[id].quicklook;

                    if (quicklook) {
                        _this6._map.removeLayer(quicklook);
                    }
                    delete _this6._vectors[id];
                });
            }
        }, {
            key: 'getFilteredItems',
            value: function getFilteredItems(filter) {
                var _this7 = this;

                return serialize$1(this._vectors).map(function (_ref7) {
                    var properties = _ref7.properties;
                    return _this7._propertiesToItem(properties);
                }).filter(filter);
            }
        }, {
            key: 'getItem',
            value: function getItem(id) {
                if (this._vectors[id]) {
                    return this._propertiesToItem(this._vectors[id].properties);
                } else {
                    console.warn('vector layer item with id =', id, ' not found.');
                    return null;
                }
            }
        }, {
            key: 'redraw',
            value: function redraw() {
                this._vectorLayer.repaint();
            }
        }, {
            key: 'redrawItem',
            value: function redrawItem(id) {
                this._vectorLayer.redrawItem(id);
            }
        }, {
            key: 'setHover',
            value: function setHover(id, hover) {
                if (this._vectors[id]) {
                    this._vectors[id].properties[this._hover_index] = hover;
                    this.redrawItem(id);
                } else {
                    console.warn('vector layer item with id =', id, ' not found.');
                }
            }
        }, {
            key: 'setSelected',
            value: function setSelected(id, selected) {
                if (this._vectors[id]) {
                    this._vectors[id].properties[this._selected_index] = selected;
                    this.redrawItem(id);
                } else {
                    console.warn('vector layer item with id =', id, ' not found.');
                }
            }
        }, {
            key: 'setVisible',
            value: function setVisible(id, show) {
                if (this._vectors[id]) {
                    var properties = this._vectors[id].properties;

                    var changed = false;
                    if (show) {
                        switch (properties[this._visible_index]) {
                            case 'hidden':
                            case 'failed':
                                properties[this._visible_index] = 'loading';
                                changed = true;
                                break;
                            case 'loading':
                                properties[this._visible_index] = 'visible';
                                changed = true;
                                break;
                            case 'visible':
                            default:
                                break;
                        }
                    } else {
                        switch (properties[this._visible_index]) {
                            case 'failed':
                            case 'loading':
                            case 'visible':
                                properties[this._visible_index] = 'hidden';
                                changed = true;
                                break;
                            case 'hidden':
                            default:
                                break;
                        }
                    }
                    this._vectorLayer.redrawItem(id);
                    return changed;
                } else {
                    console.warn('vector layer item with id =', id, ' not found.');
                    return false;
                }
            }
        }, {
            key: 'addAllToCart',
            value: function addAllToCart() {
                var _this8 = this;

                Object.keys(this._vectors).forEach(function (id) {
                    var properties = _this8._vectors[id].properties;

                    if (properties[_this8._result_index]) {
                        properties[_this8._cart_index] = true;
                        properties[_this8._selected_index] = true;
                    }
                });
                this.redraw();
            }
        }, {
            key: 'addToCart',
            value: function addToCart(id) {
                var properties = this._vectors[id].properties;

                if (properties) {
                    properties[this._cart_index] = !properties[this._cart_index];
                    properties[this._selected_index] = true;
                    this._vectorLayer.redrawItem(id);
                }
                return this._propertiesToItem(properties);
            }
        }, {
            key: 'removeSelectedFavorites',
            value: function removeSelectedFavorites() {
                var _this9 = this;

                Object.keys(this._vectors).forEach(function (id) {
                    var _vectors$id2 = _this9._vectors[id],
                        properties = _vectors$id2.properties,
                        quicklook = _vectors$id2.quicklook;

                    if (properties[_this9._cart_index] && properties[_this9._selected_index]) {
                        properties[_this9._cart_index] = false;
                        properties[_this9._selected_index] = false;
                        _this9.showQuicklook(id, false);
                        _this9._vectorLayer.redrawItem(id);
                    }
                });
            }
        }, {
            key: 'addVisibleToCart',
            value: function addVisibleToCart() {
                var _this10 = this;

                Object.keys(this._vectors).forEach(function (id) {
                    var properties = _this10._vectors[id].properties;

                    if (properties[_this10._visible_index] === 'visible') {
                        properties[_this10._cart_index] = true;
                        properties[_this10._selected_index] = true;
                        _this10._vectorLayer.redrawItem(id);
                    }
                });
            }
        }, {
            key: '_normBounds',
            value: function _normBounds(x2, x4) {
                if (x2 < 0 && x4 > 0) {
                    return [x2 + 360, x4];
                } else if (x2 > 0 && x4 < 0) {
                    return [x2, x4 + 360];
                }
            }
        }, {
            key: 'getBounds',
            value: function getBounds(items) {
                var bounds = items.reduce(function (a, properties) {
                    var geometry = L.gmxUtil.convertGeometry(properties[properties.length - 1], true, true);

                    var _get_bbox = get_bbox(geometry),
                        _get_bbox2 = slicedToArray(_get_bbox, 4),
                        _get_bbox2$ = slicedToArray(_get_bbox2[0], 2),
                        x1 = _get_bbox2$[0],
                        y1 = _get_bbox2$[1],
                        _get_bbox2$2 = slicedToArray(_get_bbox2[1], 2),
                        x2 = _get_bbox2$2[0],
                        y2 = _get_bbox2$2[1],
                        _get_bbox2$3 = slicedToArray(_get_bbox2[2], 2),
                        x3 = _get_bbox2$3[0],
                        y3 = _get_bbox2$3[1],
                        _get_bbox2$4 = slicedToArray(_get_bbox2[3], 2),
                        x4 = _get_bbox2$4[0],
                        y4 = _get_bbox2$4[1];

                    var ne = L.latLng(y2, x2);
                    var sw = L.latLng(y4, x4);
                    var b = L.latLngBounds(ne, sw);
                    if (a === null) {
                        a = b;
                    } else {
                        a.extend(b);
                    }
                    return a;
                }, null);
                var ne = bounds.getNorthEast();
                var sw = bounds.getSouthWest();
                var lng = ne.lng;
                ne = L.latLng(ne.lat, make_close_to(lng, ne.lng));
                sw = L.latLng(sw.lat, make_close_to(lng, sw.lng));
                return L.latLngBounds(ne, sw);
            }
        }, {
            key: 'zoomToResults',
            value: function zoomToResults() {
                var _this11 = this;

                var items = serialize$1(this._vectors).map(function (_ref8) {
                    var properties = _ref8.properties;
                    return properties;
                }).filter(function (properties) {
                    return properties[_this11._result_index];
                });
                var bounds = this.getBounds(items);
                if (bounds) {
                    this._map.fitBounds(bounds, { animate: false });
                }
            }
        }, {
            key: 'zoomToFavorites',
            value: function zoomToFavorites() {
                var _this12 = this;

                var items = serialize$1(this._vectors).map(function (_ref9) {
                    var properties = _ref9.properties;
                    return properties;
                }).filter(function (properties) {
                    return properties[_this12._cart_index];
                });
                var bounds = this.getBounds(items);
                if (bounds) {
                    this._map.fitBounds(bounds, { animate: false });
                }
            }
        }, {
            key: 'vectors',
            get: function get$$1() {
                return this._vectors;
            }
        }, {
            key: 'hasResults',
            get: function get$$1() {
                var _this13 = this;

                return Object.keys(this._vectors).some(function (id) {
                    var properties = _this13._vectors[id].properties;

                    return properties[_this13._result_index];
                });
            }
        }, {
            key: 'hasVisibleResults',
            get: function get$$1() {
                var _this14 = this;

                return Object.keys(this._vectors).some(function (id) {
                    var properties = _this14._vectors[id].properties;

                    return properties[_this14._result_index] && properties[_this14._visible_index] === 'visible';
                });
            }
        }, {
            key: 'hasFavoritesSelected',
            get: function get$$1() {
                var _this15 = this;

                return Object.keys(this._vectors).some(function (id) {
                    var properties = _this15._vectors[id].properties;

                    return properties[_this15._cart_index] && properties[_this15._selected_index];
                });
            }
        }, {
            key: 'hasFavorites',
            get: function get$$1() {
                var _this16 = this;

                return Object.keys(this._vectors).some(function (id) {
                    var properties = _this16._vectors[id].properties;

                    return properties[_this16._cart_index];
                });
            }
        }, {
            key: 'results',
            get: function get$$1() {
                return this.getFilteredItems(function (item) {
                    return item.result;
                });
            }
        }, {
            key: 'favorites',
            get: function get$$1() {
                return this.getFilteredItems(function (item) {
                    return item.cart;
                });
            }
        }, {
            key: 'resultsCount',
            get: function get$$1() {
                var _this17 = this;

                return Object.keys(this._vectors).reduce(function (a, id) {
                    var properties = _this17._vectors[id].properties;

                    return properties[_this17._result_index] ? a + 1 : a;
                }, 0);
            }
        }, {
            key: 'favoritesCount',
            get: function get$$1() {
                var _this18 = this;

                return Object.keys(this._vectors).reduce(function (a, id) {
                    var properties = _this18._vectors[id].properties;

                    return properties[_this18._cart_index] ? a + 1 : a;
                }, 0);
            }
        }, {
            key: 'currentTab',
            set: function set$$1(value) {
                var _this19 = this;

                this._currentTab = value;
                Object.keys(this._vectors).forEach(function (id) {
                    var properties = _this19._vectors[id].properties;

                    var filtered = true;
                    if (typeof _this19._filter === 'function') {
                        filtered = _this19._filter(_this19._propertiesToItem(properties));
                    }
                    switch (_this19._currentTab) {
                        case 'results':
                            _this19.showQuicklook(id, filtered && properties[_this19._result_index] && properties[_this19._visible_index] === 'visible');
                            break;
                        case 'favorites':
                            _this19.showQuicklook(id, filtered && properties[_this19._cart_index] && properties[_this19._visible_index] === 'visible');
                            break;
                        case 'search':
                            _this19.showQuicklook(id, false);
                            break;
                        default:
                            break;
                    }
                });
            }
        }]);
        return CompositeLayer;
    }(EventTarget);

    var T$b = Translations$1;
    var cart_index = attributes.indexOf('cart') + 1;

    var ResultsController = function (_EventTarget) {
        inherits(ResultsController, _EventTarget);

        function ResultsController(_ref) {
            var map = _ref.map,
                requestAdapter = _ref.requestAdapter,
                sidebar = _ref.sidebar,
                resultList = _ref.resultList,
                favoritesList = _ref.favoritesList,
                imageDetails = _ref.imageDetails,
                drawnObjects = _ref.drawnObjects;
            classCallCheck(this, ResultsController);

            var _this = possibleConstructorReturn(this, (ResultsController.__proto__ || Object.getPrototypeOf(ResultsController)).call(this));

            _this._map = map;
            _this._cart = {};
            _this._requestAdapter = requestAdapter;
            _this._sidebar = sidebar;
            _this._resultList = resultList;
            _this._favoritesList = favoritesList;
            _this._imageDetails = imageDetails;
            _this._resultList.items = [];
            _this._favoritesList.items = [];
            _this._drawings = {};
            _this._currentTab = '';
            _this._currentID = null;

            _this._compositeLayer = new CompositeLayer({ map: _this._map });
            _this._compositeLayer.addEventListener('click', function (e) {
                var _e$detail = e.detail,
                    id = _e$detail.id,
                    show = _e$detail.show;

                var obj = _this._compositeLayer.getItem(id);
                _this._update_list_item(id, obj);
                switch (_this._currentTab) {
                    case 'results':
                        if (show) {
                            if (_this._currentID) {
                                _this._resultList.dim(_this._currentID);
                            }
                            _this._currentID = id;
                            _this._resultList.hilite(id);
                            _this._resultList.scrollToRow(id);
                        } else {
                            _this._currentID = null;
                        }
                        break;
                    case 'favorites':
                        if (show) {
                            if (_this._currentID) {
                                _this._favoritesList.dim(_this._currentID);
                            }
                            _this._currentID = id;
                            _this._favoritesList.hilite(id);
                            _this._favoritesList.scrollToRow(id);
                        } else {
                            _this._currentID = null;
                        }
                        break;
                    default:
                        break;
                }
            });
            _this._compositeLayer.addEventListener('ready', function (e) {
                var id = e.detail.id;

                var obj = _this._compositeLayer.getItem(id);
                _this._update_list_item(id, obj);
                var event = document.createEvent('Event');
                event.initEvent('visible', false, false);
                _this.dispatchEvent(event);
            });
            _this._compositeLayer.addEventListener('mouseover', function (e) {
                var id = e.detail;
                _this._highlight(id, true);
            });
            _this._compositeLayer.addEventListener('mouseout', function (e) {
                var id = e.detail;
                _this._highlight(id, false);
            });

            _this._resultList.addEventListener('cart', function (e) {
                var gmx_id = e.detail.gmx_id;

                var item = _this._compositeLayer.addToCart(gmx_id);
                _this._resultList.redrawItem(gmx_id, item);

                var event = document.createEvent('Event');
                event.initEvent('cart', false, false);
                event.detail = item;
                _this.dispatchEvent(event);
            });

            _this._resultList.addEventListener('visible', function (e) {
                var _e$detail2 = e.detail,
                    gmx_id = _e$detail2.gmx_id,
                    visible = _e$detail2.visible;

                var show = false;
                switch (visible) {
                    case 'visible':
                    case 'loading':
                        show = false;
                        break;
                    case 'hidden':
                    default:
                        show = true;
                        break;
                }

                _this._show_ql(gmx_id, show).then(function () {
                    var event = document.createEvent('Event');
                    event.initEvent('visible', false, false);
                    _this.dispatchEvent(event);
                });
            });
            _this._resultList.addEventListener('info', function (e) {
                var _e$detail3 = e.detail,
                    item = _e$detail3.item,
                    top = _e$detail3.top,
                    button = _e$detail3.button;
                var _this$_resultList$bbo = _this._resultList.bbox,
                    left = _this$_resultList$bbo.left,
                    width = _this$_resultList$bbo.width;

                _this._imageDetails.button = button;
                if (_this._imageDetails.visible && _this._imageDetails.item.sceneid == item.sceneid) {
                    _this._imageDetails.hide();
                } else {
                    _this._imageDetails.hide();
                    _this._imageDetails.item = item;
                    _this._imageDetails.show({ left: left + width + 20, top: top });
                }
            });

            _this._resultList.addEventListener('mouseover', function (e) {
                var gmx_id = e.detail.item.gmx_id;

                _this._compositeLayer.setHover(gmx_id, true);
            });

            _this._resultList.addEventListener('mouseout', function (e) {
                var gmx_id = e.detail.item.gmx_id;

                _this._compositeLayer.setHover(gmx_id, false);
            });

            _this._resultList.addEventListener('click', function (e) {
                var gmx_id = e.detail.item.gmx_id;
                var properties = _this._compositeLayer.vectors[gmx_id].properties;

                var bounds = _this._compositeLayer.getBounds([properties]);
                _this._map.fitBounds(bounds, { animate: false });

                _this._show_ql(gmx_id, true).then(function () {
                    var event = document.createEvent('Event');
                    event.initEvent('visible', false, false);
                    _this.dispatchEvent(event);
                });
            });

            _this._resultList.addEventListener('cart:all', function (e) {
                var state = e.detail.state;


                _this._compositeLayer.addAllToCart();
                _this._resultList.items = _this._compositeLayer.getFilteredItems(function (item) {
                    return item.result;
                });

                var event = document.createEvent('Event');
                event.initEvent('cart', false, false);
                _this.dispatchEvent(event);
            });

            _this._resultList.addEventListener('cart:limit', function (e) {
                var event = document.createEvent('Event');
                event.initEvent('cart:limit', false, false);
                _this.dispatchEvent(event);
            });

            _this._favoritesList.addEventListener('selected', function (e) {
                var _e$detail4 = e.detail,
                    gmx_id = _e$detail4.gmx_id,
                    selected = _e$detail4.selected;

                _this._compositeLayer.setSelected(gmx_id, selected);
                var event = document.createEvent('Event');
                event.initEvent('selected', false, false);
                event.detail = e.detail;
                _this.dispatchEvent(event);
            });

            _this._favoritesList.addEventListener('visible', function (e) {
                var _e$detail5 = e.detail,
                    gmx_id = _e$detail5.gmx_id,
                    visible = _e$detail5.visible;

                var show = false;
                switch (visible) {
                    case 'visible':
                    case 'loading':
                        show = false;
                        break;
                    case 'hidden':
                    default:
                        show = true;
                        break;
                }
                _this._show_ql(gmx_id, show).then(function () {
                    var event = document.createEvent('Event');
                    event.initEvent('visible', false, false);
                    _this.dispatchEvent(event);
                });
            });

            _this._favoritesList.addEventListener('visible:all', function (e) {
                var show = e.detail;
                var items = _this._compositeLayer.vectors;
                Object.keys(items).filter(function (id) {
                    return items[id].properties[cart_index];
                }).forEach(function (id) {
                    _this._show_ql(id, show);
                });

                var event = document.createEvent('Event');
                event.initEvent('visible', false, false);
                _this.dispatchEvent(event);
            });

            _this._favoritesList.addEventListener('mouseover', function (e) {
                var gmx_id = e.detail.item.gmx_id;

                _this._compositeLayer.setHover(gmx_id, true);
            });

            _this._favoritesList.addEventListener('mouseout', function (e) {
                var gmx_id = e.detail.item.gmx_id;

                _this._compositeLayer.setHover(gmx_id, false);
            });

            _this._favoritesList.addEventListener('info', function (e) {
                var _e$detail6 = e.detail,
                    item = _e$detail6.item,
                    top = _e$detail6.top,
                    button = _e$detail6.button;
                var _this$_favoritesList$ = _this._favoritesList.bbox,
                    left = _this$_favoritesList$.left,
                    width = _this$_favoritesList$.width;

                _this._imageDetails.button = button;
                if (_this._imageDetails.visible && _this._imageDetails.item.sceneid == item.sceneid) {
                    _this._imageDetails.hide();
                } else {
                    _this._imageDetails.hide();
                    _this._imageDetails.item = item;
                    _this._imageDetails.show({ left: left + width + 20, top: top });
                }
            });

            _this._favoritesList.addEventListener('click', function (e) {
                var gmx_id = e.detail.item.gmx_id;
                var properties = _this._compositeLayer.vectors[gmx_id].properties;

                var bounds = _this._compositeLayer.getBounds([properties]);
                _this._map.fitBounds(bounds, { animate: false });
                _this._show_ql(gmx_id, true);
            });

            _this._drawnObjects = drawnObjects;
            _this.createDrawing = _this.createDrawing.bind(_this);

            _this._map.gmxDrawing.on('drawstop', _this.createDrawing).on('editstop', function (_ref2) {
                var object = _ref2.object;

                if (this._drawings[object.options.uuid]) {
                    this.updateDrawing(object);
                }
            }.bind(_this)).on('dragend', function (_ref3) {
                var object = _ref3.object;

                if (this._drawings[object.options.uuid]) {
                    this.updateDrawing(object);
                }
            }.bind(_this));

            _this._drawnObjects.addEventListener('edit', function (e) {
                var _e$detail7 = e.detail,
                    id = _e$detail7.id,
                    name = _e$detail7.name,
                    color = _e$detail7.color;
                var drawing = _this._drawings[id].drawing;

                _this._drawings[id].name = name;
                _this._drawings[id].color = color;
                var options = {
                    lineStyle: {
                        fill: false,
                        weight: 2,
                        opacity: 1,
                        color: color
                    },
                    pointStyle: { color: color }
                };
                if (drawing) {
                    if (drawing.options.editable) {
                        drawing.setOptions(options);
                    } else {
                        drawing.enableEdit();
                        options.className = 'osm-layer';
                        drawing.setOptions(options);
                        drawing.disableEdit();
                    }
                }
            });

            _this._drawnObjects.addEventListener('delete', function (e) {
                var id = e.detail.id;
                var drawing = _this._drawings[id].drawing;

                delete _this._drawings[id];
                if (drawing) {
                    drawing.remove();
                }
                _this.updateDrawnObjects();
            });

            _this._drawnObjects.addEventListener('check', function (e) {
                var _e$detail8 = e.detail,
                    id = _e$detail8.id,
                    visible = _e$detail8.visible;

                _this.showDrawing(id, visible);
                _this.updateDrawnObjects();
            });

            _this._drawnObjects.addEventListener('show:all', function (e) {
                var visible = e.detail;
                Object.keys(_this._drawings).forEach(function (id) {
                    _this.showDrawing(id, visible);
                });
            });

            _this._drawnObjects.addEventListener('fit', function (e) {
                var _e$detail9 = e.detail,
                    id = _e$detail9.id,
                    visible = _e$detail9.visible;

                var item = _this._drawings[id];
                if (visible && item) {
                    var _item$geoJSON$geometr = item.geoJSON.geometry,
                        type = _item$geoJSON$geometr.type,
                        coordinates = _item$geoJSON$geometr.coordinates;

                    if (type === 'Point') {
                        var center = L.latLng(coordinates[1], coordinates[0]);
                        _this._map.setView(center);
                        // this._map.invalidateSize();
                    } else {
                        var bounds = item.drawing.getBounds();
                        _this._map.fitBounds(bounds, { animate: false });
                        // this._map.invalidateSize();
                    }
                }
            });

            _this._drawnObjects.addEventListener('delete:all', function (e) {
                Object.keys(_this._drawings).forEach(function (id) {
                    var drawing = _this._drawings[id].drawing;

                    delete _this._drawings[id];
                    if (drawing) {
                        drawing.remove();
                    }
                });
                _this.updateDrawnObjects();
            });

            document.body.addEventListener('click', function (e) {
                return _this._imageDetails.hide();
            });
            return _this;
        }

        createClass(ResultsController, [{
            key: '_highlight',
            value: function _highlight(gmx_id, hover) {
                switch (this._currentTab) {
                    case 'results':
                        if (hover) {
                            this._resultList.hilite(gmx_id);
                        } else {
                            this._resultList.dim(gmx_id);
                        }
                        break;
                    case 'favorites':
                        if (hover) {
                            this._favoritesList.hilite(gmx_id);
                        } else {
                            this._favoritesList.dim(gmx_id);
                        }
                        break;
                    default:
                        break;
                }
            }
        }, {
            key: '_update_list_item',
            value: function _update_list_item(id, item) {
                switch (this._currentTab) {
                    case 'results':
                        this._resultList.redrawItem(id, item);
                        break;
                    case 'favorites':
                        this._favoritesList.redrawItem(id, item);
                        break;
                    default:
                        break;
                }
            }
        }, {
            key: '_show_ql',
            value: function _show_ql(id, show) {
                var _this2 = this;

                return new Promise(function (resolve) {
                    if (_this2._compositeLayer.setVisible(id, show)) {
                        _this2._update_list_item(id, _this2._compositeLayer.getItem(id));
                        _this2._compositeLayer.showQuicklook(id, show).then(function () {
                            _this2._update_list_item(id, _this2._compositeLayer.getItem(id));
                            var event = document.createEvent('Event');
                            event.initEvent('visible', false, false);
                            _this2.dispatchEvent(event);
                            resolve();
                        }).catch(function (e) {
                            return console.log(e);
                        });
                    }
                });
            }
        }, {
            key: 'setLayer',
            value: function setLayer(_ref4) {
                var fields = _ref4.fields,
                    values = _ref4.values,
                    types = _ref4.types;
                var activeTabId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'results';

                this._compositeLayer.setData({ fields: fields, values: values }, activeTabId);
                var event = document.createEvent('Event');
                event.initEvent('result:done', false, false);
                event.detail = { activeTabId: activeTabId };
                this.dispatchEvent(event);
            }
        }, {
            key: 'hideContours',
            value: function hideContours() {
                this._currentTab = 'search';
                this._compositeLayer.currentTab = this._currentTab;
                this._compositeLayer.redraw();
            }
        }, {
            key: 'showResults',
            value: function showResults() {
                this._currentTab = 'results';
                this._compositeLayer.currentTab = this._currentTab;
                this._compositeLayer.redraw();
                this._resultList.items = this._compositeLayer.getFilteredItems(function (item) {
                    return item.result;
                });
                // this._resultList.items.forEach(({gmx_id, visible}) => this._update_ql(gmx_id, visible));
            }
        }, {
            key: 'zoomToResults',
            value: function zoomToResults() {
                this._compositeLayer.zoomToResults();
            }
        }, {
            key: 'zoomToFavorites',
            value: function zoomToFavorites() {
                this._compositeLayer.zoomToFavorites();
            }
        }, {
            key: 'showFavorites',
            value: function showFavorites() {
                this._currentTab = 'favorites';
                this._compositeLayer.currentTab = this._currentTab;
                this._compositeLayer.redraw();
                this.favoritesList.items = this._compositeLayer.getFilteredItems(function (item) {
                    return item.cart;
                });
                // this.favoritesList.items.forEach(({gmx_id, visible}) => this._update_ql(gmx_id, visible));
            }
        }, {
            key: 'addVisibleToCart',
            value: function addVisibleToCart() {

                if (this._compositeLayer.getFilteredItems(function (item) {
                    return item.result && item.visible === 'visible' || item.cart;
                }).length > window.MAX_CART_SIZE) {
                    var _event = document.createEvent('Event');
                    _event.initEvent('cart:limit', false, false);
                    this.dispatchEvent(_event);
                    return;
                }

                this._compositeLayer.addVisibleToCart();

                this.showResults();

                var event = document.createEvent('Event');
                event.initEvent('cart', false, false);
                this.dispatchEvent(event);
            }
        }, {
            key: '_update_ql',
            value: function _update_ql(id, visible) {
                var show = false;
                if (typeof visible === 'boolean') {
                    show = visible;
                } else if (typeof visible === 'string') {
                    switch (visible) {
                        case 'visible':
                        case 'loading':
                            show = true;
                            break;
                        case 'hidden':
                        default:
                            show = false;
                            break;
                    }
                }
                return this._show_ql(id, show);
            }
        }, {
            key: 'removeSelectedFavorites',
            value: function removeSelectedFavorites() {
                this._compositeLayer.removeSelectedFavorites();
                this._favoritesList.items = this._compositeLayer.getFilteredItems(function (item) {
                    return item.cart;
                });
            }
        }, {
            key: 'clear',
            value: function clear() {
                this.resultList.items = [];
                this._downloadCache = [];
                this._compositeLayer.clear();
            }
        }, {
            key: 'createDrawing',
            value: function createDrawing(_ref5) {
                var object = _ref5.object,
                    geoJSON = _ref5.geoJSON;

                var id = object.options.uuid || L.gmxUtil.newId();
                if (!this._drawings[id]) {
                    object.options.uuid = id;
                    var color = L.GmxDrawing.utils.defaultStyles.lineStyle.color;
                    switch (object.options.type) {
                        case 'Polygon':
                        case 'Polyline':
                        case 'Rectangle':
                            color = object.options.lineStyle.color;
                            break;
                        default:
                            break;
                    }
                    geoJSON = geoJSON || object.toGeoJSON();
                    this._drawings[object.options.uuid] = this.getObject({
                        id: object.options.uuid,
                        name: null,
                        geoJSON: geoJSON,
                        color: color,
                        visible: true
                    });
                    this._drawings[object.options.uuid].drawing = object;
                    this.updateDrawnObjects();
                    window.Catalog.preventShowQuicklook = false;
                    return this._drawings[object.options.uuid].drawing;
                } else {
                    return this._drawings[id].drawing;
                }
            }
        }, {
            key: 'addDrawing',
            value: function addDrawing(item) {
                var name = item.name,
                    color = item.color,
                    area = item.area,
                    geoJSON = item.geoJSON,
                    visible = item.visible;

                if (is_geojson_feature(geoJSON)) {
                    var id = L.gmxUtil.newId();
                    var editable = typeof geoJSON.properties.editable === 'undefined' ? true : geoJSON.properties.editable;
                    this._drawings[id] = this.getObject({ id: id, name: name, geoJSON: geoJSON, color: color, visible: visible, editable: editable });
                    this.updateDrawnObjects();
                    this.showDrawing(id, visible);
                    return this._drawings[id].drawing;
                } else {
                    return null;
                }
            }
        }, {
            key: 'showDrawing',
            value: function showDrawing(id, visible) {
                if (visible) {
                    var object = this._drawings[id];
                    var color = object.color;
                    var editable = typeof object.geoJSON.properties.editable === 'undefined' ? true : object.geoJSON.properties.editable;
                    var options = {
                        editable: editable,
                        lineStyle: {
                            fill: false,
                            weight: 2,
                            opacity: 1,
                            color: color
                        },
                        pointStyle: {
                            color: color
                        }
                    };

                    var _map$gmxDrawing$addGe = this._map.gmxDrawing.addGeoJSON(object.geoJSON, options),
                        _map$gmxDrawing$addGe2 = slicedToArray(_map$gmxDrawing$addGe, 1),
                        drawing = _map$gmxDrawing$addGe2[0];

                    if (!editable) {
                        options.className = 'osm-layer';
                        // drawing.enableEdit();
                        drawing.setOptions({
                            editable: editable,
                            lineStyle: {
                                fill: false,
                                weight: 2,
                                opacity: 1,
                                color: color
                            },
                            pointStyle: { color: color }
                        });
                        // drawing.disableEdit();
                    }
                    drawing.options.uuid = id;
                    object.drawing = drawing;
                    drawing.bringToBack();
                    drawing.visible = true;
                } else {
                    this._drawings[id].visible = false;
                    if (this._drawings[id].drawing) {
                        this._drawings[id].drawing.remove();
                        this._drawings[id].drawing = null;
                    }
                }
            }
        }, {
            key: 'updateDrawing',
            value: function updateDrawing(object) {
                var id = object.options.uuid;
                var geoJSON = object.toGeoJSON();
                var geometry = geoJSON.geometry;
                var coordinates = geometry.coordinates;

                if (typeof coordinates !== 'undefined' && this._drawings[id]) {
                    this._drawings[id].drawing = object;
                    this._drawings[id].geoJSON = geoJSON;
                    this._drawings[id].area = this._getObjectArea(geoJSON);
                } else {
                    if (this._drawings[id].drawing) {
                        this._drawings[id].drawing.remove();
                        this._drawings[id].drawing = null;
                        delete this._drawings[id];
                    }
                }
                this.updateDrawnObjects();
            }
        }, {
            key: '_getObjectName',
            value: function _getObjectName(geoJSON) {
                if (geoJSON.properties.name) {
                    return geoJSON.properties.name;
                } else {
                    var type = geoJSON.geometry.type;
                    switch (type.toUpperCase()) {
                        case 'POINT':
                            return T$b.getText('objects.point');
                        case 'LINESTRING':
                        case 'MULTILINESTRING':
                            return T$b.getText('objects.line');
                        case 'MULTIPOLYGON':
                        case 'POLYGON':
                        default:
                            return T$b.getText('objects.polygon');
                    }
                }
            }
        }, {
            key: '_getObjectArea',
            value: function _getObjectArea(geoJSON) {
                var _geoJSON$geometry = geoJSON.geometry,
                    type = _geoJSON$geometry.type,
                    coordinates = _geoJSON$geometry.coordinates;

                if (typeof coordinates !== 'undefined') {
                    switch (type.toUpperCase()) {
                        case 'POINT':
                            return 0;
                        case 'LINESTRING':
                        case 'MULTILINESTRING':
                            return L.gmxUtil.geoJSONGetLength(geoJSON);
                        case 'MULTIPOLYGON':
                        case 'POLYGON':
                        default:
                            return L.gmxUtil.geoJSONGetArea(geoJSON);
                    }
                }
            }
        }, {
            key: 'getObject',
            value: function getObject(_ref6) {
                var id = _ref6.id,
                    name = _ref6.name,
                    geoJSON = _ref6.geoJSON,
                    color = _ref6.color,
                    visible = _ref6.visible;

                id = id || L.gmxUtil.newId();
                return {
                    id: id,
                    name: name === null || typeof name === 'undefined' ? this._getObjectName(geoJSON) : decodeURIComponent(name),
                    area: this._getObjectArea(geoJSON),
                    geoJSON: { type: 'Feature', geometry: L.gmxUtil.geometryToGeoJSON(geoJSON.geometry), properties: geoJSON.properties },
                    visible: typeof visible === 'undefined' ? true : Boolean(visible),
                    color: geoJSON.geometry.type === 'Point' ? undefined : typeof color === 'undefined' ? '#0033FF' : isNaN(parseInt(color, 10)) ? color : '#' + hex(color),
                    editable: typeof geoJSON.properties.editable === 'undefined' ? true : geoJSON.properties.editable
                };
            }
        }, {
            key: 'updateDrawnObjects',
            value: function updateDrawnObjects() {
                var _this3 = this;

                var objects = Object.keys(this._drawings).map(function (id) {
                    return _this3._drawings[id];
                });
                this._requestAdapter.geometries = objects.filter(function (obj) {
                    return obj.visible;
                }).reduce(function (a, _ref7) {
                    var geoJSON = _ref7.geoJSON;
                    return a.concat(geoJSON.geometry);
                }, []).reduce(function (a, geometry) {
                    return a.concat(split180(geometry));
                }, []);
                this._drawnObjects.items = objects;
            }
        }, {
            key: 'enableFilter',
            value: function enableFilter(enable) {
                this._resultList.enableFilter(enable);
                this._favoritesList.enableFilter(enable);
            }
        }, {
            key: 'cart',
            get: function get$$1() {
                return this._cart;
            }
        }, {
            key: 'resultList',
            get: function get$$1() {
                return this._resultList;
            }
        }, {
            key: 'favoritesList',
            get: function get$$1() {
                return this._favoritesList;
            }
        }, {
            key: 'drawings',
            set: function set$$1(value) {
                this._drawings = value;
            },
            get: function get$$1() {
                return this._drawings;
            }
        }, {
            key: 'downloadCache',
            set: function set$$1(_ref8) {
                var fields = _ref8.fields,
                    values = _ref8.values,
                    types = _ref8.types;

                this._downloadCache = from_gmx({ fields: fields, values: values, types: types });
            },
            get: function get$$1() {
                return this._downloadCache;
            }
        }, {
            key: 'resultsCount',
            get: function get$$1() {
                return this._compositeLayer.resultsCount;
            }
        }, {
            key: 'favoritesCount',
            get: function get$$1() {
                return this._compositeLayer.favoritesCount;
            }
        }, {
            key: 'count',
            get: function get$$1() {
                switch (this._currentTab) {
                    case 'results':
                        return this._resultList.count;
                    case 'favorites':
                        return this._favoritesList.count;
                    default:
                        return 0;
                }
            }
        }, {
            key: 'hasResults',
            get: function get$$1() {
                return this._compositeLayer.hasResults;
            }
        }, {
            key: 'hasVisibleResults',
            get: function get$$1() {
                return this._compositeLayer.hasVisibleResults;
            }
        }, {
            key: 'hasFavoritesSelected',
            get: function get$$1() {
                return this._compositeLayer.hasFavoritesSelected;
            }
        }, {
            key: 'hasFavorites',
            get: function get$$1() {
                return this._compositeLayer.hasFavorites;
            }
        }, {
            key: 'results',
            get: function get$$1() {
                var items = this._compositeLayer.vectors;
                return this._compositeLayer.results.map(function (item) {
                    var properties = items[item.gmx_id].properties;

                    item.geoJSON = L.gmxUtil.convertGeometry(properties[properties.length - 1], true, true);
                    item.geoJSON = normalize_geometry_type(item.geoJSON);
                    return item;
                });
            }
        }, {
            key: 'favorites',
            get: function get$$1() {
                var items = this._compositeLayer.vectors;
                return this._compositeLayer.favorites.map(function (item) {
                    var properties = items[item.gmx_id].properties;

                    item.geoJSON = L.gmxUtil.convertGeometry(properties[properties.length - 1], true, true);
                    item.geoJSON = normalize_geometry_type(item.geoJSON);
                    return item;
                });
            }
        }, {
            key: 'filter',
            set: function set$$1(value) {
                this._filter = value;
                this._resultList.filter = value;
                this._favoritesList.filter = value;
                this._compositeLayer.redraw();
            }
        }, {
            key: 'platforms',
            get: function get$$1() {
                var get_platforms = function get_platforms(items) {
                    var ps = items.reduce(function (a, _ref9) {
                        var platform = _ref9.platform;

                        a[platform] = true;
                        return a;
                    }, {});
                    return Object.keys(ps).map(function (platform) {
                        return { platform: platform, checked: true };
                    });
                };
                switch (this._currentTab) {
                    case 'results':
                        return get_platforms(this._compositeLayer.getFilteredItems(function (item) {
                            return item.result;
                        }));
                    case 'favorites':
                        return get_platforms(this._compositeLayer.getFilteredItems(function (item) {
                            return item.cart;
                        }));
                    default:
                        return [];
                }
            }
        }]);
        return ResultsController;
    }(EventTarget);

    var chain$1 = function chain(tasks, state) {
        return tasks.reduce(function (prev, next) {
            return prev.then(next);
        }, new Promise(function (resolve, reject) {
            return resolve(state);
        }));
    };

    var NotificationWidget = function () {
        function NotificationWidget(container) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { timeout: 0 };
            classCallCheck(this, NotificationWidget);

            this._container = container;
            this._options = options;
            this._content = document.createElement('div');
            this._container.appendChild(this._content);
            this._content.classList.add('notification-widget');
        }

        createClass(NotificationWidget, [{
            key: 'show',
            value: function show() {
                var _this = this;

                if (this._options.timeout) {
                    this._content.classList.add('notification-on');
                    window.setTimeout(function () {
                        return _this.hide();
                    }, this._options.timeout);
                } else {
                    this._content.classList.add('notification-on');
                }
            }
        }, {
            key: 'hide',
            value: function hide() {
                this._content.classList.remove('notification-on');
            }
        }, {
            key: 'content',
            get: function get$$1() {
                return this._content;
            }
        }]);
        return NotificationWidget;
    }();

    var T$c = Translations$1;

    var LoaderWidget = function (_EventTarget) {
        inherits(LoaderWidget, _EventTarget);

        function LoaderWidget() {
            classCallCheck(this, LoaderWidget);

            var _this = possibleConstructorReturn(this, (LoaderWidget.__proto__ || Object.getPrototypeOf(LoaderWidget)).call(this));

            _this._container = document.createElement('div');
            document.body.appendChild(_this._container);
            _this._container.classList.add('noselect');
            _this._container.classList.add('loader-widget');
            _this._container.innerHTML = '<div class="loader-icon"></div><div class="loader-button">' + T$c.getText('alerts.cancel') + '</div>';
            _this._ovl = document.querySelector('.loader-widget-overlay');
            _this._stopPropagation = _this._stopPropagation.bind(_this);
            if (!_this._ovl) {
                _this._ovl = document.createElement('div');
                document.body.appendChild(_this._ovl);
                _this._ovl.className = 'loader-widget-overlay';
                _this._ovl.style.display = 'none';
                _this._ovl.addEventListener('mousemove', _this._stopPropagation);
                _this._ovl.addEventListener('mousewheel', _this._stopPropagation);
                _this._ovl.addEventListener('click', _this._stopPropagation);
            }
            _this._container.querySelector('.loader-button').addEventListener('click', function (e) {
                _this.hide();
                var event = document.createEvent('Event');
                event.initEvent('cancel', false, false);
                _this.dispatchEvent(event);
            });
            _this.show = _this.show.bind(_this);
            _this.hide = _this.hide.bind(_this);
            return _this;
        }

        createClass(LoaderWidget, [{
            key: '_stopPropagation',
            value: function _stopPropagation(e) {
                e.stopPropagation();
            }
        }, {
            key: 'show',
            value: function show() {
                this._ovl.style.display = 'block';
                this._container.querySelector('.loader-icon').classList.add('loader-animated');
                this._container.style.visibility = 'visible';
            }
        }, {
            key: 'hide',
            value: function hide() {
                this._ovl.style.display = 'none';
                this._container.querySelector('.loader-icon').classList.remove('loader-animated');
                this._container.style.visibility = 'hidden';
            }
        }]);
        return LoaderWidget;
    }(EventTarget);

    var PLEIADES = [{ 'Name': 'datastrip', 'Type': 'String' }, { 'Name': 'orb', 'Type': 'Float' }, { 'Name': 'satel', 'Type': 'String' }, { 'Name': 'dataq_star', 'Type': 'Date' }, { 'Name': 'dataq_end', 'Type': 'Date' }, { 'Name': 'sensor', 'Type': 'String' }, { 'Name': 'cloud_per', 'Type': 'Float' }, { 'Name': 'snow_per', 'Type': 'Float' }, { 'Name': 'incid_ang', 'Type': 'Float' }, { 'Name': 'sun_azimut', 'Type': 'Float' }, { 'Name': 'sun_elevat', 'Type': 'Float' }, { 'Name': 'orient_ang', 'Type': 'Float' }, { 'Name': 'across_ang', 'Type': 'Float' }, { 'Name': 'along_ang', 'Type': 'Float' }, { 'Name': 'combin_ang', 'Type': 'Float' }, { 'Name': 'roll_ang', 'Type': 'Float' }, { 'Name': 'pitch_ang', 'Type': 'Float' }, { 'Name': 'url_ql', 'Type': 'String' },
    // {'Name':'url','Type':'String'},  
    { 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }];

    var PLEIADES_L = [{ 'Name': 'scene_id', 'Type': 'String' }, { 'Name': 'url', 'Type': 'String' }, { 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }, { 'Name': 'ds_id', 'Type': 'String' }, { 'Name': 'satellite', 'Type': 'String' }, { 'Name': 'sensor_mod', 'Type': 'String' }, { 'Name': 'sun_azimut', 'Type': 'Float' }, { 'Name': 'sun_elevat', 'Type': 'Float' }, { 'Name': 'view_angle', 'Type': 'Float' }, { 'Name': 'img_start', 'Type': 'Date' }, { 'Name': 'order_id', 'Type': 'String' }, { 'Name': 'pack_id', 'Type': 'String' }, { 'Name': 'del_id', 'Type': 'String' }, { 'Name': 'com_id', 'Type': 'String' }, { 'Name': 'qlurl', 'Type': 'String' }];

    var DG_products = [{ 'Name': 'catalogid', 'Type': 'String' }, { 'Name': 'acqdate', 'Type': 'Date' }, { 'Name': 'mnoffnadir', 'Type': 'Float' }, { 'Name': 'mxoffnadir', 'Type': 'Float' }, { 'Name': 'avoffnadir', 'Type': 'Float' }, { 'Name': 'mnsunazim', 'Type': 'Float' }, { 'Name': 'mxsunazim', 'Type': 'Float' }, { 'Name': 'avsunazim', 'Type': 'Float' }, { 'Name': 'mnsunelev', 'Type': 'Float' }, { 'Name': 'mxsunelev', 'Type': 'Float' }, { 'Name': 'avsunelev', 'Type': 'Float' }, { 'Name': 'mntargetaz', 'Type': 'Float' }, { 'Name': 'mxtargetaz', 'Type': 'Float' }, { 'Name': 'avtargetaz', 'Type': 'Float' }, { 'Name': 'mnpanres', 'Type': 'Float' }, { 'Name': 'mxpanres', 'Type': 'Float' }, { 'Name': 'avpanres', 'Type': 'Float' }, { 'Name': 'mnmultires', 'Type': 'Float' }, { 'Name': 'mxmultires', 'Type': 'Float' }, { 'Name': 'avmultires', 'Type': 'Float' }, { 'Name': 'stereopair', 'Type': 'String' }, { 'Name': 'browseurl', 'Type': 'String' }, { 'Name': 'cloudcover', 'Type': 'Float' }, { 'Name': 'platform', 'Type': 'String' }, { 'Name': 'imagebands', 'Type': 'String' },
    // {'Name':'url','Type':'String'},    
    { 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }];

    var DG_products_L = [{ 'Name': 'scene_id', 'Type': 'String' }, { 'Name': 'part_id', 'Type': 'String' }, { 'Name': 'cat_id', 'Type': 'String' }, { 'Name': 'satellite', 'Type': 'String' }, { 'Name': 'cloudsp', 'Type': 'Float' }, { 'Name': 'view_angle', 'Type': 'Float' }, { 'Name': 'sun_elevat', 'Type': 'Float' }, { 'Name': 'img_start', 'Type': 'Date' }, { 'Name': 'volume_lab', 'Type': 'String' }, { 'Name': 'cust_order', 'Type': 'String' }, { 'Name': 'area_desc', 'Type': 'String' }, { 'Name': 'meta_ts', 'Type': 'String' }, { 'Name': 'url', 'Type': 'String' }, { 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }];

    var RAPIDEYE = [{ 'Name': 'scid', 'Type': 'String' }, { 'Name': 'sunaz', 'Type': 'Float' }, { 'Name': 'blkfill', 'Type': 'Float' }, { 'Name': 'catid', 'Type': 'Integer' }, { 'Name': 'area', 'Type': 'Float' }, { 'Name': 'cc', 'Type': 'Integer' }, { 'Name': 'acqtime', 'Type': 'Date' }, { 'Name': 'ullat', 'Type': 'Float' }, { 'Name': 'udp', 'Type': 'Integer' }, { 'Name': 'azang', 'Type': 'Float' }, { 'Name': 'tileid', 'Type': 'Float' }, { 'Name': 'sunel', 'Type': 'Float' }, { 'Name': 'ullon', 'Type': 'Float' }, { 'Name': 'imgurl', 'Type': 'String' }, { 'Name': 'vwangle', 'Type': 'Float' },
    // {'Name':'url','Type':'String'},
    { 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }];

    var KOMPSAT$1 = [{ 'Name': 'productid', 'Type': 'String' }, { 'Name': 'platfSNm', 'Type': 'String' }, { 'Name': 'platfSer', 'Type': 'String' }, { 'Name': 'orbit', 'Type': 'Integer' }, { 'Name': 'orbitDir', 'Type': 'Integer' }, { 'Name': 'frame', 'Type': 'Integer' }, { 'Name': 'track', 'Type': 'Integer' }, { 'Name': 'resTitle', 'Type': 'String' }, { 'Name': 'begin', 'Type': 'Date' }, { 'Name': 'end', 'Type': 'Date' }, { 'Name': 'cloudCovePerc', 'Type': 'Integer' }, { 'Name': 'bgFileName', 'Type': 'String' }, { 'Name': 'offNadirAngle', 'Type': 'Float' }, { 'Name': 'url', 'Type': 'String' }, { 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }];

    var EROS$1 = [{ 'Name': 'id', 'Type': 'Integer' }, { 'Name': 'row', 'Type': 'Integer' }, { 'Name': 'nbound', 'Type': 'Float' }, { 'Name': 'sbound', 'Type': 'Float' }, { 'Name': 'wbound', 'Type': 'Float' }, { 'Name': 'ebound', 'Type': 'Float' }, { 'Name': 'platform', 'Type': 'String' }, { 'Name': 'sceneid', 'Type': 'String' }, { 'Name': 'acdate', 'Type': 'Date' }, { 'Name': 'filename', 'Type': 'String' }, { 'Name': 'volume', 'Type': 'String' }, { 'Name': 'cld', 'Type': 'Integer' }, { 'Name': 'url', 'Type': 'String' }, { 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }];

    var GF_ZY = [{ 'Name': 'productid', 'Type': 'String' }, { 'Name': 'jh', 'Type': 'String' }, { 'Name': 'satellitei', 'Type': 'String' }, { 'Name': 'datatype', 'Type': 'String' }, { 'Name': 'sx', 'Type': 'Date' }, { 'Name': 'scenepath', 'Type': 'String' }, { 'Name': 'scenerow', 'Type': 'String' }, { 'Name': 'rasterfile', 'Type': 'String' }, { 'Name': 'pc', 'Type': 'String' }, { 'Name': 'cloudcover', 'Type': 'Integer' }, { 'Name': 'url', 'Type': 'String' }, { 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }];

    var LANDSAT_8 = [{ 'Name': 'browseavailable', 'Type': 'String' }, { 'Name': 'browseurl', 'Type': 'String' }, { 'Name': 'sceneid', 'Type': 'String' }, { 'Name': 'sensor', 'Type': 'String' }, { 'Name': 'acquisitiondate', 'Type': 'Date' }, { 'Name': 'dateupdated', 'Type': 'Date' }, { 'Name': 'path', 'Type': 'Integer' }, { 'Name': 'row', 'Type': 'Integer' }, { 'Name': 'upperleftcornerlatitude', 'Type': 'Float' }, { 'Name': 'upperleftcornerlongitude', 'Type': 'Float' }, { 'Name': 'upperrightcornerlatitude', 'Type': 'Float' }, { 'Name': 'upperrightcornerlongitude', 'Type': 'Float' }, { 'Name': 'lowerleftcornerlatitude', 'Type': 'Float' }, { 'Name': 'lowerleftcornerlongitude', 'Type': 'Float' }, { 'Name': 'lowerrightcornerlatitude', 'Type': 'Float' }, { 'Name': 'lowerrightcornerlongitude', 'Type': 'Float' }, { 'Name': 'scenecenterlatitude', 'Type': 'Float' }, { 'Name': 'scenecenterlongitude', 'Type': 'Float' }, { 'Name': 'cloudcover', 'Type': 'Integer' }, { 'Name': 'cloudcoverfull', 'Type': 'Float' }, { 'Name': 'dayornight', 'Type': 'String' }, { 'Name': 'sunelevation', 'Type': 'Float' }, { 'Name': 'sunazimuth', 'Type': 'Float' }, { 'Name': 'receivingstation', 'Type': 'String' }, { 'Name': 'scenestarttime', 'Type': 'String' }, { 'Name': 'scenestoptime', 'Type': 'String' }, { 'Name': 'imagequality1', 'Type': 'Integer' }, { 'Name': 'data_type_l1', 'Type': 'String' }, { 'Name': 'carturl', 'Type': 'String' }, { 'Name': 'geometric_rmse_model_x', 'Type': 'Integer' }, { 'Name': 'geometric_rmse_model_y', 'Type': 'Integer' }, { 'Name': 'full_partial_scene', 'Type': 'String' }, { 'Name': 'nadir_offnadir', 'Type': 'String' }, { 'Name': 'processing_software_version', 'Type': 'String' }, { 'Name': 'cpf_name', 'Type': 'String' }, { 'Name': 'rlut_file_name', 'Type': 'String' }, { 'Name': 'bpf_name_oli', 'Type': 'String' }, { 'Name': 'bpf_name_tirs', 'Type': 'String' }, { 'Name': 'id', 'Type': 'Integer' }, { 'Name': 'landsat_product_id', 'Type': 'String' },
    // {'Name':'url','Type':'String'},
    { 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }];

    var IKONOS = [{ 'Name': 'image_id', 'Type': 'String' }, { 'Name': 'order_id', 'Type': 'String' }, { 'Name': 'source_abr', 'Type': 'String' }, { 'Name': 'source', 'Type': 'String' }, { 'Name': 'sens_mode', 'Type': 'String' }, { 'Name': 'strip_id', 'Type': 'String' }, { 'Name': 'scene_id', 'Type': 'String' }, { 'Name': 'coll_date', 'Type': 'String' }, { 'Name': 'month', 'Type': 'Integer' }, { 'Name': 'year', 'Type': 'Integer' }, { 'Name': 'gsd', 'Type': 'Float' }, { 'Name': 'sqkm', 'Type': 'Integer' }, { 'Name': 'spatialref', 'Type': 'String' }, { 'Name': 'ranking', 'Type': 'Integer' }, { 'Name': 'elev_angle', 'Type': 'Float' }, { 'Name': 'azim_angle', 'Type': 'Float' }, { 'Name': 'clouds', 'Type': 'Integer' }, { 'Name': 'sun_elev', 'Type': 'Float' }, { 'Name': 'sun_angle', 'Type': 'Float' }, { 'Name': 'stereo_id', 'Type': 'String' }, { 'Name': 'data_owner', 'Type': 'String' }, { 'Name': 'ul_lat', 'Type': 'Float' }, { 'Name': 'ul_lon', 'Type': 'Float' }, { 'Name': 'ur_lat', 'Type': 'Float' }, { 'Name': 'ur_lon', 'Type': 'Float' }, { 'Name': 'll_lat', 'Type': 'Float' }, { 'Name': 'll_lon', 'Type': 'Float' }, { 'Name': 'lr_lat', 'Type': 'Float' }, { 'Name': 'lr_lon', 'Type': 'Float' }, { 'Name': 'georectify', 'Type': 'Integer' }, { 'Name': 'image_url', 'Type': 'String' }, { 'Name': 'world_url', 'Type': 'String' }, { 'Name': 'metadata', 'Type': 'String' }, { 'Name': 'product', 'Type': 'String' },
    // {'Name':'url','Type':'String'},
    { 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }];

    var WV1 = [{ 'Name': 'catalogid', 'Type': 'String' }, { 'Name': 'acqdate', 'Type': 'Date' }, { 'Name': 'mnoffnadir', 'Type': 'Integer' }, { 'Name': 'mxoffnadir', 'Type': 'Integer' }, { 'Name': 'avoffnadir', 'Type': 'Integer' }, { 'Name': 'mnsunazim', 'Type': 'Float' }, { 'Name': 'mxsunazim', 'Type': 'Float' }, { 'Name': 'avsunazim', 'Type': 'Float' }, { 'Name': 'mnsunelev', 'Type': 'Float' }, { 'Name': 'mxsunelev', 'Type': 'Float' }, { 'Name': 'avsunelev', 'Type': 'Float' }, { 'Name': 'mntargetaz', 'Type': 'Float' }, { 'Name': 'mxtargetaz', 'Type': 'Float' }, { 'Name': 'avtargetaz', 'Type': 'Float' }, { 'Name': 'mnpanres', 'Type': 'Integer' }, { 'Name': 'mxpanres', 'Type': 'Integer' }, { 'Name': 'avpanres', 'Type': 'Integer' }, { 'Name': 'mnmultires', 'Type': 'Integer' }, { 'Name': 'mxmultires', 'Type': 'Integer' }, { 'Name': 'avmultires', 'Type': 'Integer' }, { 'Name': 'stereopair', 'Type': 'String' }, { 'Name': 'browseurl', 'Type': 'String' }, { 'Name': 'cloudcover', 'Type': 'Integer' }, { 'Name': 'platform', 'Type': 'String' },
    // {'Name':'url','Type':'String'},    
    { 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }, { 'Name': 'imagebands', 'Type': 'String' }];

    var BKA = [{ 'Name': 'id', 'Type': 'String' }, { 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }, { 'Name': 'typeinformation', 'Type': 'String' }, { 'Name': 'lastupdatedate', 'Type': 'Date' }, { 'Name': 'satellite', 'Type': 'String' }, { 'Name': 'cyclenumber', 'Type': 'String' }, { 'Name': 'acquisitiontime', 'Type': 'Date' }, { 'Name': 'sensortype', 'Type': 'String' }, { 'Name': 'sensorresolution', 'Type': 'String' }, { 'Name': 'cloudcover', 'Type': 'Integer' }, { 'Name': 'viewingangle', 'Type': 'Float' }, { 'Name': 'sunelevation', 'Type': 'Float' }, { 'Name': 'sunazimuth', 'Type': 'Float' }];

    var SPOT5 = [{ 'Name': 'a21', 'Type': 'String' }, { 'Name': 'sc_num', 'Type': 'Integer' }, { 'Name': 'seg_num', 'Type': 'Integer' }, { 'Name': 'satel', 'Type': 'Integer' }, { 'Name': 'ang_inc', 'Type': 'Float' }, { 'Name': 'ang_acq', 'Type': 'Integer' }, { 'Name': 'date_acq', 'Type': 'String' }, { 'Name': 'month_acq', 'Type': 'String' }, { 'Name': 'cloud_quot', 'Type': 'String' }, { 'Name': 'cloud_per', 'Type': 'Integer' }, { 'Name': 'snow_quot', 'Type': 'String' }, { 'Name': 'lat_cen', 'Type': 'Float' }, { 'Name': 'lon_cen', 'Type': 'Float' }, { 'Name': 'lat_up_l', 'Type': 'Float' }, { 'Name': 'lon_up_l', 'Type': 'Float' }, { 'Name': 'lat_up_r', 'Type': 'Float' }, { 'Name': 'lon_up_r', 'Type': 'Float' }, { 'Name': 'lat_lo_l', 'Type': 'Float' }, { 'Name': 'lon_lo_l', 'Type': 'Float' }, { 'Name': 'lat_lo_r', 'Type': 'Float' }, { 'Name': 'lon_lo_r', 'Type': 'Float' }, { 'Name': 'resol', 'Type': 'Integer' }, { 'Name': 'mode', 'Type': 'String' }, { 'Name': 'type', 'Type': 'String' }, { 'Name': 'url_ql', 'Type': 'String' },
    // {'Name':'url','Type':'String'},
    { 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }];

    var Formats = {
        KOMPSAT: KOMPSAT$1,
        DG_products: DG_products,
        DG_products_L: DG_products_L,
        PLEIADES: PLEIADES,
        PLEIADES_L: PLEIADES_L,
        RAPIDEYE: RAPIDEYE,
        EROS: EROS$1,
        GF_ZY: GF_ZY,
        LANDSAT_8: LANDSAT_8,
        IKONOS: IKONOS,
        BKA: BKA,
        WV1: WV1,
        SPOT5: SPOT5,
        'SPOT-6_7': [{ 'Name': 'datastrip', 'Type': 'String' }, { 'Name': 'orb', 'Type': 'Float' }, { 'Name': 'satel', 'Type': 'String' }, { 'Name': 'dataq_star', 'Type': 'Date' }, { 'Name': 'dataq_end', 'Type': 'Date' }, { 'Name': 'sensor', 'Type': 'String' }, { 'Name': 'cloud_per', 'Type': 'Float' }, { 'Name': 'snow_per', 'Type': 'Float' }, { 'Name': 'incid_ang', 'Type': 'Float' }, { 'Name': 'sun_azimut', 'Type': 'Float' }, { 'Name': 'sun_elevat', 'Type': 'Float' }, { 'Name': 'orient_ang', 'Type': 'Float' }, { 'Name': 'across_ang', 'Type': 'Float' }, { 'Name': 'along_ang', 'Type': 'Float' }, { 'Name': 'combin_ang', 'Type': 'Float' }, { 'Name': 'roll_ang', 'Type': 'Float' }, { 'Name': 'pitch_ang', 'Type': 'Float' }, { 'Name': 'sc_nb', 'Type': 'Float' }, { 'Name': 'url_ql', 'Type': 'String' },
        // {'Name':'url','Type':'String'},
        { 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }],
        'SPOT-6_7_L': [{ 'Name': 'id', 'Type': 'Integer' }, { 'Name': 'row', 'Type': 'Integer' }, { 'Name': 'nbound', 'Type': 'Float' }, { 'Name': 'sbound', 'Type': 'Float' }, { 'Name': 'wbound', 'Type': 'Float' }, { 'Name': 'ebound', 'Type': 'Float' }, { 'Name': 'platform', 'Type': 'String' }, { 'Name': 'sceneid', 'Type': 'String' }, { 'Name': 'acdate', 'Type': 'String' }, { 'Name': 'filename', 'Type': 'String' }, { 'Name': 'volume', 'Type': 'String' }, { 'Name': 'cld', 'Type': 'Integer' }, { 'Name': 'url', 'Type': 'String' }, { 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }],
        ONE_ATLAS: [{ 'Name': 'num_points', 'Type': 'String' }, { 'Name': 'scene_id', 'Type': 'String' }, { 'Name': 'ds_id', 'Type': 'String' }, { 'Name': 'satellite', 'Type': 'String' }, { 'Name': 'sensor_mod', 'Type': 'String' }, { 'Name': 'cloudsp', 'Type': 'String' }, { 'Name': 'sun_azimut', 'Type': 'Float' }, { 'Name': 'sun_elevat', 'Type': 'Float' }, { 'Name': 'view_angle', 'Type': 'Float' }, { 'Name': 'azimuth', 'Type': 'Float' }, { 'Name': 'img_start', 'Type': 'Date' }, { 'Name': 'order_id', 'Type': 'String' }, { 'Name': 'pack_id', 'Type': 'String' }, { 'Name': 'qlurl', 'Type': 'String' }, { 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }, { 'Name': 'shp_ts', 'Type': 'Date' }],
        "SPOT-6_7_products": [{ 'Name': 'scene_id', 'Type': 'String' }, { 'Name': 'ds_id', 'Type': 'String' }, { 'Name': 'satellite', 'Type': 'String' }, { 'Name': 'sensor_mod', 'Type': 'String' }, { 'Name': 'cloudsp', 'Type': 'Integer' }, { 'Name': 'sun_azimut', 'Type': 'Float' }, { 'Name': 'sun_elevat', 'Type': 'Float' }, { 'Name': 'view_angle', 'Type': 'Float' }, { 'Name': 'img_start', 'Type': 'Date' }, { 'Name': 'order_id', 'Type': 'String' }, { 'Name': 'pack_id', 'Type': 'String' }, { 'Name': 'del_id', 'Type': 'String' }, { 'Name': 'com_id', 'Type': 'String' }, { 'Name': 'qlurl', 'Type': 'String' }, { 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }],
        TRIPLESAT: [{ 'Name': 'thumbimg', 'Type': 'String' }, { 'Name': 'id', 'Type': 'String' }, { 'Name': 'satellite', 'Type': 'String' }, { 'Name': 'cloudcover', 'Type': 'Float' }, { 'Name': 'rollangle', 'Type': 'Float' }, { 'Name': 'centertime', 'Type': 'Date' }, { 'Name': 'browserimg ', 'Type': 'String' }, { 'Name': 'transformimg ', 'Type': 'String' }, { 'Name': 'bottomrightlatitude', 'Type': 'Float' }, { 'Name': 'bottomrightlongitude', 'Type': 'Float' }, { 'Name': 'bottomleftlatitude', 'Type': 'Float' }, { 'Name': 'bottomleftlongitude', 'Type': 'Float' }, { 'Name': 'topleftlatitude', 'Type': 'Float' }, { 'Name': 'topleftlongitude', 'Type': 'Float' }, { 'Name': 'toprightlatitude', 'Type': 'Float' }, { 'Name': 'toprightlongitude', 'Type': 'Float' }, { 'Name': 'rsid ', 'Type': 'String' }],
        'Resurs-P': [{ 'Name': 'abstract', 'Type': 'String' }, { 'Name': 'access_open', 'Type': 'Boolean' }, { 'Name': 'access_order', 'Type': 'Boolean' }, { 'Name': 'circuit_number', 'Type': 'Integer' }, { 'Name': 'cloudiness', 'Type': 'Integer' }, { 'Name': 'date_begin', 'Type': 'Date' }, { 'Name': 'date_end', 'Type': 'Date' }, { 'Name': 'date_instant', 'Type': 'Date' }, { 'Name': 'file_identifier', 'Type': 'String' }, { 'Name': 'last_modified', 'Type': 'Date' }, { 'Name': 'metadata_full', 'Type': 'String' }, { 'Name': 'metadata_id', 'Type': 'Integer' }, { 'Name': 'metadata_xml', 'Type': 'String' }, { 'Name': 'order_url', 'Type': 'String' }, { 'Name': 'platform', 'Type': 'String' }, { 'Name': 'platform_id', 'Type': 'Integer' }, { 'Name': 'polygon', 'Type': 'String' }, { 'Name': 'resolution', 'Type': 'Float' }, { 'Name': 'row_count', 'Type': 'Integer' }, { 'Name': 'row_number', 'Type': 'Integer' }, { 'Name': 'scan_number', 'Type': 'Integer' }, { 'Name': 'url', 'Type': 'String' }, { 'Name': 'x1', 'Type': 'Float' }, { 'Name': 'x2', 'Type': 'Float' }, { 'Name': 'x3', 'Type': 'Float' }, { 'Name': 'x4', 'Type': 'Float' }, { 'Name': 'y1', 'Type': 'Float' }, { 'Name': 'y2', 'Type': 'Float' }, { 'Name': 'y3', 'Type': 'Float' }, { 'Name': 'y4', 'Type': 'Float' }],
        SV1: [{ 'Name': 'mirroroffnadir', 'Type': 'Float' }, { 'Name': 'productlevel', 'Type': 'String' }, { 'Name': 'cloudpercent', 'Type': 'Float' }, { 'Name': 'satelliteid', 'Type': 'String' }, { 'Name': 'bottomrightlatitude', 'Type': 'Float' }, { 'Name': 'orbitid', 'Type': 'Integer' }, { 'Name': 'stripid', 'Type': 'Integer' }, { 'Name': 'sceneid', 'Type': 'Integer' }, { 'Name': 'thumbfilelocation', 'Type': 'String' }, { 'Name': 'centerlongitude', 'Type': 'Float' }, { 'Name': 'toprightlongitude', 'Type': 'Float' }, { 'Name': 'centerlatitude', 'Type': 'Float' }, { 'Name': 'topleftlongitude', 'Type': 'Float' }, { 'Name': 'topleftlatitude', 'Type': 'Float' }, { 'Name': 'toprightlatitude', 'Type': 'Float' }, { 'Name': 'bottomleftlongitude', 'Type': 'Float' }, { 'Name': 'isrelease', 'Type': 'Boolean' }, { 'Name': 'bottomleftlatitude', 'Type': 'Float' }, { 'Name': 'instrumentmodedss', 'Type': 'Float' }, { 'Name': 'browsefilelocation', 'Type': 'String' }, { 'Name': 'scenedate', 'Type': 'Date' }, { 'Name': 'bottomrightlongitude', 'Type': 'Float' }]
    };

    var ShapeLoader = function () {
        function ShapeLoader(_ref) {
            var gmxResourceServer = _ref.gmxResourceServer,
                catalogResourceServer = _ref.catalogResourceServer,
                resultsController = _ref.resultsController,
                drawnObjects = _ref.drawnObjects,
                _ref$shapeLoaderUrl = _ref.shapeLoaderUrl,
                shapeLoaderUrl = _ref$shapeLoaderUrl === undefined ? '//maps.kosmosnimki.ru/ShapeLoader' : _ref$shapeLoaderUrl,
                _ref$metadataUrl = _ref.metadataUrl,
                metadataUrl = _ref$metadataUrl === undefined ? 'GetMetadata.ashx' : _ref$metadataUrl,
                _ref$fileMakerUrl = _ref.fileMakerUrl,
                fileMakerUrl = _ref$fileMakerUrl === undefined ? 'VectorFileMaker' : _ref$fileMakerUrl,
                _ref$fileDownloaderUr = _ref.fileDownloaderUrl,
                fileDownloaderUrl = _ref$fileDownloaderUr === undefined ? 'DownloadFile' : _ref$fileDownloaderUr,
                _ref$csvFileUrl = _ref.csvFileUrl,
                csvFileUrl = _ref$csvFileUrl === undefined ? 'CreateCsv.ashx' : _ref$csvFileUrl;
            classCallCheck(this, ShapeLoader);

            this._gmxResourceServer = gmxResourceServer;
            this._catalogResourceServer = catalogResourceServer;
            this._resultsController = resultsController;
            this._drawnObjects = drawnObjects;
            this._shapeLoaderUrl = shapeLoaderUrl;
            this._idLoaderUrl = location.href.substr(0, location.href.lastIndexOf('/')) + '/SearchByID.ashx';
            this._fileMakerUrl = fileMakerUrl;
            this._fileDownloaderUrl = fileDownloaderUrl;
            this._metadataUrl = metadataUrl;
            this._csvFileUrl = csvFileUrl;
            this._csvColumns = ['sceneid', 'stereo', 'platform', 'cloudness', 'tilt', 'acqdate'];
        }

        createClass(ShapeLoader, [{
            key: 'upload',
            value: function upload() {
                var _this = this;

                return new Promise(function (resolve, reject) {
                    var ff = document.createElement('input');
                    ff.setAttribute('type', 'file');
                    document.body.appendChild(ff);
                    ff.click();
                    ff.addEventListener('change', function (e) {
                        window.Catalog.loaderWidget.show();

                        var _ff$files = slicedToArray(ff.files, 1),
                            file = _ff$files[0];

                        if (file) {
                            var fd = new FormData();
                            fd.append('filename', file);
                            fd.append('WrapStyle', 'None');
                            fetch(_this._shapeLoaderUrl, {
                                method: 'POST',
                                body: fd
                            }).then(function (response) {
                                ff.remove();
                                return response.json();
                            }).then(function (response) {
                                window.Catalog.loaderWidget.hide();
                                switch (response.Status) {
                                    case 'ok':
                                        resolve({ type: 'shapefile', results: response.Result });
                                        break;
                                    default:
                                        fetch(_this._idLoaderUrl, { method: 'POST', body: fd }).then(function (res) {
                                            ff.remove();
                                            return res.json();
                                        }).then(function (res) {
                                            if (res.Status === 'ok') {
                                                resolve({ type: 'idlist', results: res.Result });
                                            } else {
                                                reject(res);
                                            }
                                        }).catch(function (e) {
                                            ff.remove();
                                            reject(e);
                                        });
                                        break;
                                }
                            }).catch(function (e) {
                                window.Catalog.loaderWidget.hide();
                                ff.remove();
                                reject(e);
                            });
                        }
                    });
                });
            }
        }, {
            key: 'download',
            value: function download(archiveName, type) {
                var _this2 = this;

                window.Catalog.loaderWidget.show();
                var get_meta_data = function get_meta_data(state) {
                    return new Promise(function (resolve) {
                        var ids = [];
                        var items = [];
                        var csv = function csv(item) {
                            return _this2._csvColumns.map(function (col) {
                                return col === 'acqdate' ? moment(item[col]).format('YYYY-MM-DD') : item[col];
                            });
                        };
                        switch (type) {
                            case 'results':
                                if (_this2._resultsController.downloadCache && _this2._resultsController.downloadCache.length > 0) {
                                    ids = _this2._resultsController.downloadCache.map(function (item) {
                                        return item.sceneid + ';' + item.platform + ';' + item.islocal;
                                    });
                                } else {
                                    ids = _this2._resultsController.results.map(function (item) {
                                        return item.sceneid + ';' + item.platform + ';' + item.islocal;
                                    });
                                }
                                break;
                            case 'rcsv':
                                if (_this2._resultsController.downloadCache && _this2._resultsController.downloadCache.length > 0) {
                                    items = _this2._resultsController.downloadCache.map(csv);
                                } else {
                                    items = _this2._resultsController.results.map(csv);
                                }
                                break;
                            case 'cart':
                            case 'quicklooks':
                                if (_this2._resultsController.downloadCache && _this2._resultsController.downloadCache.length > 0) {
                                    ids = _this2._resultsController.downloadCache.map(function (item) {
                                        return item.sceneid + ';' + item.platform + ';' + item.islocal;
                                    });
                                } else {
                                    ids = _this2._resultsController.favorites.map(function (item) {
                                        return item.sceneid + ';' + item.platform + ';' + item.islocal;
                                    });
                                }
                                break;
                            case 'ccsv':
                                if (_this2._resultsController.downloadCache && _this2._resultsController.downloadCache.length > 0) {
                                    items = _this2._resultsController.downloadCache.map(csv);
                                } else {
                                    items = _this2._resultsController.favorites.map(csv);
                                }
                                break;
                            default:
                                break;
                        }
                        if (type === 'rcsv' || type === 'ccsv') {
                            state.items = JSON.stringify(items);
                            resolve(state);
                        } else {
                            if (ids.length > 0) {
                                _this2._catalogResourceServer.sendPostRequest(_this2._metadataUrl, { ids: ids, WrapStyle: 'None' }).then(function (response) {
                                    if (response.Status === 'ok') {
                                        state.result = response.Result;
                                        resolve(state);
                                    } else {
                                        state.error = response;
                                        resolve(state);
                                    }
                                }).catch(function (e) {
                                    state.error = e;
                                    resolve(state);
                                });
                            } else {
                                resolve(state);
                            }
                        }
                    });
                };
                var make_file = function make_file(state) {
                    return new Promise(function (resolve) {
                        if (type === 'rcsv' || type === 'ccsv') {
                            resolve(state);
                        } else {
                            var Features = _this2._drawnObjects.items.filter(function (item) {
                                return item.visible;
                            }).map(function (_ref2) {
                                var id = _ref2.id,
                                    name = _ref2.name,
                                    area = _ref2.area,
                                    visible = _ref2.visible,
                                    editable = _ref2.editable,
                                    color = _ref2.color,
                                    geoJSON = _ref2.geoJSON;

                                return {
                                    type: 'Feature',
                                    geometry: geoJSON.geometry,
                                    properties: {
                                        id: id,
                                        // name: encodeURIComponent(name),
                                        name: name,
                                        area: area,
                                        visible: visible,
                                        editable: editable,
                                        color: color
                                    }
                                };
                            });
                            var Files = Features.length ? [{
                                Columns: [{ "Name": "id", "Type": "String" }, { "Name": "name", "Type": "String" }, { "Name": "area", "Type": "Float" }, { "Name": "editable", "Type": "Boolean" }, { "Name": "visible", "Type": "Boolean" }, { "Name": "color", "Type": "String" }],
                                Features: Features,
                                Filename: archiveName + '_contours',
                                Formats: ['shape', 'tab']
                            }] : [];
                            switch (type) {
                                case 'results':
                                case 'cart':
                                case 'quicklooks':
                                    var result = state.result;
                                    Files = Files.concat(Object.keys(result).map(function (file) {
                                        var Features = result[file].map(function (f) {
                                            var properties = copy(f);
                                            delete properties.geometry;
                                            return {
                                                type: 'Feature',
                                                geometry: copy(f.geometry),
                                                properties: properties
                                            };
                                        });
                                        return {
                                            Columns: Formats[file],
                                            Filename: archiveName + '_' + file,
                                            Features: Features,
                                            Formats: ['shape', 'tab']
                                        };
                                    }));
                                    break;
                                default:
                                    break;
                            }

                            _this2._gmxResourceServer.sendPostRequest(_this2._fileMakerUrl, { Request: JSON.stringify({ ArchiveName: archiveName, Files: Files, Images: type === 'quicklooks' }) }).then(function (response) {
                                if (response.Status === 'ok') {
                                    state.id = response.Result;
                                    resolve(state);
                                } else {
                                    resolve(state);
                                }
                            }).catch(function (e) {
                                state.error = e;
                                resolve(state);
                            });
                        }
                    });
                };
                var download_file = function download_file(state) {
                    window.Catalog.loaderWidget.hide();
                    return new Promise(function (resolve) {
                        if (type === 'rcsv' || type === 'ccsv') {
                            var items = state.items;

                            _this2._catalogResourceServer.sendPostRequest(_this2._csvFileUrl, { file: encodeURIComponent(archiveName), items: items, columns: _this2._csvColumns, WrapStyle: 'None' }).then(function (response) {
                                if (response.Status === 'ok') {
                                    state.result = response.Result;
                                    resolve(state);
                                } else {
                                    state.error = response;
                                    resolve(state);
                                }
                            }).catch(function (e) {
                                state.error = e;
                                resolve(state);
                            });
                        } else {
                            _this2._gmxResourceServer.sendPostRequest(_this2._fileDownloaderUrl + '?id=' + state.id).then(function (response) {
                                if (response.Status === 'ok') {
                                    state.id = response.Result;
                                    resolve(state);
                                } else {
                                    resolve(state);
                                }
                            }).catch(function (e) {
                                state.error = e;
                                resolve(state);
                            });
                        }
                    });
                };
                return chain$1([get_meta_data, make_file, download_file], {}).then(function (state) {
                    if (state.error) {
                        console.log(state.error);
                    }
                });
            }
        }]);
        return ShapeLoader;
    }();

    var GmxLayerDataProvider = function (_EventTarget) {
        inherits(GmxLayerDataProvider, _EventTarget);

        function GmxLayerDataProvider(_ref) {
            var gmxResourceServer = _ref.gmxResourceServer,
                map = _ref.map;
            classCallCheck(this, GmxLayerDataProvider);

            var _this = possibleConstructorReturn(this, (GmxLayerDataProvider.__proto__ || Object.getPrototypeOf(GmxLayerDataProvider)).call(this));

            _this.showSuggestion = false;
            _this.showOnMap = false;
            _this.showOnSelect = false;
            _this.showOnEnter = true;
            _this._rsGmx = gmxResourceServer;
            _this._map = map;
            return _this;
        }

        createClass(GmxLayerDataProvider, [{
            key: '_toGeoJSON',
            value: function _toGeoJSON(fields, values) {
                return fields.reduce(function (a, k, i) {
                    if (k === 'geomixergeojson') {
                        var geojson = L.gmxUtil.geometryToGeoJSON(values[i], true);
                        a.geometry = geojson;
                    } else {
                        a.properties = a.properties || {};
                        a.properties[k] = values[i];
                    }
                    return a;
                }, { type: 'Feature' });
            }
        }, {
            key: 'fetch',
            value: function fetch(value) {
                return new Promise(function (resolve) {
                    return resolve([]);
                });
            }
        }, {
            key: 'find',
            value: function find(value, limit, strong, retrieveGeometry) {
                var _this2 = this;

                var query = value.split(/[\s,]+/).map(function (x) {
                    return "(sceneid = '" + x + "')";
                }).join(' OR ');
                return new Promise(function (resolve, reject) {
                    var rq = {
                        layer: window.LAYER_ID,
                        geometry: true,
                        pagesize: 0,
                        query: query,
                        out_cs: 'EPSG:3857'
                    };
                    _this2._rsGmx.sendPostRequest('VectorLayer/Search.ashx', rq).then(function (response) {
                        if (response.Status == 'ok') {
                            var rs = response.Result.values.map(function (values) {
                                return {
                                    feature: _this2._toGeoJSON(response.Result.fields, values),
                                    provider: _this2,
                                    query: value
                                };
                            });
                            resolve(rs);

                            var event = document.createEvent('Event');
                            event.initEvent('fetch', false, false);
                            event.detail = response.Result;
                            _this2.dispatchEvent(event);
                        } else {
                            reject(response.Result);
                        }
                    }).catch(function (err) {
                        console.log(err);
                        reject(err);
                    });
                });
            }
        }]);
        return GmxLayerDataProvider;
    }(EventTarget);

    var LanguageWidget = function (_EventTarget) {
        inherits(LanguageWidget, _EventTarget);

        function LanguageWidget(container, _ref) {
            var _ref$languages = _ref.languages,
                languages = _ref$languages === undefined ? [] : _ref$languages;
            classCallCheck(this, LanguageWidget);

            var _this = possibleConstructorReturn(this, (LanguageWidget.__proto__ || Object.getPrototypeOf(LanguageWidget)).call(this));

            _this._container = container;
            _this._languages = languages;
            _this._container.classList.add('noselect');
            _this._container.classList.add('language-widget');
            _this._container.innerHTML = '<select>' + Object.keys(_this._languages).map(function (id) {
                return '<option value="' + id + '">' + _this._languages[id] + '</option>';
            }).join('') + '</select>';
            _this._stopPropagation = _this._stopPropagation.bind(_this);
            _this._langSelect = _this._container.querySelector('select');
            _this._langSelect.addEventListener('change', function (e) {
                var event = document.createEvent('Event');
                event.initEvent('change', false, false);
                event.detail = _this._langSelect.value;
                _this.dispatchEvent(event);
            });
            _this._container.addEventListener('click', _this._stopPropagation);
            return _this;
        }

        createClass(LanguageWidget, [{
            key: '_stopPropagation',
            value: function _stopPropagation(e) {
                e.stopPropagation();
            }
        }, {
            key: 'currentLanguage',
            set: function set$$1(value) {
                this._langSelect.value = value;
            },
            get: function get$$1() {
                return this._langSelect.value;
            }
        }]);
        return LanguageWidget;
    }(EventTarget);

    var T$d = Translations$1;

    T$d.addText('rus', {
        about: {
            version: 'Версия',
            news: 'Что нового',
            help: 'Инструкция пользователя'
        }

    });

    T$d.addText('eng', {
        about: {
            version: 'Version',
            news: "What's new",
            help: "User's guide"
        }

    });

    var About = function (_FloatingPanel) {
        inherits(About, _FloatingPanel);

        function About(container, _ref) {
            var text = _ref.text;
            classCallCheck(this, About);

            var _get_window_center = get_window_center(),
                left = _get_window_center.left,
                top = _get_window_center.top;

            var _this = possibleConstructorReturn(this, (About.__proto__ || Object.getPrototypeOf(About)).call(this, container, { id: 'about.dialog', left: left, top: top, modal: true }));

            _this._text = text;
            _this._container.classList.add('about-dialog');
            _this._content.innerHTML = '<div class="logo-symbol-about"></div>        \n        <div class="about-version">\n            <div></div>\n            <div>' + T$d.getText('about.version') + ' ' + window.Catalog.VERSION + '</div>\n            <div></div>\n        </div>\n        <div class="about-date">' + moment(window.Catalog.VERSION_DATE).format('L') + '</div>\n        <div class="about-news">\n            <div>' + T$d.getText('about.news') + '</div>\n            <div><ul>' + _this._text.split(/\r?\n/g).map(function (x) {
                return '<li>' + x + '</li>';
            }).join('') + '</ul></div>\n        </div>\n        <div class="about-link">' + T$d.getText('about.help') + '</div>';
            _this._container.querySelector('.about-link').addEventListener('click', function (e) {
                window.open('https://scanex.github.io/Documentation/Catalog/index.html', '_blank');
                _this.hide();
            });
            return _this;
        }

        return About;
    }(FloatingPanel);

    var ResultView = function (_EventTarget) {
        inherits(ResultView, _EventTarget);

        function ResultView(_ref) {
            var input = _ref.input,
                _ref$replaceInput = _ref.replaceInput,
                replaceInput = _ref$replaceInput === undefined ? false : _ref$replaceInput;
            classCallCheck(this, ResultView);

            var _this = possibleConstructorReturn(this, (ResultView.__proto__ || Object.getPrototypeOf(ResultView)).call(this));

            _this._input = input;
            _this.index = -1;
            _this.count = 0;
            _this._item = null;
            _this._inputText = '';
            _this._replaceInput = replaceInput;
            _this._list = L.DomUtil.create('div');
            _this._list.setAttribute('class', 'leaflet-ext-search-list noselect');

            _this.allowNavigation = true;

            _this._list.style.top = _this._input.offsetTop + _this._input.offsetHeight + 2 + 'px';
            _this._list.style.left = _this._input.offsetLeft + 'px';

            _this._handleKey = _this._handleKey.bind(_this);
            _this._input.addEventListener('keydown', _this._handleKey);

            _this._handleInputClick = _this._handleInputClick.bind(_this);
            _this._input.addEventListener('click', _this._handleInputClick);

            _this._handleFocus = _this._handleFocus.bind(_this);
            _this._input.addEventListener('focus', _this._handleFocus);
            _this._list.addEventListener('keydown', _this._handleKey);

            _this._handleWheel = _this._handleWheel.bind(_this);
            _this._list.addEventListener('wheel', _this._handleWheel);
            L.DomEvent.disableClickPropagation(_this._list).disableScrollPropagation(_this._list);
            // this._list.addEventListener('mousewheel', this._handleWheel.bind(this));
            // this._list.addEventListener('MozMousePixelScroll', this._handleWheel.bind(this));       
            _this._input.parentElement.appendChild(_this._list);

            _this._handleChange = _this._handleChange.bind(_this);
            _this._input.addEventListener('input', _this._handleChange);
            return _this;
        }

        createClass(ResultView, [{
            key: '_handleInputClick',
            value: function _handleInputClick(e) {
                e.stopPropagation();
            }
        }, {
            key: '_handleFocus',
            value: function _handleFocus(e) {
                if (this.index >= 0) {
                    var el = this._list.querySelector('[tabindex="' + this.index + '"]');
                    L.DomUtil.removeClass(el, 'leaflet-ext-search-list-selected');
                }
                this.index = -1;
                this._item = null;
            }
        }, {
            key: '_handleChange',
            value: function _handleChange(e) {
                this._inputText = this._input.value;
            }
        }, {
            key: '_handleWheel',
            value: function _handleWheel(e) {
                e.stopPropagation();
            }
        }, {
            key: '_handleKey',
            value: function _handleKey(e) {
                if (this.listVisible()) {
                    switch (e.keyCode) {
                        // ArroLeft / ArrowRight
                        case 37:
                        case 39:
                            e.stopPropagation();
                            break;
                        // ArrowDown
                        case 40:
                            e.preventDefault();
                            e.stopPropagation();
                            if (this.allowNavigation) {
                                if (this.index < 0) {
                                    this.index = 0;
                                } else if (0 <= this.index && this.index < this.count - 1) {
                                    var _el = this._list.querySelector('[tabindex="' + this.index + '"]');
                                    L.DomUtil.removeClass(_el, 'leaflet-ext-search-list-selected');
                                    ++this.index;
                                } else {
                                    var _el2 = this._list.querySelector('[tabindex="' + this.index + '"]');
                                    L.DomUtil.removeClass(_el2, 'leaflet-ext-search-list-selected');
                                    this.index = this.count - 1;
                                }
                                var el = this._list.querySelector('[tabindex="' + this.index + '"]');
                                L.DomUtil.addClass(el, 'leaflet-ext-search-list-selected');
                                this.selectItem(this.index);
                                el.focus();
                            }
                            break;
                        // ArrowUp
                        case 38:
                            e.preventDefault();
                            e.stopPropagation();
                            if (this.allowNavigation) {
                                if (this.index > 0) {
                                    var _el3 = this._list.querySelector('[tabindex="' + this.index + '"]');
                                    L.DomUtil.removeClass(_el3, 'leaflet-ext-search-list-selected');
                                    --this.index;
                                    _el3 = this._list.querySelector('[tabindex="' + this.index + '"]');
                                    L.DomUtil.addClass(_el3, 'leaflet-ext-search-list-selected');
                                    this.selectItem(this.index);
                                    _el3.focus();
                                } else if (this.index === 0) {
                                    this._input.focus();
                                    this._input.value = this._inputText;
                                }
                            }
                            break;
                        // Enter
                        case 13:
                            if (this.index < 0 && this._input.value) {
                                var text = this._input.value;
                                this._input.focus();
                                this._input.setSelectionRange(text.length, text.length);
                                this.hide();

                                var event = document.createEvent('Event');
                                event.initEvent('suggestions:confirm', false, false);
                                event.detail = text;
                                this.dispatchEvent(event);
                            } else {
                                this.complete(this.index);
                            }
                            break;
                        // Escape
                        case 27:
                            if (this.index < 0) {
                                this.hide();
                            }
                            this._input.focus();
                            this._input.value = this._inputText;
                            break;
                        default:
                            break;
                    }
                } else {
                    if (e.keyCode === 13 && this._input.value) {
                        var _text = this._input.value;
                        this._input.setSelectionRange(_text.length, _text.length);

                        var _event = document.createEvent('Event');
                        _event.initEvent('suggestions:confirm', false, false);
                        _event.detail = _text;
                        this.dispatchEvent(_event);
                    } else if (e.keyCode === 27) {
                        this._input.value = '';
                        this.index = -1;
                        this._input.focus();
                    }
                }
            }
        }, {
            key: 'listVisible',
            value: function listVisible() {
                return this.count > 0 && this._list.style.display !== 'none';
            }
        }, {
            key: 'selectItem',
            value: function selectItem(i) {
                this._item = this._items[i];
                var text = this._item.name;
                if (this._replaceInput) {
                    this._input.value = text;
                    this._input.setSelectionRange(text.length, text.length);
                }
            }
        }, {
            key: '_handleClick',
            value: function _handleClick(i, e) {
                e.preventDefault();
                this.complete(i);
            }
        }, {
            key: 'complete',
            value: function complete(i) {
                var item = i >= 0 ? this._items[i] : this._item ? this._item : null;
                if (item) {
                    this._item = item;
                    this.index = -1;
                    var text = item.name;
                    if (this._replaceInput) {
                        this._input.value = text;
                        this._input.setSelectionRange(text.length, text.length);
                    }
                    this._input.focus();
                    this.hide();

                    var event = document.createEvent('Event');
                    event.initEvent('suggestions:select', false, false);
                    event.detail = item;
                    this.dispatchEvent(event);
                }
            }
        }, {
            key: 'show',
            value: function show(items, highlight) {
                if (items.length) {
                    this._item = null;
                    this.index = -1;
                    this._items = items;
                    var html = '<ul>' + this._items.filter(function (x) {
                        return x.name && x.name.length;
                    }).map(function (x, i) {
                        var name = '<span class="leaflet-ext-search-list-item-normal">' + x.name + '</span>';
                        if (highlight && highlight.length) {
                            var start = x.name.toLowerCase().indexOf(highlight.toLowerCase());
                            if (start != -1) {
                                var head = x.name.substr(0, start);
                                if (head.length) {
                                    head = '<span class="leaflet-ext-search-list-item-normal">' + head + '</span>';
                                }
                                var tail = x.name.substr(start + highlight.length);
                                if (tail.length) {
                                    tail = '<span class="leaflet-ext-search-list-item-normal">' + tail + '</span>';
                                }
                                name = head + '<span class="leaflet-ext-search-list-item-highlight">' + highlight + '</span>' + tail;
                            }
                        }
                        return '<li tabindex=' + i + '>' + name + '</li>';
                    }, []).join('') + '</ul>';

                    this._list.innerHTML = html;
                    var elements = this._list.querySelectorAll('li');
                    for (var i = 0; i < elements.length; ++i) {
                        elements[i].addEventListener('click', this._handleClick.bind(this, i));
                    }

                    this.count = elements.length;
                    this._list.style.display = 'block';
                }
            }
        }, {
            key: 'hide',
            value: function hide() {
                this._list.style.display = 'none';
            }
        }]);
        return ResultView;
    }(EventTarget);

    var chain$2 = function chain(tasks, state) {
        return tasks.reduce(function (prev, next) {
            return prev.then(next);
        }, new Promise(function (resolve, reject) {
            return resolve(state);
        }));
    };

    var SearchWidget = function (_EventTarget) {
        inherits(SearchWidget, _EventTarget);

        function SearchWidget(container, _ref) {
            var placeHolder = _ref.placeHolder,
                providers = _ref.providers,
                _ref$suggestionTimeou = _ref.suggestionTimeout,
                suggestionTimeout = _ref$suggestionTimeou === undefined ? 1000 : _ref$suggestionTimeou,
                _ref$suggestionLimit = _ref.suggestionLimit,
                suggestionLimit = _ref$suggestionLimit === undefined ? 10 : _ref$suggestionLimit,
                _ref$fuzzySearchLimit = _ref.fuzzySearchLimit,
                fuzzySearchLimit = _ref$fuzzySearchLimit === undefined ? 1000 : _ref$fuzzySearchLimit,
                _ref$retrieveManyOnEn = _ref.retrieveManyOnEnter,
                retrieveManyOnEnter = _ref$retrieveManyOnEn === undefined ? false : _ref$retrieveManyOnEn,
                _ref$replaceInputOnEn = _ref.replaceInputOnEnter,
                replaceInputOnEnter = _ref$replaceInputOnEn === undefined ? false : _ref$replaceInputOnEn;
            classCallCheck(this, SearchWidget);

            var _this = possibleConstructorReturn(this, (SearchWidget.__proto__ || Object.getPrototypeOf(SearchWidget)).call(this));

            _this._container = container;
            _this._allowSuggestion = true;
            _this._providers = providers;
            _this._suggestionTimeout = suggestionTimeout;
            _this._suggestionLimit = suggestionLimit;
            _this._fuzzySearchLimit = fuzzySearchLimit;
            _this._retrieveManyOnEnter = retrieveManyOnEnter;
            _this._replaceInputOnEnter = replaceInputOnEnter;

            _this._container.classList.add('leaflet-ext-search');
            _this._container.innerHTML = '<input type="text" value="" placeholder="' + placeHolder + '" /><span class="leaflet-ext-search-button"></span>';
            _this._input = _this._container.querySelector('input');

            _this._handleChange = _this._handleChange.bind(_this);
            _this._input.addEventListener('input', _this._handleChange);

            _this._handleMouseMove = _this._handleMouseMove.bind(_this);
            _this._input.addEventListener('mousemove', _this._handleMouseMove);
            _this._input.addEventListener('dragstart', _this._handleMouseMove);
            _this._input.addEventListener('drag', _this._handleMouseMove);

            _this._handleSearch = _this._handleSearch.bind(_this);

            _this._button = _this._container.querySelector('.leaflet-ext-search-button');
            _this._button.addEventListener('click', _this._handleSearch);

            _this.results = new ResultView({ input: _this._input, replaceInput: _this._replaceInputOnEnter });

            _this._search = _this._search.bind(_this);
            _this._selectItem = _this._selectItem.bind(_this);

            _this.results.addEventListener('suggestions:confirm', function (e) {
                var event = document.createEvent('Event');
                event.initEvent('suggestions:confirm', false, false);
                event.detail = e.detail;
                _this.dispatchEvent(event);
                _this._search(e);
            });
            _this.results.addEventListener('suggestions:select', _this._selectItem);

            // map.on ('click', this.results.hide.bind(this.results));
            // map.on ('dragstart', this.results.hide.bind(this.results));
            return _this;
        }

        createClass(SearchWidget, [{
            key: '_suggest',
            value: function _suggest(text) {
                var _this2 = this;

                this.results.allowNavigation = false;
                var tasks = this._providers.filter(function (provider) {
                    return provider.showSuggestion;
                }).map(function (provider) {
                    return function (state) {
                        return new Promise(function (resolve) {
                            if (state.completed) {
                                resolve(state);
                            } else {
                                provider.find(text, _this2._suggestionLimit, false, false).then(function (response) {
                                    state.completed = response.length > 0;
                                    state.response = state.response.concat(response);
                                    resolve(state);
                                }).catch(function (e) {
                                    return console.log(e);
                                });
                            }
                        });
                    };
                });
                chain$2(tasks, { completed: false, response: [] }).then(function (state) {
                    _this2.results.show(state.response, text.trim());
                    _this2.results.allowNavigation = true;
                });
            }
        }, {
            key: '_handleChange',
            value: function _handleChange(e) {
                var _this3 = this;

                if (this._input.value.length) {
                    if (this._allowSuggestion) {
                        this._allowSuggestion = false;
                        this._timer = setTimeout(function () {
                            clearTimeout(_this3._timer);
                            _this3._allowSuggestion = true;
                            var text = _this3._input.value;
                            _this3._suggest(text);
                        }, this._suggestionTimeout);
                    }
                } else {
                    this.results.hide();
                }
            }
        }, {
            key: '_handleMouseMove',
            value: function _handleMouseMove(e) {
                e.stopPropagation();
                e.preventDefault();
            }
        }, {
            key: '_search',
            value: function _search(e) {
                var _this4 = this;

                var text = e.detail;
                var tasks = this._providers.filter(function (provider) {
                    return provider.showOnEnter;
                }).map(function (provider) {
                    return function (state) {
                        return new Promise(function (resolve) {
                            if (state.completed) {
                                resolve(state);
                            } else {
                                provider.find(text, _this4._retrieveManyOnEnter ? _this4._fuzzySearchLimit : 1, true, true).then(function (response) {
                                    state.completed = response.length > 0;
                                    state.response = state.response.concat(response);
                                    resolve(state);
                                }).catch(function (e) {
                                    console.log(e);
                                    resolve(state);
                                });
                            }
                        });
                    };
                });

                chain$2(tasks, { completed: false, response: [] }).then(function (state) {
                    // if(state.response.length > 0 && !this._retrieveManyOnEnter){
                    //     let item = state.response[0];
                    //     item.provider
                    //     .fetch(item.properties)
                    //     .then(response => {});                    
                    // }
                });

                this.results && this.results.hide();
            }
        }, {
            key: '_selectItem',
            value: function _selectItem(e) {
                var item = e.detail;
                return item.provider.fetch(item.properties);
            }
        }, {
            key: '_handleSearch',
            value: function _handleSearch(e) {
                e.stopPropagation();
                this._search({ detail: this._input.value });
            }
        }, {
            key: 'setText',
            value: function setText(text) {
                this._input.value = text;
            }
        }, {
            key: 'setPlaceHolder',
            value: function setPlaceHolder(value) {
                this._input.placeholder = value;
            }
        }]);
        return SearchWidget;
    }(EventTarget);

    var SearchControl = L.Control.extend({
        includes: L.Evented ? L.Evented.prototype : L.Mixin.Events,
        initialize: function initialize(options) {
            L.setOptions(this, options);
            this._allowSuggestion = true;
            this.options.suggestionTimeout = this.options.suggestionTimeout || 1000;
            this.options.suggestionLimit = this.options.suggestionLimit || 10;
        },
        onAdd: function onAdd(map) {
            this._container = L.DomUtil.create('div', 'leaflet-ext-search');
            this._widget = new SearchWidget(this._container, this.options);
            map.on('click', this._widget.results.hide.bind(this._widget.results));
            map.on('dragstart', this._widget.results.hide.bind(this._widget.results));
            return this._container;
        },
        addTo: function addTo(map) {
            L.Control.prototype.addTo.call(this, map);
            if (this.options.addBefore) {
                this.addBefore(this.options.addBefore);
            }
            return this;
        },

        addBefore: function addBefore(id) {
            var parentNode = this._parent && this._parent._container;
            if (!parentNode) {
                parentNode = this._map && this._map._controlCorners[this.getPosition()];
            }
            if (!parentNode) {
                this.options.addBefore = id;
            } else {
                for (var i = 0, len = parentNode.childNodes.length; i < len; i++) {
                    var it = parentNode.childNodes[i];
                    if (id === it._id) {
                        parentNode.insertBefore(this._container, it);
                        break;
                    }
                }
            }
            return this;
        },

        setText: function setText(text) {
            this._widget.setText(text);
        },
        setPlaceHolder: function setPlaceHolder(value) {
            this._widget.setPlaceHolder(value);
        }
    });

    var OsmDataProvider = function (_EventTarget) {
        inherits(OsmDataProvider, _EventTarget);

        function OsmDataProvider(_ref) {
            var serverBase = _ref.serverBase;
            classCallCheck(this, OsmDataProvider);

            var _this = possibleConstructorReturn(this, (OsmDataProvider.__proto__ || Object.getPrototypeOf(OsmDataProvider)).call(this));

            _this._serverBase = serverBase;
            _this.showSuggestion = true;
            _this.showOnSelect = true;
            _this.showOnEnter = true;
            _this.find = _this.find.bind(_this);
            _this.fetch = _this.fetch.bind(_this);
            _this._convertGeometry = _this._convertGeometry.bind(_this);

            _this._key = window.KOSMOSNIMKI_SESSION_KEY == null || window.KOSMOSNIMKI_SESSION_KEY == 'INVALID' ? '' : '&key=' + window.KOSMOSNIMKI_SESSION_KEY;
            return _this;
        }

        createClass(OsmDataProvider, [{
            key: '_convertGeometry',
            value: function _convertGeometry(geometry) {
                switch (geometry.type.toUpperCase()) {
                    case 'POINT':
                        geometry.type = 'Point';
                        break;
                    case 'POLYGON':
                        geometry.type = 'Polygon';
                        break;
                    case 'MULTIPOLYGON':
                        geometry.type = 'MultiPolygon';
                        break;
                    case 'LINESTRING':
                    case 'POLYLINE':
                        geometry.type = 'LineString';
                        break;
                    case 'MULTILINESTRING':
                        geometry.type = 'MultiLineString';
                        break;
                    default:
                        throw 'Unknown WKT type';
                }
                return geometry;
            }
        }, {
            key: 'fetch',
            value: function (_fetch) {
                function fetch(_x) {
                    return _fetch.apply(this, arguments);
                }

                fetch.toString = function () {
                    return _fetch.toString();
                };

                return fetch;
            }(function (obj) {
                var _this2 = this;

                var query = 'WrapStyle=None&RequestType=ID&ID=' + obj.ObjCode + '&TypeCode=' + obj.TypeCode + '&UseOSM=1';
                var req = new Request(this._serverBase + '/SearchObject/SearchAddress.ashx?' + query + this._key);
                var headers = new Headers();
                headers.append('Content-Type', 'application/json');
                var init = {
                    method: 'GET',
                    mode: 'cors',
                    credentials: 'include',
                    cache: 'default'
                };
                return new Promise(function (resolve, reject) {
                    fetch(req, init).then(function (response) {
                        return response.json();
                    }).then(function (json) {
                        if (json.Status === 'ok') {
                            var rs = json.Result.reduce(function (a, x) {
                                return a.concat(x.SearchResult);
                            }, []).map(function (x) {
                                var g = _this2._convertGeometry(x.Geometry);
                                var props = Object.keys(x).filter(function (k) {
                                    return k !== 'Geometry';
                                }).reduce(function (a, k) {
                                    a[k] = x[k];
                                    return a;
                                }, {});
                                return {
                                    feature: {
                                        type: 'Feature',
                                        geometry: g,
                                        properties: props
                                    },
                                    provider: _this2,
                                    query: obj
                                };
                            });
                            var event = document.createEvent('Event');
                            event.initEvent('fetch', false, false);
                            event.detail = rs;
                            _this2.dispatchEvent(event);
                            resolve(rs);
                        } else {
                            reject(json);
                        }
                    }).catch(function (response) {
                        return reject(response);
                    });
                });
            })
        }, {
            key: 'find',
            value: function find(value, limit, strong, retrieveGeometry) {
                var _this3 = this;

                return new Promise(function (resolve, reject) {
                    if (value || value.trim()) {
                        var _strong = Boolean(strong) ? 1 : 0;
                        var _withoutGeometry = Boolean(retrieveGeometry) ? 0 : 1;
                        var query = 'WrapStyle=None&RequestType=SearchObject&IsStrongSearch=' + _strong + '&WithoutGeometry=' + _withoutGeometry + '&UseOSM=1&Limit=' + limit + '&SearchString=' + encodeURIComponent(value);
                        var req = new Request(_this3._serverBase + '/SearchObject/SearchAddress.ashx?' + query + _this3._key);
                        var headers = new Headers();
                        headers.append('Content-Type', 'application/json');
                        var init = {
                            method: 'GET',
                            mode: 'cors',
                            credentials: 'include',
                            cache: 'default'
                        };
                        fetch(req, init).then(function (response) {
                            return response.json();
                        }).then(function (json) {
                            if (json.Status === 'ok') {
                                var rs = json.Result.reduce(function (a, x) {
                                    return a.concat(x.SearchResult);
                                }, []).map(function (x) {
                                    if (retrieveGeometry && x.Geometry) {
                                        var g = _this3._convertGeometry(x.Geometry);
                                        var props = Object.keys(x).filter(function (k) {
                                            return k !== 'Geometry';
                                        }).reduce(function (a, k) {
                                            a[k] = x[k];
                                            return a;
                                        }, {});
                                        return {
                                            name: x.ObjNameShort,
                                            feature: {
                                                type: 'Feature',
                                                geometry: g,
                                                properties: props
                                            },
                                            properties: props,
                                            provider: _this3,
                                            query: value
                                        };
                                    } else {
                                        return {
                                            name: x.ObjNameShort,
                                            properties: x,
                                            provider: _this3,
                                            query: value
                                        };
                                    }
                                });
                                if (strong && retrieveGeometry) {
                                    var event = document.createEvent('Event');
                                    event.initEvent('fetch', false, false);
                                    event.detail = rs;
                                    _this3.dispatchEvent(event);
                                }
                                resolve(rs);
                            } else {
                                reject(json);
                            }
                        }).catch(function (response) {
                            return reject(response);
                        });
                    } else {
                        reject('Empty string');
                    }
                });
            }
        }]);
        return OsmDataProvider;
    }(EventTarget);

    var CoordinatesDataProvider = function (_EventTarget) {
        inherits(CoordinatesDataProvider, _EventTarget);

        function CoordinatesDataProvider() {
            classCallCheck(this, CoordinatesDataProvider);

            var _this = possibleConstructorReturn(this, (CoordinatesDataProvider.__proto__ || Object.getPrototypeOf(CoordinatesDataProvider)).call(this));

            _this.showSuggestion = false;
            _this.showOnSelect = false;
            _this.showOnEnter = true;
            _this.fetch = _this.fetch.bind(_this);
            _this.find = _this.find.bind(_this);

            _this.rxF = new RegExp('^\\s*\\-?(\\d+(\\.\\d+)?)(\\s+[N|S])?(,\\s*|\\s+)\\-?(\\d+(\\.\\d+)?)(\\s+[E|W])?');
            _this.rxD = new RegExp('^\\s*(\\d{1,2})[\\s|\\u00b0](\\d{1,2})[\\s|\\u0027](\\d{1,2}\\.\\d+)\\u0022?(\\s+[N|S])?,?\\s+(\\d{1,2})[\\s|\\u00b0](\\d{1,2})[\\s|\\u0027](\\d{1,2}\\.\\d+)\\u0022?(\\s+[E|W])?');
            return _this;
        }

        createClass(CoordinatesDataProvider, [{
            key: '_parseCoordinates',
            value: function _parseCoordinates(value) {
                var m = this.rxD.exec(value);
                if (Array.isArray(m) && m.length === 9) {
                    return this._parseDegrees([m[1], m[2], m[3], m[5], m[6], m[7]].map(function (x) {
                        return parseFloat(x);
                    }));
                }
                m = this.rxF.exec(value);
                if (Array.isArray(m) && m.length === 8) {
                    return { type: 'Point', coordinates: [parseFloat(m[5]), parseFloat(m[1])] };
                }

                return null;
            }
        }, {
            key: '_parseDegrees',
            value: function _parseDegrees(_ref) {
                var _ref2 = slicedToArray(_ref, 6),
                    latDeg = _ref2[0],
                    latMin = _ref2[1],
                    latSec = _ref2[2],
                    lngDeg = _ref2[3],
                    lngMin = _ref2[4],
                    lngSec = _ref2[5];

                return { type: 'Point', coordinates: [lngDeg + lngMin / 60 + lngSec / 3600, latDeg + latMin / 60 + latSec / 3600] };
            }
        }, {
            key: 'fetch',
            value: function fetch(value) {
                return new Promise(function (resolve) {
                    return resolve([]);
                });
            }
        }, {
            key: 'find',
            value: function find(value, limit, strong, retrieveGeometry) {
                var _this2 = this;

                var g = this._parseCoordinates(value);
                return new Promise(function (resolve) {
                    var result = { feature: { type: 'Feature', geometry: g, properties: {} }, provider: _this2, query: value };
                    if (g) {
                        var event = document.createEvent('Event');
                        event.initEvent('fetch', false, false);
                        event.detail = result;
                        _this2.dispatchEvent(event);
                    }
                    resolve(g ? [result] : []);
                });
            }
        }]);
        return CoordinatesDataProvider;
    }(EventTarget);

    var CadastreDataProvider = function (_EventTarget) {
        inherits(CadastreDataProvider, _EventTarget);

        function CadastreDataProvider(_ref) {
            var serverBase = _ref.serverBase,
                tolerance = _ref.tolerance;
            classCallCheck(this, CadastreDataProvider);

            var _this = possibleConstructorReturn(this, (CadastreDataProvider.__proto__ || Object.getPrototypeOf(CadastreDataProvider)).call(this));

            _this._serverBase = serverBase;
            _this._tolerance = tolerance;
            _this.showSuggestion = true;
            _this.showOnSelect = false;
            _this.showOnEnter = true;
            _this._cadastreLayers = [{ id: 1, title: 'Участок', reg: /^\d\d:\d+:\d+:\d+$/ }, { id: 2, title: 'Квартал', reg: /^\d\d:\d+:\d+$/ }, { id: 3, title: 'Район', reg: /^\d\d:\d+$/ }, { id: 4, title: 'Округ', reg: /^\d\d$/ }, { id: 5, title: 'ОКС', reg: /^\d\d:\d+:\d+:\d+:\d+$/ }, { id: 10, title: 'ЗОУИТ', reg: /^\d+\.\d+\.\d+/
                // ,
                // {id: 7, title: 'Границы', 	reg: /^\w+$/},
                // {id: 6, title: 'Тер.зоны', 	reg: /^\w+$/},
                // {id: 12, title: 'Лес', 		reg: /^\w+$/},
                // {id: 13, title: 'Красные линии', 		reg: /^\w+$/},
                // {id: 15, title: 'СРЗУ', 	reg: /^\w+$/},
                // {id: 16, title: 'ОЭЗ', 		reg: /^\w+$/},
                // {id: 9, title: 'ГОК', 		reg: /^\w+$/},
                // {id: 10, title: 'ЗОУИТ', 	reg: /^\w+$/}
                // /[^\d\:]/g,
                // /\d\d:\d+$/,
                // /\d\d:\d+:\d+$/,
                // /\d\d:\d+:\d+:\d+$/
            }];
            return _this;
        }

        createClass(CadastreDataProvider, [{
            key: 'getCadastreLayer',
            value: function getCadastreLayer(str, type) {
                str = str.trim();
                for (var i = 0, len = this._cadastreLayers.length; i < len; i++) {
                    var it = this._cadastreLayers[i];
                    if (it.id === type) {
                        return it;
                    }
                    if (it.reg.exec(str)) {
                        return it;
                    }
                }
                return this._cadastreLayers[0];
            }
        }, {
            key: 'find',
            value: function find(value, limit, strong, retrieveGeometry) {
                var _this2 = this;

                var cadastreLayer = this.getCadastreLayer(value);
                return new Promise(function (resolve) {
                    // let req = new Request(`${this._serverBase}/typeahead?limit=${limit}&skip=0&text=${value}&type=${cadastreLayer.id}`);
                    var req = new Request(_this2._serverBase + '/features/' + cadastreLayer.id + '?text=' + value + '&tolerance=' + _this2._tolerance + '&limit=' + limit);
                    var headers = new Headers();
                    headers.append('Content-Type', 'application/json');
                    var init = {
                        method: 'GET',
                        mode: 'cors',
                        cache: 'default'
                    };
                    fetch(req, init).then(function (response) {
                        return response.json();
                    }).then(function (json) {
                        // if(json.status === 200){
                        var rs = json.features.map(function (x) {
                            return {
                                name: x.attrs.name || x.attrs.cn || x.attrs.id,
                                properties: x,
                                provider: _this2,
                                query: value
                            };
                        });
                        resolve(rs);
                        // }
                        // else {
                        // resolve(json);
                        // }                                       
                    });
                });
            }
        }, {
            key: 'fetch',
            value: function (_fetch) {
                function fetch(_x) {
                    return _fetch.apply(this, arguments);
                }

                fetch.toString = function () {
                    return _fetch.toString();
                };

                return fetch;
            }(function (obj) {
                var _this3 = this;

                var text = obj.attrs.name || obj.attrs.cn || obj.attrs.id;
                var cadastreLayer = this.getCadastreLayer(text, obj.type);
                return new Promise(function (resolve) {
                    if (cadastreLayer) {
                        // let req = new Request(`${this._serverBase}/features/${cadastreLayer.id}?tolerance=${this._tolerance}&limit=1&text=${obj.value}`);
                        var req = new Request(_this3._serverBase + '/features/' + cadastreLayer.id + '?tolerance=' + _this3._tolerance + '&limit=1&text=' + text);
                        var headers = new Headers();
                        headers.append('Content-Type', 'application/json');
                        var init = {
                            method: 'GET',
                            mode: 'cors',
                            cache: 'default'
                        };
                        fetch(req, init).then(function (response) {
                            return response.json();
                        }).then(function (json) {
                            if (json.status === 200) {
                                var event = document.createEvent('Event');
                                event.initEvent('fetch', false, false);
                                event.detail = json;
                                _this3.dispatchEvent(event);

                                var rs = json.features.map(function (x) {
                                    return {
                                        name: x.attrs.name || x.attrs.cn || x.attrs.id,
                                        properties: x,
                                        provider: _this3,
                                        query: obj
                                    };
                                });
                                resolve(rs);
                            } else {
                                resolve(json);
                            }
                        });
                    } else {
                        resolve([]);
                    }
                });
            })
        }]);
        return CadastreDataProvider;
    }(EventTarget);

    var Sidebar = function (_EventTarget) {
        inherits(Sidebar, _EventTarget);

        function Sidebar(container) {
            var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                _ref$position = _ref.position,
                position = _ref$position === undefined ? 'left' : _ref$position;

            classCallCheck(this, Sidebar);

            var _this = possibleConstructorReturn(this, (Sidebar.__proto__ || Object.getPrototypeOf(Sidebar)).call(this));

            _this._container = container;
            _this._container.classList.add('noselect');
            _this._container.innerHTML = '<div class="scanex-sidebar">\n            <div class="' + (position === 'left' ? 'tabs' : 'panes') + '"></div>\n            <div class="' + (position === 'left' ? 'panes' : 'tabs') + '"></div>\n        </div>';

            _this._tabContainer = _this._container.querySelector('.tabs');
            _this._paneContainer = _this._container.querySelector('.panes');

            _this._current = null;
            _this._data = {};
            return _this;
        }

        createClass(Sidebar, [{
            key: 'enable',
            value: function enable(id) {
                if (this._data[id]) {
                    this._data[id].enabled = true;
                }
            }
        }, {
            key: 'enabled',
            value: function enabled(id) {
                var _ref2 = id && this._data[id] ? this._data[id] : { enabled: false },
                    enabled = _ref2.enabled;

                return enabled;
            }
        }, {
            key: 'disable',
            value: function disable(id) {
                if (this._data[id]) {
                    if (id === this.current) {
                        this.current = null;
                    }
                    this._data[id].enabled = false;
                }
            }
        }, {
            key: 'addTab',
            value: function addTab(_ref3) {
                var id = _ref3.id,
                    icon = _ref3.icon,
                    opened = _ref3.opened,
                    closed = _ref3.closed,
                    tooltip = _ref3.tooltip,
                    _ref3$enabled = _ref3.enabled,
                    enabled = _ref3$enabled === undefined ? true : _ref3$enabled;

                var tab = document.createElement('div');
                var ic = document.createElement('i');
                icon.split(/\s+/g).forEach(function (x) {
                    return ic.classList.add(x);
                });
                ic.classList.add(id === this._current ? opened : closed);
                tab.appendChild(ic);
                tab.setAttribute('data-tab-id', id);
                if (tooltip) {
                    tab.setAttribute('title', tooltip);
                }
                tab.addEventListener('click', this._toggle.bind(this, id));
                this._tabContainer.appendChild(tab);

                var pane = document.createElement('div');
                pane.setAttribute('data-pane-id', id);
                pane.classList.add(this.visible && this.current === id ? 'shown' : 'hidden');
                this._paneContainer.appendChild(pane);

                this._data[id] = { icon: icon, opened: opened, closed: closed, enabled: enabled };

                return pane;
            }
        }, {
            key: 'removeTab',
            value: function removeTab(id) {
                var tab = this._tabContainer.querySelector('[data-tab-id=' + id + ']');
                tab.removeEventListener('click', this._toggle.bind(this, id));
                this._tabContainer.removeChild(tab);

                var pane = this._paneContainer.querySelector('[data-pane-id=' + id + ']');
                this._paneContainer.removeChild(pane);

                for (var i = 0; i < this._data.length; ++i) {
                    if (this._data[i].id === id) {
                        this._data.splice(i, 1);
                        break;
                    }
                }
            }
        }, {
            key: '_toggle',
            value: function _toggle(current) {
                if (this.enabled(current)) {
                    this.current = this.current === current ? null : current;
                }
            }
        }, {
            key: 'getPane',
            value: function getPane(id) {
                return this._paneContainer.querySelector('[data-pane-id=' + id + ']');
            }
        }, {
            key: 'current',
            get: function get$$1() {
                return this._current;
            },
            set: function set$$1(current) {
                var tabs = this._tabContainer.children;
                var panes = this._paneContainer.children;
                var success = false;

                for (var i = 0; i < tabs.length; ++i) {
                    var id = tabs[i].getAttribute('data-tab-id');
                    var _data$id = this._data[id],
                        opened = _data$id.opened,
                        closed = _data$id.closed,
                        enabled = _data$id.enabled;

                    var tab = tabs[i].querySelector('i');
                    var pane = panes[i];
                    if (id === current) {
                        tab.classList.remove(closed);
                        tab.classList.add(opened);

                        pane.classList.remove('hidden');
                        pane.classList.add('shown');

                        success = true;
                    } else {
                        tab.classList.remove(opened);
                        tab.classList.add(closed);

                        pane.classList.remove('shown');
                        pane.classList.add('hidden');
                    }
                }
                this._current = success ? current : null;
                var event = document.createEvent('Event');
                event.detail = { current: this._current };
                event.initEvent('change', false, false);
                this.dispatchEvent(event);
            }
        }]);
        return Sidebar;
    }(EventTarget);

    var SidebarControl = L.Control.extend({
        includes: L.Evented ? L.Evented.prototype : L.Mixin.Events,

        initialize: function initialize(options) {
            L.setOptions(this, options);
        },

        enable: function enable(id) {
            this._sidebar.enable(id);
        },

        enabled: function enabled(id) {
            return this._sidebar.enabled(id);
        },

        disable: function disable(id) {
            this._sidebar.disable(id);
        },

        getCurrent: function getCurrent() {
            return this._sidebar.current;
        },

        setCurrent: function setCurrent(current) {
            this._sidebar.current = current;
        },

        addTab: function addTab(_ref) {
            var id = _ref.id,
                icon = _ref.icon,
                opened = _ref.opened,
                closed = _ref.closed,
                tooltip = _ref.tooltip,
                enabled = _ref.enabled;

            return this._sidebar.addTab({ id: id, icon: icon, opened: opened, closed: closed, tooltip: tooltip, enabled: enabled });
        },

        removeTab: function removeTab(id) {
            this._sidebar.removeTab(id);
        },

        getPane: function getPane(id) {
            return this._sidebar.getPane(id);
        },

        onAdd: function onAdd(map) {
            var _this = this;

            this._container = L.DomUtil.create('div');
            L.DomEvent.disableClickPropagation(this._container);
            L.DomEvent.disableScrollPropagation(this._container);
            var position = this.options.position;

            this._sidebar = new Sidebar(this._container, { position: position === 'topleft' || position === 'bottomleft' ? 'left' : 'right' });
            this._sidebar.addEventListener('change', function (e) {
                _this.fire('change', e);
            });
            return this._container;
        },

        addTo: function addTo(map) {
            L.Control.prototype.addTo.call(this, map);
            if (this.options.addBefore) {
                this.addBefore(this.options.addBefore);
            }
            return this;
        },

        addBefore: function addBefore(id) {
            var parentNode = this._parent && this._parent._container;
            if (!parentNode) {
                parentNode = this._map && this._map._controlCorners[this.getPosition()];
            }
            if (!parentNode) {
                this.options.addBefore = id;
            } else {
                for (var i = 0, len = parentNode.childNodes.length; i < len; i++) {
                    var it = parentNode.childNodes[i];
                    if (id === it._id) {
                        parentNode.insertBefore(this._container, it);
                        break;
                    }
                }
            }
            return this;
        }
    });

    var iconLayers = createCommonjsModule(function (module) {
        /*eslint-env commonjs, browser */
        (function (factory) {
            if (module.exports) {
                module.exports = factory(leaflet);
            } else {
                window.L.control.iconLayers = factory(window.L);
                window.L.Control.IconLayers = window.L.control.iconLayers.Constructor;
            }
        })(function (L) {
            function each(o, cb) {
                for (var p in o) {
                    if (o.hasOwnProperty(p)) {
                        cb(o[p], p, o);
                    }
                }
            }

            function find(ar, cb) {
                if (ar.length) {
                    for (var i = 0; i < ar.length; i++) {
                        if (cb(ar[i])) {
                            return ar[i];
                        }
                    }
                } else {
                    for (var p in ar) {
                        if (ar.hasOwnProperty(p) && cb(ar[p])) {
                            return ar[p];
                        }
                    }
                }
            }

            function first(o) {
                for (var p in o) {
                    if (o.hasOwnProperty(p)) {
                        return o[p];
                    }
                }
            }

            function length(o) {
                var length = 0;
                for (var p in o) {
                    if (o.hasOwnProperty(p)) {
                        length++;
                    }
                }
                return length;
            }

            function prepend(parent, el) {
                if (parent.children.length) {
                    parent.insertBefore(el, parent.children[0]);
                } else {
                    parent.appendChild(el);
                }
            }

            var IconLayers = L.Control.extend({

                includes: L.Evented ? L.Evented.prototype : L.Mixin.Events,
                _getActiveLayer: function _getActiveLayer() {
                    if (this._activeLayerId) {
                        return this._layers[this._activeLayerId];
                    } else if (length(this._layers)) {
                        return first(this._layers);
                    } else {
                        return null;
                    }
                },
                _getPreviousLayer: function _getPreviousLayer() {
                    var activeLayer = this._getActiveLayer();
                    if (!activeLayer) {
                        return null;
                    } else if (this._previousLayerId) {
                        return this._layers[this._previousLayerId];
                    } else {
                        return find(this._layers, function (l) {
                            return l.id !== activeLayer.id;
                        }.bind(this)) || null;
                    }
                },
                _getInactiveLayers: function _getInactiveLayers() {
                    var ar = [];
                    var activeLayerId = this._getActiveLayer() ? this._getActiveLayer().id : null;
                    var previousLayerId = this._getPreviousLayer() ? this._getPreviousLayer().id : null;
                    each(this._layers, function (l) {
                        if (l.id !== activeLayerId && l.id !== previousLayerId) {
                            ar.push(l);
                        }
                    });
                    return ar;
                },
                _arrangeLayers: function _arrangeLayers() {
                    var behaviors = {};
                    behaviors.previous = function () {
                        var layers = this._getInactiveLayers();
                        if (this._getActiveLayer()) {
                            layers.unshift(this._getActiveLayer());
                        }
                        if (this._getPreviousLayer()) {
                            layers.unshift(this._getPreviousLayer());
                        }
                        return layers;
                    };
                    return behaviors[this.options.behavior].apply(this, arguments);
                },
                _getLayerCellByLayerId: function _getLayerCellByLayerId(id) {
                    var els = this._container.getElementsByClassName('leaflet-iconLayers-layerCell');
                    for (var i = 0; i < els.length; i++) {
                        if (els[i].getAttribute('data-layerid') == id) {
                            return els[i];
                        }
                    }
                },
                _createLayerElement: function _createLayerElement(layerObj) {
                    var el = L.DomUtil.create('div', 'leaflet-iconLayers-layer');
                    if (layerObj.title) {
                        var titleContainerEl = L.DomUtil.create('div', 'leaflet-iconLayers-layerTitleContainer');
                        var titleEl = L.DomUtil.create('div', 'leaflet-iconLayers-layerTitle');
                        var checkIconEl = L.DomUtil.create('div', 'leaflet-iconLayers-layerCheckIcon');
                        titleEl.innerHTML = layerObj.title;
                        titleContainerEl.appendChild(titleEl);
                        el.appendChild(titleContainerEl);
                        el.appendChild(checkIconEl);
                    }
                    if (layerObj.icon) {
                        el.setAttribute('style', 'background-image: url(\'' + layerObj.icon + '\')');
                    }
                    return el;
                },
                _createLayerElements: function _createLayerElements() {
                    var currentRow, layerCell;
                    var layers = this._arrangeLayers();
                    var activeLayerId = this._getActiveLayer() && this._getActiveLayer().id;

                    for (var i = 0; i < layers.length; i++) {
                        if (i % this.options.maxLayersInRow === 0) {
                            currentRow = L.DomUtil.create('div', 'leaflet-iconLayers-layersRow');
                            if (this.options.position.indexOf('bottom') === -1) {
                                this._container.appendChild(currentRow);
                            } else {
                                prepend(this._container, currentRow);
                            }
                        }
                        layerCell = L.DomUtil.create('div', 'leaflet-iconLayers-layerCell');
                        layerCell.setAttribute('data-layerid', layers[i].id);
                        if (i !== 0) {
                            L.DomUtil.addClass(layerCell, 'leaflet-iconLayers-layerCell_hidden');
                        }
                        if (layers[i].id === activeLayerId) {
                            L.DomUtil.addClass(layerCell, 'leaflet-iconLayers-layerCell_active');
                        }
                        if (this._expandDirection === 'left') {
                            L.DomUtil.addClass(layerCell, 'leaflet-iconLayers-layerCell_expandLeft');
                        } else {
                            L.DomUtil.addClass(layerCell, 'leaflet-iconLayers-layerCell_expandRight');
                        }
                        layerCell.appendChild(this._createLayerElement(layers[i]));

                        if (this.options.position.indexOf('right') === -1) {
                            currentRow.appendChild(layerCell);
                        } else {
                            prepend(currentRow, layerCell);
                        }
                    }
                },
                _onLayerClick: function _onLayerClick(e) {
                    e.stopPropagation();
                    var layerId = e.currentTarget.getAttribute('data-layerid');
                    var layer = this._layers[layerId];
                    this.setActiveLayer(layer.layer);
                    this.expand();
                },
                _attachEvents: function _attachEvents() {
                    each(this._layers, function (l) {
                        var e = this._getLayerCellByLayerId(l.id);
                        if (e) {
                            e.addEventListener('click', this._onLayerClick.bind(this));
                        }
                    }.bind(this));
                    var layersRowCollection = this._container.getElementsByClassName('leaflet-iconLayers-layersRow');

                    var onMouseEnter = function (e) {
                        e.stopPropagation();
                        this.expand();
                    }.bind(this);

                    var onMouseLeave = function (e) {
                        e.stopPropagation();
                        this.collapse();
                    }.bind(this);

                    var stopPropagation = function stopPropagation(e) {
                        e.stopPropagation();
                    };

                    //TODO Don't make functions within a loop.
                    for (var i = 0; i < layersRowCollection.length; i++) {
                        var el = layersRowCollection[i];
                        el.addEventListener('mouseenter', onMouseEnter);
                        el.addEventListener('mouseleave', onMouseLeave);
                        el.addEventListener('mousemove', stopPropagation);
                    }
                },
                _render: function _render() {
                    this._container.innerHTML = '';
                    this._createLayerElements();
                    this._attachEvents();
                },
                _switchMapLayers: function _switchMapLayers() {
                    if (!this._map) {
                        return;
                    }
                    var activeLayer = this._getActiveLayer();
                    var previousLayer = this._getPreviousLayer();
                    if (previousLayer) {
                        this._map.removeLayer(previousLayer.layer);
                    } else {
                        each(this._layers, function (layerObject) {
                            var layer = layerObject.layer;
                            this._map.removeLayer(layer);
                        }.bind(this));
                    }
                    if (activeLayer) {
                        this._map.addLayer(activeLayer.layer);
                    }
                },
                options: {
                    position: 'bottomleft', // one of expanding directions depends on this
                    behavior: 'previous', // may be 'previous', 'expanded' or 'first'
                    expand: 'horizontal', // or 'vertical'
                    autoZIndex: true, // from L.Control.Layers
                    maxLayersInRow: 5,
                    manageLayers: true
                },
                initialize: function initialize(layers, options) {
                    if (!L.Util.isArray(arguments[0])) {
                        // first argument is options
                        options = layers;
                        layers = [];
                    }
                    L.setOptions(this, options);
                    this._expandDirection = this.options.position.indexOf('left') != -1 ? 'right' : 'left';
                    if (this.options.manageLayers) {
                        this.on('activelayerchange', this._switchMapLayers, this);
                    }
                    this.setLayers(layers);
                },
                onAdd: function onAdd(map) {
                    this._container = L.DomUtil.create('div', 'leaflet-iconLayers');
                    L.DomUtil.addClass(this._container, 'leaflet-iconLayers_' + this.options.position);
                    this._render();
                    map.on('click', this.collapse, this);
                    if (this.options.manageLayers) {
                        this._switchMapLayers();
                    }
                    return this._container;
                },
                onRemove: function onRemove(map) {
                    map.off('click', this.collapse, this);
                },
                setLayers: function setLayers(layers) {
                    this._layers = {};
                    layers.map(function (layer) {
                        var id = L.stamp(layer.layer);
                        this._layers[id] = L.extend(layer, {
                            id: id
                        });
                    }.bind(this));
                    if (this._container) {
                        this._render();
                    }
                },
                setActiveLayer: function setActiveLayer(layer) {
                    var l = layer && this._layers[L.stamp(layer)];
                    if (!l || l.id === this._activeLayerId) {
                        return;
                    }
                    this._previousLayerId = this._activeLayerId;
                    this._activeLayerId = l.id;
                    if (this._container) {
                        this._render();
                    }
                    this.fire('activelayerchange', {
                        layer: layer
                    });
                },
                expand: function expand() {
                    this._arrangeLayers().slice(1).map(function (l) {
                        var el = this._getLayerCellByLayerId(l.id);
                        L.DomUtil.removeClass(el, 'leaflet-iconLayers-layerCell_hidden');
                    }.bind(this));
                },
                collapse: function collapse() {
                    this._arrangeLayers().slice(1).map(function (l) {
                        var el = this._getLayerCellByLayerId(l.id);
                        L.DomUtil.addClass(el, 'leaflet-iconLayers-layerCell_hidden');
                    }.bind(this));
                }
            });

            var iconLayers = function iconLayers(layers, options) {
                return new IconLayers(layers, options);
            };

            iconLayers.Constructor = IconLayers;

            return iconLayers;
        });
    });

    window.RESULT_MAX_COUNT = 1000;
    window.MAX_CART_SIZE = 200;
    window.MAX_UPLOAD_POINTS = 100000;
    window.Catalog = window.Catalog || {};
    window.Catalog.VERSION = '2.2.5';
    window.Catalog.VERSION_DATE = new Date(2018, 6, 27);

    window.LAYER_ID = '9B4733A8CBE942CE9F5E70DCAA6C1FBE'; // 'AFB4D363768E4C5FAC71C9B0C6F7B2F4'

    var T$e = Translations$1;

    var DEFAULT_LANGUAGE$1 = 'rus';
    var NON_EDIT_LINE_STYLE = {
        fill: false,
        weight: 2,
        opacity: 1
    };

    window.IS_MOBILE = is_mobile();

    var ignoreResults = false;

    T$e.addText('rus', {
        aoi: 'Область интереса',
        controls: {
            point: 'Маркер',
            polygon: 'Полигон',
            polyline: 'Линия',
            print: 'Печать',
            permalink: 'Постоянная ссылка',
            rectangle: 'Прямоугольник',
            download: 'Скачать',
            upload: 'Загрузить',
            zoom: 'Увеличение',
            search: 'Поиск по кадастру, адресам, координатам'
        },
        results: {
            title: 'Найденные снимки',
            favorites: 'Корзина',
            sceneid: 'ID',
            date: 'Дата',
            satellite: 'Спутник',
            clouds: 'Обл.',
            angle: 'Угол',
            stereo: 'Стерео',
            clear: 'Очистить список',
            selected: 'Показывать выбранные / все',
            quicklooks: {
                select: 'Выбрать квиклуки',
                toggle: 'Показать / скрыть выбранные квиклуки',
                cart: 'Поместить видимые в корзину'
            },
            download: 'Количество найденных снимков превышает установленный порог.<br/>Хотите скачать их в виде шейп-файла?',
            change: 'Количество найденных снимков превышает установленный порог.<br/>Измените критерий поиска.'
        },
        favorites: {
            limit: '\u041C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0435 \u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E \u0441\u043D\u0438\u043C\u043A\u043E\u0432 \u0432 \u043A\u043E\u0440\u0437\u0438\u043D\u0435 - ' + window.MAX_CART_SIZE,
            delete: 'Удалить выделенные'
        },
        boolean: {
            true: 'Да',
            false: 'Нет'
        },
        units: {
            m: 'м',
            km: 'км'
        },
        alerts: {
            title: 'Внимание',
            clear: 'Удалить найденные снимки?',
            cancel: 'Отмена',
            close: 'Закрыть',
            authenticate: 'Для оформления заказа необходимо:',
            ok: 'ОК',
            login: 'Войти в систему',
            clipboard: 'Копировать ссылку',
            permalink: 'Постоянная ссылка скопирована в буфер обмена',
            nothing: 'Ничего не найдено'
        },
        search: {
            title: 'Параметры поиска',
            action: 'Найти снимки'
        },
        cart: {
            add: 'Оформить заказ'
        },
        download: {
            type: 'Состав',
            file: 'Имя файла',
            borders: 'Границы поиска',
            results: 'Результаты поиска: контуры',
            cart: 'Корзина: контуры',
            quicklooks: 'Корзина: контуры и квиклуки',
            ok: 'Скачать',
            cancel: 'Отмена',
            noname: 'Без имени',
            noresults: 'Нет объектов для скачивания',
            empty: "Нет объектов",
            rcsv: 'Результаты поиска: метаданные (csv)',
            ccsv: 'Корзина: метаданные (csv)'
        },
        errors: {
            permalink: 'Произошла ошибка при загрузке ссылки',
            upload: 'Произошла ошибка при загрузке файла',
            points: '\u0413\u0435\u043E\u043C\u0435\u0442\u0440\u0438\u044F \u0441\u043E\u0434\u0435\u0440\u0436\u0438\u0442 \u0431\u043E\u043B\u0435\u0435 ' + window.MAX_UPLOAD_POINTS + ' \u0442\u043E\u0447\u0435\u043A'
        }
    });

    T$e.addText('eng', {
        aoi: 'Area of interest',
        controls: {
            point: 'Marker',
            polygon: 'Polygon',
            polyline: 'Polyline',
            print: 'Print',
            permalink: 'Permalink',
            rectangle: 'Rectangle',
            download: 'Download',
            upload: 'Upload',
            zoom: 'Zoom',
            search: 'Search by cadastre, address and coordinates'
        },
        results: {
            title: 'Found images',
            favorites: 'Cart',
            sceneid: 'ID',
            date: 'Date',
            satellite: 'Satellite',
            clouds: 'Clouds',
            angle: 'Angle',
            stereo: 'Stereo',
            controls: {
                print: 'Print',
                permalink: 'Permalink',
                zoom: 'Zoom'
            },
            clear: 'Clear results',
            selected: 'Show selected / all',
            quicklooks: {
                select: 'Select quicklooks',
                toggle: 'Show / hide selected quicklooks',
                cart: 'Add visible to cart'
            },
            download: 'Results exceed allowed items amount.<br/>Do you want to download them in a shape-file?',
            change: 'Results exceed allowed items amount.<br/>Change the criteria to limit the search.'
        },
        favorites: {
            limit: 'No more than ' + window.MAX_CART_SIZE + ' elements are allowed in the cart',
            delete: 'Remove selected'
        },
        boolean: {
            true: 'Yes',
            false: 'No'
        },
        units: {
            m: 'm',
            km: 'km'
        },
        alerts: {
            title: 'Warning',
            clear: 'Remove found images?',
            cancel: 'Cancel',
            close: 'Close',
            authenticate: 'To place order<br/>you need to login',
            ok: 'OK',
            login: 'Login',
            clipboard: 'Copy to to clipboard',
            permalink: 'Permalink saved to clipboard',
            nothing: 'Nothing found'
        },
        search: {
            title: 'Search options',
            action: 'Search'
        },
        cart: {
            add: 'Place an order'
        },
        download: {
            type: 'Download contents',
            file: 'File name',
            borders: 'Search borders',
            results: 'Results: contours',
            cart: 'Cart: contours',
            quicklooks: 'Cart: contours and quicklooks',
            ok: 'Download',
            cancel: 'Cancel',
            noname: 'No name',
            noresults: 'No objects to download',
            empty: "Can't download. No objects",
            rcsv: 'Results: metadata as .csv',
            ccsv: 'Cart: metadata as .csv'
        },
        errors: {
            permalink: 'Error while loading permalik',
            upload: 'Error while uploading file',
            points: 'Geometry contains more than ' + window.MAX_UPLOAD_POINTS + ' points'
        }
    });

    var mapContainer = document.getElementById('map');

    var map = L.map(mapContainer, {
        center: new L.LatLng(55.634508, 37.433167),
        minZoom: 3,
        maxZoom: 17,
        zoom: 3,
        boxZoom: false,
        srs: 3857,
        skipTiles: 'All',
        ftc: 'osm',
        attributionControl: false,
        zoomControl: false,
        squareUnit: 'km2',
        distanceUnit: 'km',
        maxBounds: L.latLngBounds(L.latLng(-100, -360), L.latLng(100, 360))
    });

    map.options.svgSprite = false;

    function get_map_center() {
        var headerBounds = document.getElementById('header').getBoundingClientRect();

        var _get_window_center = get_window_center(),
            top = _get_window_center.top,
            left = _get_window_center.left;

        return { top: top + headerBounds.top + headerBounds.height, left: left };
    }

    resize_map_container();

    function load_locale(state) {
        return new Promise(function (resolve) {
            var s = localStorage.getItem('view_state');
            if (s) {
                var viewState = JSON.parse(s);
                T$e.setLanguage(viewState.lang || DEFAULT_LANGUAGE$1);
                L.gmxLocale.setLanguage(viewState.lang || DEFAULT_LANGUAGE$1);
            }
            resolve(state);
        });
    }

    function load_map(state) {
        return new Promise(function (resolve) {
            L.gmx.loadMap('1CB019F36D024831972F3029B724D7CA', {
                apiKey: 'Z2SSNR87N4', //'A07FEB777402A559A7DE8BC6CA7C2E96',
                leafletMap: map,
                srs: 3857,
                skipTiles: 'All',
                ftc: 'osm'
            }).then(function (gmxMap) {
                state.gmxMap = gmxMap;
                map.invalidateSize();
                resolve(state);
            });
        });
    }

    function init_baselayer_manager(state) {
        return new Promise(function (resolve) {
            map.gmxBaseLayersManager = new window.L.gmxBaseLayersManager(map);
            map.gmxBaseLayersManager.initDefaults({
                srs: 3857,
                skipTiles: 'All',
                ftc: 'osm'
            }).then(function () {
                return resolve(state);
            });
        });
    }

    function set_active_layer(state) {
        return new Promise(function (resolve) {
            var gmxMap = state.gmxMap;
            var baseLayers = gmxMap.properties.BaseLayers;
            var currentID = baseLayers[0];
            map.gmxBaseLayersManager.setActiveIDs(baseLayers).setCurrentID(currentID);
            map.addControl(new window.L.Control.gmxLayers(map.gmxBaseLayersManager, { hideBaseLayers: true }));
            resolve(state);
        });
    }

    function authenticate(state) {
        return new Promise(function (resolve) {
            window.Catalog.authManager = getAuthManager();
            var authBaseUrl = location.protocol + '//' + location.host + location.pathname.substr(0, location.pathname.lastIndexOf('/'));
            window.Catalog.catalogResourceServer = new ResourceServer(window.Catalog.authManager, {
                id: 'Catalog',
                root: authBaseUrl
            });
            window.Catalog.gmxResourceServer = getResourceServer('geomixer');
            window.Catalog.authWidget = new AuthWidget({ authManager: window.Catalog.authManager });
            window.Catalog.authContainer = document.getElementById('auth');
            window.Catalog.authWidget.appendTo(window.Catalog.authContainer);
            window.Catalog.authWidget.addEventListener('logout', function () {
                localStorage.setItem('view_state', JSON.stringify(get_state()));
                window.location.reload(true);
            });
            var dlgAuthContainer = create_container();
            dlgAuthContainer.classList.add('auth-dialog');

            var _get_map_center = get_map_center(),
                left = _get_map_center.left,
                top = _get_map_center.top;

            window.Catalog.dlgAuth = new FloatingPanel(dlgAuthContainer, { id: 'auth.dialog', left: left, top: top, modal: true });
            window.Catalog.dlgAuth.hide();
            window.Catalog.dlgAuth.content.innerHTML = '' + T$e.getText('alerts.authenticate');
            window.Catalog.dlgAuth.footer.innerHTML = '<button class="dialog-login-button">' + T$e.getText('alerts.login') + '</button>';
            window.Catalog.dlgAuth.footer.querySelector('button').addEventListener('click', function (e) {
                if (!localStorage.getItem('view_state')) {
                    localStorage.setItem('view_state', JSON.stringify(get_state()));
                }
                window.Catalog.authContainer.querySelector('.authWidget-loginButton').click();
            });
            resolve(state);
        });
    }

    function get_user(state) {
        return new Promise(function (resolve) {
            window.Catalog.authManager.getUserInfo().then(function (response) {
                var _response$Result = response.Result,
                    ID = _response$Result.ID,
                    FullName = _response$Result.FullName,
                    Email = _response$Result.Email,
                    Phone = _response$Result.Phone,
                    Organization = _response$Result.Organization;

                window.Catalog.userInfo = {
                    IsAuthenticated: true,
                    ID: ID,
                    FullName: FullName,
                    Email: Email,
                    Phone: Phone,
                    Organization: Organization
                };
                resolve(state);
            }).catch(function (e) {
                console.log(e);
                window.Catalog.userInfo = { IsAuthenticated: false };
                resolve(state);
            });
        });
    }

    function check_access(state) {
        return new Promise(function (resolve) {
            window.Catalog.gmxResourceServer.sendGetRequest('Layer/GetLayerInfo.ashx', { layerID: '9077D16CFE374967A8C57C78095F34EA' }).then(function (response) {
                if (response.Status == 'ok' && response.Result && response.Result.LayerID == '9077D16CFE374967A8C57C78095F34EA') {
                    window.Catalog.userInfo.Role = 'scanex';
                }
                resolve(state);
            }).catch(function (e) {
                console.log(e);
                resolve(state);
            });
        });
    }

    function get_root_url() {
        var _location = location,
            origin = _location.origin,
            pathname = _location.pathname;

        return '' + origin + pathname;
    }

    function get_permalink_url(id) {
        return get_root_url() + '?link=' + id;
    }

    function get_state() {
        var center = map.getCenter();

        var _L$Projection$Mercato = L.Projection.Mercator.project(center),
            x = _L$Projection$Mercato.x,
            y = _L$Projection$Mercato.y;

        var searchCriteria = window.Catalog.searchOptions.criteria;
        var serialize = function serialize(group) {
            return group.filter(function (s) {
                return s.checked;
            }).map(function (s) {
                return s.id;
            });
        };
        searchCriteria.satellites = { ms: serialize(searchCriteria.satellites.ms), pc: serialize(searchCriteria.satellites.pc) };
        var drawingObjects = window.Catalog.drawnObjectsControl.widget.items.reduce(function (a, _ref) {
            var visible = _ref.visible,
                id = _ref.id,
                color = _ref.color,
                name = _ref.name,
                area = _ref.area,
                geoJSON = _ref.geoJSON;

            return a.concat({ visible: visible, id: id, color: color, name: name, area: area, geoJSON: geoJSON });
        }, []);
        return {
            lang: T$e.getLanguage(),
            drawingObjects: drawingObjects,
            position: {
                x: x,
                y: y,
                z: 17 - map.getZoom()
            },
            activeLayer: map.gmxBaseLayersManager.getCurrentID(),
            bounds: map.getBounds(),
            searchCriteria: searchCriteria,
            items: window.Catalog.resultsController.results,
            cart: window.Catalog.resultsController.favorites,
            // activeTabId: window.Catalog.searchSidebar.getActiveTabId(),        
            activeTabId: window.Catalog.searchSidebar.getCurrent(),
            cadastre: {}
        };
    }

    function get_permalink_id() {

        return new Promise(function (resolve, reject) {
            var state = get_state();
            window.Catalog.gmxResourceServer.sendPostRequest('TinyReference/Create.ashx', {
                content: JSON.stringify(state)
            }).then(function (response) {
                if (response.Status === 'ok') {
                    resolve(response.Result);
                } else {
                    reject(response);
                }
            }).catch(function (e) {
                return reject(e);
            });
        });
    }

    function get_total_height(parts) {
        return parts.reduce(function (a, x) {
            return a + document.body.querySelector(x).getBoundingClientRect().height;
        }, 0);
    }
    function resize_map_container() {
        mapContainer.style.height = document.body.getBoundingClientRect().height - document.getElementById('header').getBoundingClientRect().height + 'px';
        map.invalidateSize();
    }

    function resize_containers() {
        resize_map_container();
        var height = resize_sidebar();
        resize_search_options();
        // resize_results();
        // resize_favorites();
    }

    function resize_sidebar() {
        var height = get_total_height(['#header', '.leaflet-gmx-copyright']);
        document.body.querySelector('.scanex-sidebar').style.height = document.body.getBoundingClientRect().height - height + 'px';
        return height;
    }

    function resize_search_options() {
        var _document$body$queryS = document.body.querySelector('.scanex-sidebar').getBoundingClientRect(),
            height = _document$body$queryS.height;

        var total = height - get_total_height(['.search-pane', '.search-options-footer']) - 11;
        window.Catalog.searchOptions.resize(total);
    }

    function init_sidebar(state) {
        return new Promise(function (resolve) {
            var restricted = window.Catalog.userInfo.IsAuthenticated && window.Catalog.userInfo.Role === 'scanex';

            var _get_map_center2 = get_map_center(),
                left = _get_map_center2.left,
                top = _get_map_center2.top;
            // set default search criteria


            var now = new Date();
            var select_satellites = function select_satellites(group, flag) {
                for (var key in group) {
                    var s = group[key];
                    s.checked = flag;
                }
            };
            select_satellites(satellites.ms, true);
            select_satellites(satellites.pc, true);

            window.Catalog.defaultCriteria = {
                date: [new Date(now.getFullYear(), 0, 1), now],
                annually: false,
                clouds: [0, 100],
                angle: [0, 60],
                resolution: [0.3, 20],
                satellites: satellites,
                stereo: false
            };

            window.Catalog.searchSidebar = new SidebarControl({ position: 'topleft' });
            map.addControl(window.Catalog.searchSidebar);
            // let sidebarContainer = document.querySelector('.iconSidebarControl');
            var sidebarContainer = window.Catalog.searchSidebar.getContainer();
            sidebarContainer.classList.add('noselect');
            // let searchContainer = window.Catalog.searchSidebar.setPane('search', {
            //     createTab: createTab({
            //         icon: 'sidebar-search',
            //         active: 'sidebar-search-active',
            //         inactive: 'sidebar-search-passive',
            //         hint: T.getText('search.title')
            //     }),
            // });
            var searchContainer = window.Catalog.searchSidebar.addTab({
                id: 'search',
                icon: 'sidebar-search',
                opened: 'sidebar-search-opened',
                closed: 'sidebar-search-closed',
                tooltip: T$e.getText('search.title')
            });
            searchContainer.innerHTML = '<div class="search-pane"></div>\n            <div class="no-select search-options-pane"></div>\n            <div class="search-options-footer">\n                <button class="search-options-search-button" type="button">\n                    <span>' + T$e.getText('search.action') + '</span>\n                </button>\n            </div>';

            var crds = new CoordinatesDataProvider({ showOnMap: false });
            crds.addEventListener('fetch', function (e) {
                var result = e.detail;
                var geoJSON = result.feature;
                geoJSON.properties.editable = false;
                var center = L.GeoJSON.coordsToLatLng(geoJSON.geometry.coordinates);
                var item = window.Catalog.resultsController.getObject({ geoJSON: geoJSON, editable: geoJSON.properties.editable });
                var drawing = window.Catalog.resultsController.addDrawing(item);

                var _mapContainer$getBoun = mapContainer.getBoundingClientRect(),
                    height = _mapContainer$getBoun.height;

                window.Catalog.drawnObjectsControl.widget.resize(height - 150);
                // window.Catalog.drawnObjectsControl.widget.items = window.Catalog.drawnObjectsControl.widget.items.concat(item);
                map.setView(center, 14);
                // map.invalidateSize();
            });
            var gmx = new GmxLayerDataProvider({ map: map, gmxResourceServer: window.Catalog.gmxResourceServer });
            gmx.addEventListener('fetch', function (e) {
                var _e$detail = e.detail,
                    fields = _e$detail.fields,
                    values = _e$detail.values,
                    types = _e$detail.types;

                var count = values.length;
                if (count === 0) {
                    // window.Catalog.searchSidebar.enable ('results', false);
                    window.Catalog.searchSidebar.disable('results');
                    update_results_number(0);
                    window.Catalog.notificationWidget.content.innerText = T$e.getText('alerts.nothing');
                    window.Catalog.notificationWidget.show();
                } else {
                    window.Catalog.resultsController.clear();
                    // window.Catalog.searchSidebar.enable ('results', true);
                    // window.Catalog.searchSidebar.open('results');
                    window.Catalog.searchSidebar.enable('results');
                    window.Catalog.searchSidebar.setCurrent('results');
                    window.Catalog.resultsController.setLayer({ fields: fields, values: values, types: types });
                    update_results_number(count);
                }
            });

            var osm = new OsmDataProvider({
                showOnMap: false,
                serverBase: '//maps.kosmosnimki.ru',
                suggestionLimit: 10
            });

            osm.addEventListener('fetch', function (e) {
                var results = e.detail;
                var features = results.map(function (x) {
                    x.feature.properties.editable = false;
                    x.feature.properties.name = x.feature.properties.ObjName;
                    return x.feature;
                });
                var fill = NON_EDIT_LINE_STYLE.fill,
                    weight = NON_EDIT_LINE_STYLE.weight,
                    opacity = NON_EDIT_LINE_STYLE.opacity;

                if (features && features.length) {
                    features.map(function (geoJSON) {
                        normalize_geometry(geoJSON.geometry);

                        var _map$gmxDrawing$addGe = map.gmxDrawing.addGeoJSON(geoJSON, {
                            editable: false,
                            lineStyle: { fill: fill, weight: weight, opacity: opacity },
                            className: 'osm-layer'
                        }),
                            _map$gmxDrawing$addGe2 = slicedToArray(_map$gmxDrawing$addGe, 1),
                            object = _map$gmxDrawing$addGe2[0];

                        window.Catalog.resultsController.createDrawing({ object: object, geoJSON: geoJSON });
                        object.bringToBack();
                    });
                    var json = features.reduce(function (a, geojson) {
                        a.addData(geojson.geometry);
                        return a;
                    }, L.geoJson());
                    var bounds = json.getBounds();
                    map.fitBounds(bounds);
                    // map.invalidateSize();
                }
            });

            // let cadastre = new CadastreDataProvider({
            //     serverBase: '//pkk5.kosmosnimki.ru/api',
            //     suggestionLimit: 10,
            //     tolerance: 2048,
            //     showOnMap: true,
            // });
            // cadastre.addEventListener ('fetch', e => {
            //     let response = e.detail;
            //     if (response && response.features) {
            //         var feature = response.features[0];
            //         if (cadastreLayerGroup) {
            //             if (!map.hasLayer(cadastreLayerGroup)) {
            //                 cadastreLayerGroup.addTo(map);
            //             }
            //             cadastreModule.searchHook(feature.attrs.cn);
            //         } else {
            //             var R = 6378137,
            //                 crs = L.Projection.SphericalMercator,
            //                 bounds = map.getPixelBounds(),
            //                 ne = map.options.crs.project(map.unproject(bounds.getTopRight())),
            //                 sw = map.options.crs.project(map.unproject(bounds.getBottomLeft())),
            //                 latLngBounds = L.latLngBounds(
            //                     crs.unproject(L.point(feature.extent.xmin, feature.extent.ymin).divideBy(R)),
            //                     crs.unproject(L.point(feature.extent.xmax, feature.extent.ymax).divideBy(R))
            //                 );
            //             map.fitBounds(latLngBounds, { reset: true });
            //         }
            //     }
            // });

            var searchControl = new SearchWidget(searchContainer.querySelector('.search-pane'), {
                placeHolder: T$e.getText('controls.search'),
                suggestionLimit: 10,
                providers: [crds, gmx, osm],
                replaceInputOnEnter: true,
                style: {
                    editable: false,
                    map: true,
                    pointStyle: {
                        size: 8,
                        weight: 1,
                        opacity: 1,
                        color: '#00008B'
                    },
                    lineStyle: {
                        fill: false,
                        weight: 3,
                        opacity: 1,
                        color: '#008B8B'
                    }
                }
            });

            map.on('click', searchControl.results.hide.bind(searchControl.results));
            map.on('dragstart', searchControl.results.hide.bind(searchControl.results));

            window.Catalog.searchOptions = new SearchOptions(searchContainer.querySelector('.search-options-pane'), { restricted: restricted });
            window.Catalog.searchOptions.criteria = window.Catalog.defaultCriteria;
            window.Catalog.searchOptions.addEventListener('change', function (e) {
                enable_search();
            });

            window.Catalog.requestAdapter = new RequestAdapter({
                layer: LAYER_ID,
                gmxResourceServer: window.Catalog.gmxResourceServer,
                authorized: restricted
            });

            var dlgDownloadResultContainer = create_container();
            dlgDownloadResultContainer.classList.add('download-result-dialog');

            window.Catalog.dlgDownloadResult = new FloatingPanel(dlgDownloadResultContainer, { id: 'download.result.dialog', left: left, top: top, modal: true, header: false });
            window.Catalog.dlgDownloadResult.hide();
            window.Catalog.dlgDownloadResult.content.innerHTML = '' + T$e.getText('results.download');
            window.Catalog.dlgDownloadResult.footer.innerHTML = '<button class="dialog-ok-button">' + T$e.getText('download.ok') + '</button>\n        <button class="dialog-cancel-button">' + T$e.getText('download.cancel') + '</button>';
            window.Catalog.dlgDownloadResult.footer.querySelector('button.dialog-ok-button').addEventListener('click', function (e) {
                window.Catalog.dlgDownloadResult.hide();
                ignoreResults = false;
                window.Catalog.loaderWidget.show();
                window.Catalog.requestAdapter.search().then(function (_ref2) {
                    var fields = _ref2.fields,
                        values = _ref2.values,
                        types = _ref2.types;

                    window.Catalog.loaderWidget.hide();
                    if (!ignoreResults) {
                        window.Catalog.resultsController.downloadCache = { fields: fields, values: values, types: types };
                        window.Catalog.shapeLoader.download('results', 'results');
                    }
                }).catch(function (e) {
                    window.Catalog.dlgErrorMessage.content.innerHTML = '' + e.Message;
                    window.Catalog.dlgErrorMessage.show();
                });
            });

            var dlgErrorMessageContainer = create_container();
            dlgErrorMessageContainer.classList.add('error-message-dialog');
            window.Catalog.dlgErrorMessage = new FloatingPanel(dlgErrorMessageContainer, {
                id: 'error.message.dialog', left: left, top: top, modal: true, header: false
            });
            window.Catalog.dlgErrorMessage.footer.innerHTML = '<button class="dialog-close-button">' + T$e.getText('alerts.close') + '</button>';
            window.Catalog.dlgErrorMessage.footer.querySelector('button.dialog-close-button').addEventListener('click', function (e) {
                window.Catalog.dlgErrorMessage.hide();
            });

            window.Catalog.dlgErrorMessage.hide();

            window.Catalog.dlgDownloadResult.footer.querySelector('button.dialog-cancel-button').addEventListener('click', function (e) {
                window.Catalog.dlgDownloadResult.hide();
            });

            var dlgChangeResultContainer = create_container();
            dlgChangeResultContainer.classList.add('download-change-dialog');
            window.Catalog.dlgChangeResult = new FloatingPanel(dlgChangeResultContainer, {
                id: 'download.change.dialog', left: left, top: top, modal: true, header: false
            });
            window.Catalog.dlgChangeResult.hide();
            window.Catalog.dlgChangeResult.content.innerHTML = '' + T$e.getText('results.change');
            window.Catalog.dlgChangeResult.footer.innerHTML = '<button class="dialog-close-button">' + T$e.getText('alerts.ok') + '</button>';
            window.Catalog.dlgChangeResult.footer.querySelector('button.dialog-close-button').addEventListener('click', function (e) {
                window.Catalog.dlgChangeResult.hide();
            });

            // window.Catalog.resultsContainer = window.Catalog.searchSidebar.setPane('results', {
            //     createTab: createTab({
            //         icon: 'sidebar-image',
            //         active: 'sidebar-image-active',
            //         inactive: 'sidebar-image-passive',
            //         hint: T.getText('results.title')
            //     }),
            // });

            window.Catalog.resultsContainer = window.Catalog.searchSidebar.addTab({
                id: 'results',
                icon: 'sidebar-results',
                opened: 'sidebar-results-opened',
                closed: 'sidebar-results-closed',
                tooltip: T$e.getText('results.title')
            });

            window.Catalog.resultsContainer.innerHTML = '<div class="results-header">\n            <span class="results-title">' + T$e.getText('results.title') + '</span>\n            <span class="results-number">0</span>\n            <div class="results-buttons">                \n                <i title="' + T$e.getText('results.quicklooks.cart') + '" class="quicklooks-cart"></i>\n                <i title="' + T$e.getText('results.clear') + '" class="results-clear"></i>\n            </div>\n        </div>\n        <div class="results-pane"></div>';

            window.Catalog.resultsNumberContainer = window.Catalog.resultsContainer.querySelector('.results-number');

            // window.Catalog.favoritesContainer = window.Catalog.searchSidebar.setPane('favorites', {
            //     createTab: createTab({
            //         icon: 'sidebar-cart',
            //         active: 'sidebar-cart-active',
            //         inactive: 'sidebar-cart-passive',
            //         hint: T.getText('results.favorites'),
            //     }),
            // });

            window.Catalog.favoritesContainer = window.Catalog.searchSidebar.addTab({
                id: 'favorites',
                icon: 'sidebar-favorites',
                opened: 'sidebar-favorites-opened',
                closed: 'sidebar-favorites-closed',
                tooltip: T$e.getText('results.favorites')
            });

            window.Catalog.favoritesContainer.innerHTML = '<div class="favorites-header">\n            <span class="favorites-title">' + T$e.getText('results.favorites') + '</span>\n            <span class="favorites-number">0</span>          \n            <div class="favorites-buttons">\n                <i title="' + T$e.getText('favorites.delete') + '" class="favorites-delete-button"></i>\n            </div>\n        </div>\n        <div class="favorites-pane"></div>\n        <div class="favorites-footer">\n            <div class="favorites-order-button">\n                <div>' + T$e.getText('cart.add') + '</div>\n            </div>\n        </div>';

            window.addEventListener('resize', function (e) {
                resize_containers();
            });

            window.Catalog.drawnObjectsControl = new DrawnObjectsControl({ position: 'topright' });
            map.addControl(window.Catalog.drawnObjectsControl);

            window.Catalog.resultList = new ResultList(window.Catalog.resultsContainer.querySelector('.results-pane'), { restricted: restricted });
            window.Catalog.favoritesList = new FavoritesList(window.Catalog.favoritesContainer.querySelector('.favorites-pane'), { restricted: restricted });

            window.Catalog.imageDetails = new ImageDetails(create_container(), { left: 600, top: 300 });
            window.Catalog.resultsController = new ResultsController({
                map: map,
                requestAdapter: window.Catalog.requestAdapter,
                sidebar: window.Catalog.searchSidebar,
                resultList: window.Catalog.resultList,
                favoritesList: window.Catalog.favoritesList,
                imageDetails: window.Catalog.imageDetails,
                drawnObjects: window.Catalog.drawnObjectsControl.widget
            });

            window.Catalog.resultsController.addEventListener('cart', function (e) {
                var count = window.Catalog.resultsController.favoritesCount;
                // window.Catalog.searchSidebar.enable ('favorites', count > 0);
                if (count > 0) {
                    window.Catalog.searchSidebar.enable('favorites');
                } else {
                    window.Catalog.searchSidebar.disable('favorites');
                }

                update_cart_number(count);
            });

            var dlgCartLimitContainer = create_container();
            dlgCartLimitContainer.classList.add('cart-limit-dialog');

            window.Catalog.dlgCartLimit = new FloatingPanel(dlgCartLimitContainer, {
                id: 'cart.limit.dialog',
                left: Math.round(mapContainer.getBoundingClientRect().width / 2),
                top: top, modal: true, header: false
            });
            window.Catalog.dlgCartLimit.hide();
            window.Catalog.dlgCartLimit.content.innerHTML = '' + T$e.getText('favorites.limit');
            window.Catalog.dlgCartLimit.footer.innerHTML = '<button class="dialog-cancel-button">' + T$e.getText('alerts.close') + '</button>';
            window.Catalog.dlgCartLimit.footer.querySelector('button.dialog-cancel-button').addEventListener('click', function (e) {
                window.Catalog.dlgCartLimit.hide();
            });

            window.Catalog.resultsController.addEventListener('cart:limit', function (e) {
                window.Catalog.dlgCartLimit.show();
            });

            window.Catalog.resultsController.addEventListener('cart:all', function (e) {
                var count = window.Catalog.favoritesCount;
                // window.Catalog.searchSidebar.enable ('favorites', count > 0);
                if (count > 0) {
                    window.Catalog.searchSidebar.enable('favorites');
                } else {
                    window.Catalog.searchSidebar.disable('favorites');
                }

                update_cart_number(count);
            });

            window.Catalog.resultsController.addEventListener('visible', function (e) {
                update_quicklooks_cart();
            });

            window.Catalog.resultsController.addEventListener('selected', function (e) {
                enable_cart(window.Catalog.resultsController.hasFavoritesSelected);
            });

            var btnOrder = window.Catalog.favoritesContainer.querySelector('.favorites-order-button');
            btnOrder.addEventListener('click', function (e) {
                if (btnOrder.classList.contains('favorites-order-button-active')) {
                    add_to_order();
                }
            });

            var btnRemoveFavorites = window.Catalog.favoritesContainer.querySelector('.favorites-delete-button');
            btnRemoveFavorites.addEventListener('click', function (e) {
                if (btnRemoveFavorites.classList.contains('favorites-delete-button-active')) {
                    window.Catalog.resultsController.removeSelectedFavorites();
                    enable_cart(window.Catalog.resultsController.hasFavoritesSelected);
                    var count = window.Catalog.resultsController.favoritesCount;
                    update_cart_number(count);

                    if (count === 0) {
                        if (window.Catalog.searchSidebar.enabled('results')) {
                            // window.Catalog.searchSidebar.open ('results');
                            window.Catalog.searchSidebar.setCurrent('results');
                        } else {
                            // window.Catalog.searchSidebar.open ('search');
                            window.Catalog.searchSidebar.setCurrent('search');
                        }
                        // window.Catalog.searchSidebar.enable ('favorites', false);
                        window.Catalog.searchSidebar.disable('favorites');
                    }
                }
            });

            window.Catalog.btnQuicklooksCart = window.Catalog.resultsContainer.querySelector('.quicklooks-cart');
            update_quicklooks_cart();
            window.Catalog.btnQuicklooksCart.addEventListener('click', function (e) {
                if (window.Catalog.btnQuicklooksCart.classList.contains('quicklooks-cart-active')) {
                    window.Catalog.resultsController.addVisibleToCart();
                }
            });

            window.Catalog.resultsContainer.querySelector('.results-clear').addEventListener('click', function (e) {
                // window.Catalog.searchSidebar.open('search');
                window.Catalog.searchSidebar.setCurrent('search');
                window.Catalog.resultsController.clear();
                // window.Catalog.searchSidebar.enable ('results', false);
                window.Catalog.searchSidebar.disable('results');
                update_results_number(window.Catalog.resultsController.resultsCount);
            });

            // window.Catalog.filterControl = new FilterControl ({position: 'topleft'});
            // map.addControl (window.Catalog.filterControl);
            // window.Catalog.filterControl.getContainer().style.visibility = 'hidden';
            // window.Catalog.filterControl.clouds.values = [0, 100];
            // window.Catalog.filterControl.angle.values = [0, 60];
            // window.Catalog.resultsController.enableFilter(true);
            // let filterVisible = false;
            // let apply_filter = (clouds, angle) => {
            //     window.Catalog.resultsController.filter = item => {
            //         return clouds[0] <= item.cloudness && item.cloudness <= clouds[1] &&
            //             angle[0] <= item.tilt && item.tilt <= angle[1];
            //     };
            //     window.Catalog.resultsController.enableFilter(true);
            //     resize_results(window.Catalog.resultsContainer);            
            //     update_results_number(window.Catalog.resultList.count);
            //     update_cart_number(window.Catalog.favoritesList.count);
            // };
            // window.Catalog.filterControl.on ('change', e => {
            //     let {clouds, angle} = e;
            //     apply_filter (clouds, angle);
            // });

            // let show_filter = () => {
            //     if (!filterVisible) {
            //         window.Catalog.filterControl.getContainer().style.visibility = 'visible';
            //         let clouds = [0, 100];
            //         let angle = [0, 60];
            //         window.Catalog.filterControl.clouds.values = clouds;
            //         window.Catalog.filterControl.angle.values = angle;
            //         // window.Catalog.filterControl.satellites.items = window.Catalog.resultsController.platforms;
            //         apply_filter (clouds, angle);
            //         filterVisible = true;
            //     }
            // };

            // let hide_filter = () => {
            //     if (filterVisible) {
            //         window.Catalog.filterControl.getContainer().style.visibility = 'hidden';
            //         filterVisible = false;
            //     }
            // };       

            // window.Catalog.searchSidebar.on('opened', e => {            
            //     switch(e.id) {
            //         case 'search':
            //             window.Catalog.searchOptions.refresh();
            //             resize_search_options(searchContainer);                    
            //             window.Catalog.resultsController.hideContours(); 
            //             // hide_filter();
            //             break;
            //         case 'results':
            //             window.Catalog.resultsController.showResults();
            //             resize_results(window.Catalog.resultsContainer);  
            //             // show_filter();
            //             break;
            //         case 'favorites':
            //             window.Catalog.resultsController.showFavorites();                    
            //             resize_favorites(window.Catalog.favoritesContainer);                    
            //             enable_cart (window.Catalog.resultsController.hasFavoritesSelected);
            //             // show_filter();
            //             break;
            //         default:
            //             break;
            //     }
            //     update_cart_number(window.Catalog.resultsController.favoritesCount);
            //     shift_base_layers_control();
            // });

            window.Catalog.searchSidebar.on('change', function (e) {
                var current = e.detail.current;

                switch (current) {
                    case 'search':
                        window.Catalog.searchOptions.refresh();
                        resize_search_options();
                        window.Catalog.resultsController.hideContours();
                        // hide_filter();
                        break;
                    case 'results':
                        window.Catalog.resultsController.showResults();
                        // resize_results(window.Catalog.resultsContainer);  
                        // show_filter();
                        break;
                    case 'favorites':
                        window.Catalog.resultsController.showFavorites();
                        // resize_favorites(window.Catalog.favoritesContainer);                    
                        enable_cart(window.Catalog.resultsController.hasFavoritesSelected);
                        // show_filter();
                        break;
                    default:
                        update_cart_number(window.Catalog.favoritesList.items.length);
                        shift_base_layers_control();
                        break;
                }
                update_cart_number(window.Catalog.resultsController.favoritesCount);
                shift_base_layers_control();
            });

            // window.Catalog.searchSidebar.enable ('results', false);
            window.Catalog.searchSidebar.disable('results');

            // window.Catalog.searchSidebar.enable ('favorites', false);
            window.Catalog.searchSidebar.disable('favorites');

            // window.Catalog.searchSidebar.on('closed', e => {  
            //     update_cart_number(window.Catalog.favoritesList.items.length);         
            //     shift_base_layers_control();
            // });

            var get_bounds = function get_bounds() {
                var bounds = map.getBounds();
                var nw = bounds.getNorthWest();
                var ne = bounds.getNorthEast();
                var se = bounds.getSouthEast();
                var sw = bounds.getSouthWest();
                return {
                    type: 'Polygon',
                    coordinates: [[[nw.lng, nw.lat], [ne.lng, ne.lat], [se.lng, se.lat], [sw.lng, sw.lat], [nw.lng, nw.lat]]]
                };
            };

            window.Catalog.resultsController.addEventListener('result:done', function (e) {
                var activeTabId = e.detail.activeTabId;

                switch (activeTabId) {
                    case 'results':
                        if (window.Catalog.resultsController.hasResults) {
                            // window.Catalog.searchSidebar.enable ('results', true);
                            window.Catalog.searchSidebar.enable('results');
                            // window.Catalog.searchSidebar.open('results');
                            window.Catalog.searchSidebar.setCurrent('results');
                            window.Catalog.resultsController.zoomToResults();
                        }
                        break;
                    case 'favorites':
                        if (window.Catalog.resultsController.hasFavorites) {
                            // window.Catalog.searchSidebar.enable ('favorites', true);
                            window.Catalog.searchSidebar.enable('favorites');
                            // window.Catalog.searchSidebar.open('favorites');
                            window.Catalog.searchSidebar.setCurrent('favorites');
                            window.Catalog.resultsController.zoomToFavorites();
                        }
                        break;
                    default:
                        break;
                }
            });

            window.Catalog.btnSearch = searchContainer.querySelector('.search-options-search-button');
            window.Catalog.btnSearch.addEventListener('click', function () {
                if (window.Catalog.btnSearch.classList.contains('search-options-search-button-active')) {
                    ignoreResults = false;
                    window.Catalog.loaderWidget.show();
                    window.Catalog.resultsController.clear();
                    window.Catalog.requestAdapter.criteria = window.Catalog.searchOptions.criteria;
                    if (window.Catalog.drawnObjectsControl.widget.count === 0) {
                        window.Catalog.requestAdapter.geometries = [get_bounds()];
                    }
                    window.Catalog.requestAdapter.search(window.RESULT_MAX_COUNT).then(function (_ref3) {
                        var Count = _ref3.Count,
                            fields = _ref3.fields,
                            values = _ref3.values,
                            types = _ref3.types;

                        window.Catalog.loaderWidget.hide();
                        if (!ignoreResults) {
                            if (Count === 0) {
                                // window.Catalog.searchSidebar.enable ('results', false);
                                window.Catalog.searchSidebar.disable('results');
                                update_results_number(0);
                                window.Catalog.notificationWidget.content.innerText = T$e.getText('alerts.nothing');
                                window.Catalog.notificationWidget.show();
                            } else if (0 < Count && Count <= window.RESULT_MAX_COUNT) {

                                window.Catalog.resultsController.setLayer({ fields: fields, values: values, types: types });
                                update_results_number(Count);
                            } else {
                                // window.Catalog.searchSidebar.enable ('results', false);
                                window.Catalog.searchSidebar.disable('results');
                                if (window.Catalog.userInfo.IsAuthenticated && window.Catalog.userInfo.Role === 'scanex') {
                                    window.Catalog.dlgDownloadResult.show();
                                } else {
                                    window.Catalog.dlgChangeResult.show();
                                }
                            }
                        }
                    }).catch(function (e) {
                        console.log(e);
                        window.Catalog.loaderWidget.hide();
                        window.Catalog.dlgErrorMessage.content.innerHTML = e.toString() + '<br/>' + e.StackTrace;
                        window.Catalog.dlgErrorMessage.show();
                    });
                }
            });
            enable_search();

            var sidebarWidth = sidebarContainer.getBoundingClientRect().width;
            map.options.paddingTopLeft = [sidebarWidth, 0];

            resolve(state);
        });
    }

    function update_quicklooks_cart() {
        if (window.Catalog.resultsController.hasVisibleResults) {
            window.Catalog.btnQuicklooksCart.classList.add('quicklooks-cart-active');
            window.Catalog.btnQuicklooksCart.classList.remove('quicklooks-cart-passive');
        } else {
            window.Catalog.btnQuicklooksCart.classList.remove('quicklooks-cart-active');
            window.Catalog.btnQuicklooksCart.classList.add('quicklooks-cart-passive');
        }
    }

    function shift_base_layers_control() {
        var _window$Catalog$searc = window.Catalog.searchSidebar.getContainer().getBoundingClientRect(),
            width = _window$Catalog$searc.width;

        map.gmxControlsManager.get('iconLayers').getContainer().style.left = width + 30 + 'px';
    }

    function enable_search() {
        if (window.Catalog.searchOptions.selected) {
            window.Catalog.btnSearch.classList.remove('search-options-search-button-passive');
            window.Catalog.btnSearch.classList.add('search-options-search-button-active');
        } else {
            window.Catalog.btnSearch.classList.remove('search-options-search-button-active');
            window.Catalog.btnSearch.classList.add('search-options-search-button-passive');
        }
    }

    function enable_cart(enable) {
        var btnOrder = document.body.querySelector('[data-pane-id=favorites] .favorites-order-button');
        var btnDelete = document.body.querySelector('[data-pane-id=favorites] .favorites-delete-button');
        if (enable) {
            btnOrder.classList.remove('favorites-order-button-passive');
            btnDelete.classList.remove('favorites-delete-button-passive');
            btnOrder.classList.add('favorites-order-button-active');
            btnDelete.classList.add('favorites-delete-button-active');
        } else {
            btnOrder.classList.remove('favorites-order-button-active');
            btnDelete.classList.remove('favorites-delete-button-active');
            btnOrder.classList.add('favorites-order-button-passive');
            btnDelete.classList.add('favorites-delete-button-passive');
        }
    }

    function cart_enabled() {
        return !document.body.querySelector('[data-pane-id=favorites] .favorites-order-button').classList.contains('button-disabled');
    }

    function ensure_cart_number_place() {
        // let p = document.body.querySelector('.iconSidebarControl [data-tab-id=favorites] .sidebar-cart');
        var p = document.body.querySelector('.scanex-sidebar [data-tab-id=favorites] .sidebar-favorites');
        var el = p.querySelector('.cart-number');
        if (el === null) {
            el = document.createElement('span');
            el.className = 'cart-number';
            p.appendChild(el);
        }
        return el;
    }

    function update_cart_number(num) {
        document.querySelector('.favorites-number').innerText = num;
        var cartNumberPlace = ensure_cart_number_place();
        if (num) {
            cartNumberPlace.innerText = num;
            cartNumberPlace.style.visibility = 'visible';
        } else {
            cartNumberPlace.style.visibility = 'hidden';
        }
        // window.Catalog.searchSidebar.enable('favorites', num > 0);
        if (num > 0) {
            window.Catalog.searchSidebar.enable('favorites');
        } else {
            window.Catalog.searchSidebar.disable('favorites');
        }
    }

    function update_results_number(num) {
        // document.querySelector('[data-pane-id=results] .results-number').innerText = num;
        window.Catalog.resultsNumberContainer.innerText = num;
    }

    function add_to_order() {
        if (window.Catalog.userInfo.IsAuthenticated && cart_enabled()) {
            window.Catalog.cartPanel.items = window.Catalog.favoritesList.items.filter(function (item) {
                return item.selected;
            });
            show_cart();
        } else {
            window.Catalog.dlgAuth.show();
        }
    }

    function show_cart() {
        if (window.Catalog.cartPanel.count > 0) {
            get_permalink_id().then(function (id) {
                window.Catalog.cartPanel.permalink = get_permalink_url(id);
                window.Catalog.cartPanel.show();
            }).catch(function (e) {
                console.log(e);
                window.Catalog.dlgErrorMessage.content.innerHTML = '' + T$e.getText('errors.permalink');
                window.Catalog.dlgErrorMessage.show();
            });
        }
    }

    function init_drawing() {

        var activeIcon = null;

        var setActive = function setActive(id) {
            map.gmxDrawing.bringToFront();
            switch (id) {
                case 'point':
                    map.gmxDrawing.create('Point');
                    break;
                case 'polygon':
                    map.gmxDrawing.create('Polygon');
                    break;
                case 'polyline':
                    map.gmxDrawing.create('Polyline');
                    break;
                case 'rectangle':
                    map.gmxDrawing.create('Rectangle');
                    break;
                default:
                    break;
            }
        };

        var handleStateChange = function handleStateChange(e) {
            var opt = e.target.options;
            var id = opt.id;
            if (id === activeIcon) {
                setActive();
            } else if (opt.isActive) {
                setActive(id);
            }
            setActiveIcon(e.target, opt.isActive);
        };

        map.gmxDrawing.on('drawstop', function (e) {
            var opt = e.object._obj.options || {};
            setActiveIcon(e.object, false);
            // if (!window.Catalog.searchSidebar.isOpened()) {               
            //     window.Catalog.searchSidebar.open('search');
            // }
            if (!window.Catalog.searchSidebar.getCurrent()) {
                window.Catalog.searchSidebar.setCurrent('search');
            }
        });

        map._controlCorners.searchControls = document.querySelector('#search-controls');
        map._controlCorners.drawControls = document.querySelector('#draw-controls');
        map.gmxControlsManager.init({
            gmxHide: null,
            gmxLogo: null,
            gmxZoom: null,
            gmxDrawing: null,
            svgSprite: false
        });

        var drawControls = (window.IS_MOBILE ? ['point'] : ['point', 'polyline', 'polygon', 'rectangle']).map(function (id) {
            var control = new L.Control.gmxIcon({
                id: id,
                position: 'drawControls',
                title: T$e.getText('controls.' + id),
                togglable: true,
                imagePath: './dist/'
            });
            control.on('statechange', handleStateChange);
            map.gmxControlsManager.add(control);
            map.addControl(control);
            return control;
        });

        var setActiveIcon = function setActiveIcon(control, isActive) {
            activeIcon = null;
            drawControls.forEach(function (ctr) {
                var flag = control === ctr && (isActive || ctr.options.isActive);
                ctr.setActive(flag);
                if (flag) {
                    activeIcon = ctr.options.id;
                }
            });
            return activeIcon;
        };
    }

    function init_permalink() {
        var dlgPermalink = create_container();
        dlgPermalink.style.display = 'none';
        dlgPermalink.classList.add('dialog-permalink');
        dlgPermalink.innerHTML = '<input type="text" value=""/><button class="copy-button">' + T$e.getText('alerts.clipboard') + '</button>';
        dlgPermalink.querySelector('.copy-button').addEventListener('click', function (e) {
            var input = dlgPermalink.querySelector('input[type="text"]');
            input.focus();
            input.select();
            document.execCommand('copy');
            dlgPermalink.style.display = 'none';
            window.Catalog.notificationWidget.content.innerText = T$e.getText('alerts.permalink');
            window.Catalog.notificationWidget.show();
        });
        var permalinkControl = new L.Control.gmxIcon({
            id: 'link',
            position: 'searchControls',
            title: T$e.getText('controls.permalink'),
            stateChange: function stateChange(control) {
                get_permalink_id().then(function (id) {
                    dlgPermalink.querySelector('input[type="text"]').value = get_permalink_url(id);
                    dlgPermalink.style.display = 'block';
                });
            }
        });
        map.gmxControlsManager.add(permalinkControl);
        map.addControl(permalinkControl);
        dlgPermalink.style.top = document.getElementById('header').getBoundingClientRect().height + 'px';
        dlgPermalink.style.left = '450px';
    }

    function init_boxzoom() {
        var zoomControl = new L.Control.gmxIcon({
            id: 'boxzoom',
            position: 'searchControls',
            toggle: true,
            title: T$e.getText('controls.zoom'),
            onAdd: function onAdd(control) {
                var _onMouseDown = map.boxZoom._onMouseDown;
                map.boxZoom._onMouseDown = function (e) {
                    _onMouseDown.call(map.boxZoom, {
                        clientX: e.clientX,
                        clientY: e.clientY,
                        which: 1,
                        shiftKey: true
                    });
                };
                map.on('boxzoomend', function () {
                    map.dragging.enable();
                    map.boxZoom.removeHooks();
                    control.setActive(false);
                });
            },
            stateChange: function stateChange(control) {
                if (control.options.isActive) {
                    map.dragging.disable();
                    map.boxZoom.addHooks();
                } else {
                    map.dragging.enable();
                    map.boxZoom.removeHooks();
                }
            }
        });
        map.gmxControlsManager.add(zoomControl);
        map.addControl(zoomControl);
    }

    function init_zoom() {
        var zoomControl = L.control.gmxZoom({ position: 'bottomright' });
        map.gmxControlsManager.add(zoomControl);
        map.addControl(zoomControl);
    }

    function init_upload(shapeLoader) {
        var npoints = function npoints(coordinates) {
            var m = /\[(-?\d+(\.\d+)?)\s*,\s*(-?\d+(\.\d+)?)\]/g.exec(JSON.stringify(coordinates));
            return m && m.length || 0;
        };
        var uploadControl = new L.Control.gmxIcon({
            id: 'upload',
            position: 'searchControls',
            title: T$e.getText('controls.upload'),
            stateChange: function stateChange(control) {
                shapeLoader.upload().then(function (_ref4) {
                    var type = _ref4.type,
                        results = _ref4.results;

                    switch (type) {
                        case 'shapefile':
                            var bounds = null;
                            var count = results.reduce(function (a, item) {
                                var coordinates = item.geometry.coordinates;

                                return a + npoints(coordinates);
                            }, 0);
                            if (count <= window.MAX_UPLOAD_POINTS) {
                                results.forEach(function (item) {
                                    var _window$Catalog$resul = window.Catalog.resultsController.getObject({ geoJSON: item }),
                                        name = _window$Catalog$resul.name,
                                        color = _window$Catalog$resul.color,
                                        editable = _window$Catalog$resul.editable,
                                        visible = _window$Catalog$resul.visible,
                                        _window$Catalog$resul2 = _window$Catalog$resul.geoJSON,
                                        geometry = _window$Catalog$resul2.geometry,
                                        properties = _window$Catalog$resul2.properties;

                                    var drawing = window.Catalog.resultsController.addDrawing({
                                        name: name,
                                        color: color,
                                        geoJSON: { type: 'Feature', properties: properties, geometry: geometry },
                                        visible: visible,
                                        editable: editable
                                    });
                                    if (drawing) {
                                        if (bounds) {
                                            bounds.extend(drawing.getBounds());
                                        } else {
                                            bounds = drawing.getBounds();
                                        }
                                    }
                                });

                                var _mapContainer$getBoun2 = mapContainer.getBoundingClientRect(),
                                    height = _mapContainer$getBoun2.height;

                                window.Catalog.drawnObjectsControl.widget.resize(height - 150);
                                map.fitBounds(bounds, { animate: false });
                            } else {
                                window.Catalog.dlgErrorMessage.content.innerHTML = T$e.getText('errors.upload') + '<br>' + T$e.getText('errors.points');
                                window.Catalog.dlgErrorMessage.show();
                            }
                            break;
                        case 'idlist':
                            var fields = results.fields,
                                values = results.values,
                                types = results.types,
                                Count = results.Count;

                            if (Count) {

                                var geometry_index = values[0].length - 1;
                                values.forEach(function (item) {
                                    item[geometry_index] = L.gmxUtil.convertGeometry(item[geometry_index], false, true);
                                });

                                window.Catalog.resultsController.setLayer(results);
                                update_results_number(Count);
                            }
                            break;
                        default:
                            break;
                    }
                }).catch(function (e) {
                    console.log(e);
                    window.Catalog.dlgErrorMessage.content.innerHTML = '' + T$e.getText('errors.upload');
                    window.Catalog.dlgErrorMessage.show();
                });
            }
        });
        map.addControl(uploadControl);
    }

    function init_download(shapeLoader) {
        var dlgDownload = create_container();
        dlgDownload.style.display = 'none';
        dlgDownload.classList.add('dialog-download');
        dlgDownload.innerHTML = '<table border="0" cellspacing="0" cellpadding="0">\n        <tbody>\n            <tr>\n                <td class="download-type">' + T$e.getText('download.type') + '</td>\n                <td>\n                    <select>                        \n                        <option value="borders">' + T$e.getText('download.borders') + '</option>\n                        <option value="results">' + T$e.getText('download.results') + '</option>\n                        <option value="rcsv">' + T$e.getText('download.rcsv') + '</option>\n                        <option value="cart">' + T$e.getText('download.cart') + '</option>\n                        <option value="ccsv">' + T$e.getText('download.ccsv') + '</option>\n                        <option value="quicklooks">' + T$e.getText('download.quicklooks') + '</option>\n                    </select>\n                </td>\n            </tr>\n            <tr>\n                <td class="download-file">' + T$e.getText('download.file') + '</td>\n                <td>\n                    <input type="text" value="' + T$e.getText('download.noname') + '"/>\n                </td>\n            </tr>\n            <tr>\n                <td colspan="2" class="download-footer">\n                    <button class="download-ok">' + T$e.getText('download.ok') + '</button>\n                    <button class="download-cancel">' + T$e.getText('download.cancel') + '</button>\n                </td>\n            </tr>\n        </tbody>\n    </table>';

        dlgDownload.querySelector('.download-ok').addEventListener('click', function (e) {
            var type = dlgDownload.querySelector('select').value;
            var name = dlgDownload.querySelector('input[type=text]').value;
            var valid = false;
            switch (type) {
                case 'borders':
                    if (window.Catalog.drawnObjectsControl.widget.items.length > 0) {
                        valid = true;
                    }
                    break;
                case 'results':
                case 'rcsv':
                    if (window.Catalog.resultsController.hasResults) {
                        valid = true;
                    }
                    break;
                case 'cart':
                case 'ccsv':
                case 'quicklooks':
                    if (window.Catalog.resultsController.hasFavorites) {
                        valid = true;
                    }
                    break;
                default:
                    break;
            }
            if (valid) {
                dlgDownload.style.display = 'none';
                shapeLoader.download(name, type);
            } else {
                window.Catalog.notificationWidget.content.innerText = T$e.getText('download.noresults');
                window.Catalog.notificationWidget.show();
            }
        });
        dlgDownload.querySelector('input[type="text"]').addEventListener('focus', function (e) {
            return e.target.select();
        });
        dlgDownload.querySelector('.download-cancel').addEventListener('click', function (e) {
            dlgDownload.style.display = 'none';
        });

        var downloadControl = new L.Control.gmxIcon({
            id: 'download',
            position: 'searchControls',
            title: T$e.getText('controls.download'),
            stateChange: function stateChange(control) {
                if (window.Catalog.resultsController.resultsCount + window.Catalog.resultsController.favoritesCount > 0 || window.Catalog.drawnObjectsControl.widget.items.length) {
                    dlgDownload.style.display = 'block';
                } else {
                    window.Catalog.notificationWidget.content.innerText = T$e.getText('download.empty');
                    window.Catalog.notificationWidget.show();
                }
            }
        });
        map.addControl(downloadControl);
        dlgDownload.style.top = document.getElementById('header').getBoundingClientRect().height + 'px';
        dlgDownload.style.left = downloadControl.getContainer().getBoundingClientRect().left + 'px';
    }

    function init_base_layers() {
        var lang = T$e.getLanguage() || 'rus';
        var layers = map.gmxBaseLayersManager.getActiveIDs().map(function (id) {
            var layer = map.gmxBaseLayersManager.get(id);
            if (!layer) {
                return null;
            } else {
                return {
                    layer: layer,
                    icon: layer.options.icon,
                    title: layer.options[lang]
                };
            }
        }).filter(function (e) {
            return e;
        });

        var baseLayersControl = new iconLayers(layers, { id: 'iconLayers' });
        map.gmxControlsManager.add(baseLayersControl);
        map.addControl(baseLayersControl);

        shift_base_layers_control();
    }

    function init_controls(state) {
        return new Promise(function (resolve) {

            init_drawing();
            // init_print();
            init_permalink();
            init_zoom();
            if (!window.IS_MOBILE) {
                init_boxzoom();
                window.Catalog.shapeLoader = new ShapeLoader({
                    gmxResourceServer: window.Catalog.gmxResourceServer,
                    resultsController: window.Catalog.resultsController,
                    catalogResourceServer: window.Catalog.catalogResourceServer,
                    drawnObjects: window.Catalog.drawnObjectsControl.widget
                });
                init_upload(window.Catalog.shapeLoader);
                init_download(window.Catalog.shapeLoader);
            }
            init_base_layers();
            window.Catalog.notificationWidget = new NotificationWidget(map._controlCorners.right, { timeout: 2000 });
            window.Catalog.loaderWidget = new LoaderWidget();
            window.Catalog.loaderWidget.addEventListener('cancel', function (e) {
                ignoreResults = true;
            });

            resize_sidebar();
            resolve(state);
        });
    }

    function init_cart(state) {
        return new Promise(function (resolve) {
            var restricted = window.Catalog.userInfo.Role === 'scanex';

            var _get_map_center3 = get_map_center(),
                left = _get_map_center3.left,
                top = _get_map_center3.top;

            window.Catalog.cartPanel = new Cart(create_container(), {
                catalogResourceServer: window.Catalog.catalogResourceServer,
                left: left, top: top, modal: true, internal: restricted
            });

            update_cart_number(0);

            window.Catalog.cartPanel.addEventListener('items:change', function (e) {
                update_cart_number(e.detail);
            });
            resolve(state);
        });
    }

    function load_search_criteria(_ref5) {
        var archive = _ref5.archive,
            _ref5$date = slicedToArray(_ref5.date, 2),
            dateStart = _ref5$date[0],
            dateEnd = _ref5$date[1],
            annually = _ref5.annually,
            angle = _ref5.angle,
            clouds = _ref5.clouds,
            stereo = _ref5.stereo,
            satellites$$1 = _ref5.satellites;

        var dates = [moment(dateStart).toDate(), moment(dateEnd).toDate()];
        var _window$Catalog$defau = window.Catalog.defaultCriteria.satellites,
            ms = _window$Catalog$defau.ms,
            pc = _window$Catalog$defau.pc;

        ms.forEach(function (s) {
            return s.checked = satellites$$1.ms.indexOf(s.id) >= 0;
        });
        pc.forEach(function (s) {
            return s.checked = satellites$$1.pc.indexOf(s.id) >= 0;
        });
        window.Catalog.searchOptions.criteria = {
            archive: archive,
            date: dates,
            annually: annually,
            angle: angle,
            clouds: clouds,
            stereo: stereo,
            satellites: { ms: ms, pc: pc }
        };
    }

    function load_state(state) {
        localStorage.removeItem('view_state');
        T$e.setLanguage(state.lang || DEFAULT_LANGUAGE$1);
        L.gmxLocale.setLanguage(state.lang || DEFAULT_LANGUAGE$1);
        load_search_criteria(state.searchCriteria);
        state.drawingObjects.forEach(function (item) {
            window.Catalog.resultsController.addDrawing(item);
        });
        update_results_number(state.items.length);

        update_cart_number(state.cart.length);

        var items = state.items.reduce(function (a, item) {
            var gmx_id = item.gmx_id;

            a[gmx_id] = item;
            a[gmx_id].result = true;
            return a;
        }, {});

        items = state.cart.reduce(function (a, item) {
            var gmx_id = item.gmx_id;

            if (a[gmx_id]) {
                a[gmx_id].cart = true;
                if (item.hasOwnProperty('selected')) {
                    a[gmx_id].selected = item.selected;
                }
                if (item.hasOwnProperty('visible')) {
                    a[gmx_id].visible = item.visible;
                } else if (item.hasOwnProperty('quicklook')) {
                    a[gmx_id].visible = item.quicklook;
                }
            } else {
                a[gmx_id] = item;
                a[gmx_id].cart = true;
            }
            delete a[gmx_id].checked;
            delete a[gmx_id].quicklook;
            return a;
        }, items);

        var _Object$keys$reduce = Object.keys(items).reduce(function (a, gmx_id) {
            var item = items[gmx_id];
            if (a.fields.length === 0) {
                attributes.forEach(function (k, i) {
                    if (k === 'selected' || k === 'visible' || k === 'result' || k === 'cart' || item.hasOwnProperty(k)) {
                        a.fields.push(k);
                        a.types.push(attrTypes[i]);
                    }
                });
            }

            var values = a.fields.map(function (k) {
                if (item[k]) {
                    if (k === 'visible') {
                        return item[k] === 'loading' ? 'visible' : item[k];
                    } else {
                        return item[k];
                    }
                } else {
                    return false;
                }
            });

            values.push(L.gmxUtil.convertGeometry(item.geoJSON, false, true));
            a.values.push(values);
            return a;
        }, { fields: [], values: [], types: [] }),
            fields = _Object$keys$reduce.fields,
            values = _Object$keys$reduce.values,
            types = _Object$keys$reduce.types;

        window.Catalog.resultsController.setLayer({ fields: fields, values: values, types: types }, state.activeTabId);

        update_quicklooks_cart();

        if (state.items.length > 0) {
            // window.Catalog.searchSidebar.enable ('results', true);
            window.Catalog.searchSidebar.enable('results');
        }

        if (state.cart.length > 0) {
            // window.Catalog.searchSidebar.enable ('favorites', true);        
            window.Catalog.searchSidebar.enable('favorites');
        }

        var _state$position = state.position,
            x = _state$position.x,
            y = _state$position.y,
            z = _state$position.z;

        var center = L.Projection.Mercator.unproject({ y: y, x: x });
        map.setView(center, 17 - z);
        // map.invalidateSize();
        // window.Catalog.searchSidebar.open(state.activeTabId);
        window.Catalog.searchSidebar.setCurrent(state.activeTabId);

        var _mapContainer$getBoun3 = mapContainer.getBoundingClientRect(),
            height = _mapContainer$getBoun3.height;

        window.Catalog.drawnObjectsControl.widget.resize(height - 150);
    }

    function load_presets(state) {
        return new Promise(function (resolve) {
            var s = localStorage.getItem('view_state');
            if (s) {
                var viewState = JSON.parse(s);
                load_state(viewState);
                resolve(state);
            } else {
                var matches = /link=([^&]+)/g.exec(location.search);
                if (Array.isArray(matches) && matches.length > 0) {
                    var _matches = slicedToArray(matches, 2),
                        link = _matches[0],
                        id = _matches[1];

                    read_permalink(id).then(function (response) {
                        load_state(response);
                        resolve(state);
                    }).catch(function (e) {
                        console.log(e);
                        resolve(state);
                    });
                } else {
                    resolve(state);
                }
            }
        });
    }

    function load_version_info(state) {
        return new Promise(function (resolve) {
            fetch('dist/version-' + T$e.getLanguage() + '.txt').then(function (response) {
                return response.text();
            }).then(function (text) {
                var dlgAboutContainer = create_container();
                window.Catalog.dlgAbout = new About(dlgAboutContainer, { text: text });
                window.Catalog.dlgAbout.hide();
                document.getElementById('help').addEventListener('click', function (e) {
                    // window.Catalog.dlgAbout.show();
                    window.open('https://scanex.github.io/Documentation/Catalog/index.html', '_blank');
                });
                resolve(state);
            });
        });
    }

    chain$1([load_locale, load_map, init_baselayer_manager, set_active_layer, authenticate, get_user, check_access, init_sidebar, init_controls, init_cart, load_presets, load_version_info], {}).then(function (state) {
        var btnLogin = window.Catalog.authContainer.querySelector('.authWidget-loginButton');
        if (btnLogin) {
            btnLogin.addEventListener('click', function (e) {
                if (!localStorage.view_state) {
                    localStorage.setItem('view_state', JSON.stringify(get_state()));
                }
            });
        }
        window.Catalog.langWidget = new LanguageWidget(document.getElementById('lang'), {
            languages: {
                'eng': 'EN',
                'rus': 'RU'
            }
        });
        window.Catalog.langWidget.currentLanguage = T$e.getLanguage();
        window.Catalog.langWidget.addEventListener('change', function (e) {
            T$e.setLanguage(e.detail);
            L.gmxLocale.setLanguage(e.detail);
            localStorage.setItem('view_state', JSON.stringify(get_state()));
            window.location.reload(true);
        });
    });

}(moment,L));

//# sourceMappingURL=scanex-edda.6719e036c5eaf2f960aa1c4f68d6f9a6d5add917.min.js.map